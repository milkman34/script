// ==UserScript==
// @name            Rhino (Deobfuscated) ✝ Leaked By Pashka
// @version         v3
// @grant           none
// @match           *://*.moomoo.io/*
// @require         https://cdn.jsdelivr.net/npm/msgpack-lite@0.1.26/dist/msgpack.min.js
// @require         https://greasyfork.org/scripts/478839-moomoo-io-packet-code/code/MooMooio%20Packet%20Code.js?version=1274028
// @description     ByeBaby: most dogshit mod ive ever seen. no words
// ==/UserScript==

const no = new Map();
const oo = function (c) {
  if (kk.sid === c) {
    return true;
  }
  if (!kk.team) {
    return false;
  }
  for (let a = 0; a < Se.length; a += 2) {
    if (c == Se[a]) {
      return true;
    }
  }
  ;
  return false;
};
let b;
var a = false;
var po = false;
var c = "";
var d = "";
var e = "";
var f = "";
var g = false;
let h = window.location.host.includes("sandbox");
var i = false;
var k = false;
let l = -1;
var m = false;
document.getElementById("ageBarContainer").style.display = "none";
document.getElementById("promoImgHolder").style.display = "block";
var n = 0;
var o = false;
function p(e, a, b, c) {
  return Math.atan2(a - c, e - b);
}
;
var q = "";
var r = false;
var s = "";
var t = "";
let u = document.createElement("div");
u.style = "\n    position: absolute;\n    text-align: right;\n    font-size: 15px;\n    max-width: 90000000000000000000000px;\n    height: 30;\n    top: 64px;\n    right: 250px;\n    color: rgb(190,190, 190);\npadding: 10px;\nborder-radius: 4px;\nposition: absolute;\n\ntransition: 0.5s;\ntext-shadow: 2px 2px 4px rgba(0, 0, 0, 3.5);";
document.querySelector("#pre-content-container").remove();
document.getElementById("gameName").innerText = "";
$("#moomooio_728x90_home").parent().css({
  display: "none"
});
$("#itemInfoHolder").css({
  top: "1050px",
  left: "15px"
});
$("#youtuberOf").remove();
$("#adCard").remove();
$("#mobileInstructions").remove();
$("#downloadButtonContainer").remove();
$("#mobileDownloadButtonContainer").remove();
$(".downloadBadge").remove();
document.getElementById("gameUI").appendChild(u);
var v = false;
var w = false;
var x = document.getElementById("leaderboard");
x.style.top = "10px";
x.style.left = "10px";
var z = 0;
var A = 0;
var B = "black";
var D = "black";
let F = 0;
let G = true;
let H = setInterval(() => {
  if (CanvasRenderingContext2D.prototype.roundRect) {
    CanvasRenderingContext2D.prototype.roundRect = (b => function () {
      if (this.fillStyle == "#8b00ff") {
        if (G) {
          this.fillStyle = "hsl(" + F + ", 100%, 50%)";
        } else {
          this.fillStyle = "#8b00ff";
        }
      }
      return b.call(this, ...arguments);
    })(CanvasRenderingContext2D.prototype.roundRect);
    clearInterval(H);
  }
}, 100);
function I() {
  F += Math.floor(Math.random() * 2);
}
setInterval(I, 60);
var K = false;
var L = false;
var N = false;
let P = [];
var S = true;
var U = false;
var V = true;
var W = false;
var Y = false;
var Z = false;
var _ = false;
var ab = false;
var bb = false;
var cb = false;
var db = false;
var eb = false;
var fb = false;
var gb = false;
var hb = false;
var ib = document.getElementById("ageBarBody");
var jb = false;
var kb = false;
var lb = false;
let mb = "#3d3f42";
var nb = false;
var ob = false;
var pb = false;
var qb = false;
var rb = false;
var sb = false;
var tb = false;
var ub = false;
var vb = false;
var wb = false;
var xb = false;
var yb = false;
var zb = false;
var Ab = false;
var Bb = false;
var Cb = false;
var Db = 10;
var Eb = false;
var Fb = false;
var Gb = false;
var Hb = false;
document.getElementById("guideCard").style.backgroundColor = "transparent";
document.getElementById("setupCard").style.backgroundColor = "transparent";
document.getElementById("menuCardHolder").style.backgroundColor = "transparent";
const Ib = document.createElement("style");
Ib.innerHTML = "@keyframes lightning {0% { text-shadow: none; }}#gameName {display: inline-block;font-weight: bold;font-size: 27px;text-transform: uppercase;letter-spacing: 8px;text-align: center;background-image; background-size: cover;background-repeat: no-repeat;background-position: center;animation: lightning 10000s infinite;animation-fill-mode: forwards;animation-delay: 1s; transform: perspective(100px) rotateY(30deg);perspective-origin: center;transition: transform 0.5s ease-in-out;}";
document.head.appendChild(Ib);
var Jb = false;
var Kb = 0;
var Lb = 0;
var Mb = 0;
var Nb = 0;
let X = "\n    .skinColorItem {\n        height: 20px;\n        width: 20px;\n        border: 4px solid rgba(0, 0, 0, 0.5);\n        transition: 0.5s\n    }\n    .menuButton:hover:before {\n        color: #FFFFFF !important;\n        transform: translateX(-20%) skewX(45deg);\n        transition: 0.5s\n    }\n    .actionBarItem {\n        background-color: none;\n        transition: 0.5s;\n    }\n    .actionBarItem {\n        width: 65px;\n        height: 65px;\n        background-position: center;\n        background-size: 55px 55px;\n        transition: 0.5s\n    }\n    ";
if (typeof GM_addStyle != "undefined" && !lb) {
  GM_addStyle(X);
} else {
  var O = document.createElement("style");
  O.type = "text/css";
  O.appendChild(document.createTextNode(X));
  var Ob = document.getElementsByTagName("head");
  if (Ob.length > 0) {
    Ob[0].appendChild(O);
  } else {
    document.documentElement.appendChild(O);
  }
}
function Pb(e, a, b, f) {
  return Math.sqrt((b -= e) * b + (f -= a) * f);
}
;
function Qb(d, a) {
  let b = Math.abs(a - d) % (Math.PI * 2);
  if (b > Math.PI) {
    return Math.PI * 2 - b;
  } else {
    return b;
  }
}
;
function Rb(l, a = undefined, m = undefined, n = undefined, o, e, f) {
  if (a === undefined) a = -(Math.PI / 2);
  if (m === undefined) m = Math.PI / 2;
  if (n === undefined) n = Math.PI / 18;
  try {
    let g = xc.list[kk.items[l]];
    let h = kk.scale + g.scale + (g.placeOffset || 0);
    let i = {
      attempts: 0,
      placed: 0
    };
    let j = [];
    J.forEach(b => {
      j.push({
        x: b.x,
        y: b.y,
        active: b.active,
        blocker: b.blocker,
        scale: b.scale,
        isItem: b.isItem,
        type: b.type,
        colDiv: b.colDiv,
        getScale: function (c, d) {
          c = c || 1;
          return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : c * 0.6) * (d ? 1 : this.colDiv);
        }
      });
    });
    for (let k = a; k < m; k += n) {
      i.attempts++;
      let a = o + k;
      let b = kk.x2 + h * Math.cos(a);
      let c = kk.y2 + h * Math.sin(a);
      let d = j.find(d => d.active && Pb(b, c, d.x, d.y) < g.scale + (d.blocker ? d.blocker : d.getScale(0.6, d.isItem)));
      if (d) {
        continue;
      }
      if (g.id != 18 && c >= Cg.mapScale / 2 - Cg.riverWidth / 2 && c <= Cg.mapScale / 2 + Cg.riverWidth / 2) {
        continue;
      }
      if (!e && f) {
        if (f.inTrap) {
          if (Qb(p(Jn, kk, 2, 2) + Math.PI, a + Math.PI) <= Math.PI) {
            nn(4, a, 1);
          } else if (kk.items[4] == 15) {
            nn(4, a, 1);
          }
        } else if (Qb(p(Jn, kk, 2, 2), a) <= Cg.gatherAngle / 1.5) {
          nn(2, a, 1);
        } else if (kk.items[4] == 15) {
          nn(4, a, 1);
        }
      } else {
        nn(l, a, 1);
      }
      j.push({
        x: b,
        y: c,
        active: true,
        blocker: g.blocker,
        scale: g.scale,
        isItem: true,
        type: null,
        colDiv: g.colDiv,
        getScale: function () {
          return this.scale;
        }
      });
      if (Qb(p(Jn, kk, 2, 2), a) <= 1) {
        i.placed++;
      }
    }
    if (i.placed > 0 && e && g.dmg) {
      if (Kn(Jn, kk) <= kk.weaponRange + kk.scale * 1.8) {}
    }
  } catch (b) {}
}
;
var Sb = false;
const Tb = [];
setInterval(() => {
  const b = Tb[0];
  if (!b) {
    return;
  }
  Tb = Tb.splice(0, 1);
  b();
}, 70);
setInterval(Ub, 0.1);
function Ub() {
  var b = parseInt(document.getElementById("killCounter").innerText);
  if (b > Db) {
    K = true;
    setTimeout(() => {
      K = false;
    }, 500);
  }
  Db = b;
}
$("body").after("\n<div id=\"operPRO\">\n\n<div class=\"text\">\n    <img src=\"https://static.wikia.nocookie.net/moom/images/7/70/Cookie.png\" alt=\"emoji\" width=\"20\" height=\"20\">AutoHeal\n    <input type=\"checkbox\" id=\"autohealler\">\n</div>\n<div class=\"text\">\n     <img src=\"https://cdn-icons-png.flaticon.com/512/25/25685.png\" alt=\"emoji\" width=\"12\" height=\"12\">AntoHealX2\n    <input type=\"checkbox\" id=\"doubleheal\">\n</div>\n<div class=\"text\">\n    <img src=\"https://static.wikia.nocookie.net/moom/images/0/08/Hat_40.png\" alt=\"emoji\" width=\"20\" height=\"20\">AutoBreak\n    <input type=\"checkbox\" id=\"autoBreaker\">\n</div>\n<div class=\"text\">\n    <img src=\"https://static.wikia.nocookie.net/moom/images/1/11/Pit_Trap.png\" alt=\"emoji\" width=\"20\" height=\"20\">Autoplacer\n    <input type=\"checkbox\" id=\"autoplacewa\">\n</div>\n<div class=\"text\">\n    <img src=\"https://static.wikia.nocookie.net/moom/images/f/f9/Hat_7.png\" alt=\"emoji\" width=\"20\" height=\"20\">AutoHit\n    <input type=\"checkbox\" id=\"autoHitter\">\n</div>\n<div class=\"text\">\n   <img src=\"https://static.wikia.nocookie.net/moom/images/a/aa/Samurai_Musket.jpg\" alt=\"emoji\" width=\"20\" height=\"20\">AutoReload\n    <input type=\"checkbox\" id=\"autoreloadweapon\">\n</div>\n<div class=\"text\">\n   <img src=\"https://static.wikia.nocookie.net/moom/images/a/aa/Samurai_Musket.jpg\" alt=\"emoji\" width=\"20\" height=\"20\">𝐚𝐮𝐭𝐨𝐫𝐞𝐥𝐨𝐚𝐝\n    <input type=\"checkbox\" id=\"autoreloadweapon\">\n</div>\n\n<div class=\"text\">\n    <img src=\"https://static.wikia.nocookie.net/moom/images/a/a3/Hat_11_P.png\" alt=\"emoji\" width=\"20\" height=\"20\">SpikeAnti\n    <input type=\"checkbox\" id=\"spikeanti\">\n<div class=\"text\">\n     <img src=\"https://static.wikia.nocookie.net/moom/images/d/d6/Shield_1.png\" alt=\"emoji\" width=\"20\" height=\"20\">ShieldAnti\n    <input type=\"checkbox\" id=\"shieldanti\">\n</div>\n<hr>\nvisuals\n<div class=\"text\">\n    𝐬𝐦𝐨𝐨𝐭𝐡 𝐜𝐚𝐦𝐞𝐫𝐚\n    <input type=\"checkbox\" id=\"smoothcamr\">\n</div>\n<div class=\"text\">\n    𝐩𝐫𝐞𝐝𝐢𝐜𝐭𝐩𝐥𝐚𝐜𝐞\n    <input type=\"checkbox\" id=\"predicterplacer\">\n</div>\n<div class=\"text\">\n   𝐧𝐢𝐠𝐡𝐭 𝐦𝐨𝐝𝐞\n    <input type=\"checkbox\" id=\"darker\">\n</div>\n<div class=\"text\">\n    𝐭𝐫𝐚𝐜𝐞𝐫𝐬\n    <input type=\"checkbox\" id=\"tracersez\">\n</div>\n<div class=\"text\">\n   𝐬𝐜𝐫𝐢𝐩𝐭𝐬𝐭𝐚𝐭𝐮𝐬\n    <input type=\"checkbox\" id=\"scripterstatus\">\n</div>\n<div class=\"text\">\n    𝐛𝐞𝐚𝐮𝐭𝐲𝐭𝐞𝐱𝐭\n    <input type=\"checkbox\" id=\"profitext\">\n</div>\n\n<style>.operPappy{}#operPRO {\nposition: absolute;\nbackground-color: grey;\nheight: 170px;\ntop: 3px;\noverflow-y : scroll;\nleft: 3px;\n\n}</script>");
var Vb = document.querySelector("#doubleheal");
Vb.addEventListener("change", function () {
  if (this.checked) {
    Z = true;
  } else {
    Z = false;
  }
});
var Wb = document.querySelector("#profitext");
Wb.addEventListener("change", function () {
  if (this.checked) {
    db = true;
  } else {
    db = false;
  }
});
var Xb = document.querySelector("#tracersez");
Xb.addEventListener("change", function () {
  if (this.checked) {
    U = true;
  } else {
    U = false;
  }
});
var Yb = document.querySelector("#scripterstatus");
Yb.addEventListener("change", function () {
  if (this.checked) {
    V = true;
  } else {
    V = false;
  }
});
var Zb = document.querySelector("#predicterplacer");
Zb.addEventListener("change", function () {
  if (this.checked) {
    W = true;
  } else {
    W = false;
  }
});
var $b = document.querySelector("#darker");
$b.addEventListener("change", function () {
  if (this.checked) {
    Y = true;
  } else {
    Y = false;
  }
});
var _b = document.querySelector("#autoplacewa");
_b.addEventListener("change", function () {
  if (this.checked) {
    cb = true;
  } else {
    cb = false;
  }
});
var ad = document.querySelector("#shieldanti");
ad.addEventListener("change", function () {
  if (this.checked) {
    rb = true;
  } else {
    rb = false;
  }
});
var bd = document.querySelector("#autoreloadweapon");
bd.addEventListener("change", function () {
  if (this.checked) {
    fb = true;
  } else {
    fb = false;
  }
});
var cd = document.querySelector("#spikeanti");
cd.addEventListener("change", function () {
  if (this.checked) {
    kb = true;
  } else {
    kb = false;
  }
});
var dd = document.querySelector("#autoBreaker");
dd.addEventListener("change", function () {
  if (this.checked) {
    sb = true;
  } else {
    sb = false;
  }
});
var ed = document.querySelector("#smoothcamr");
ed.addEventListener("change", function () {
  if (this.checked) {
    Sb = true;
  } else {
    Sb = false;
  }
});
var fd = document.querySelector("#autohealler");
fd.addEventListener("change", function () {
  if (this.checked) {
    yb = true;
  } else {
    yb = false;
  }
});
var gd = document.querySelector("#autoHitter");
gd.addEventListener("change", function () {
  if (this.checked) {
    zb = true;
  } else {
    zb = false;
  }
});
var hd = false;
function id() {
  if (Jn && hd && qb == false && Ab == false && kk.primaryIndex == 4 && !yn && Eg.sendCount < 95) {
    if (Kn(Jn, kk) <= kk.WeaponRange * 1.68) {
      if (kk.animTime == 0) {
        qn(7);
        nd();
        Eg.send("K", 1);
        N = true;
      } else {
        nd();
        jd();
        Eg.send("K", 1);
        N = false;
      }
    }
  }
}
function jd() {
  if (Jn && Kn(Jn, kk) <= 205.32) {
    if (Jn.skinIndex == 7 && Jn.animTime == 0) {
      qn(11);
    } else {
      qn(6);
    }
  }
}
setInterval(() => {
  if (hd) {
    id();
  }
}, 100);
var kd = false;
var ld = false;
function md() {
  if (Nm[kk.sid] == 1 && Om[kk.sid] == 1) {
    Eg.send("D", rn(Jn));
    qb = false;
    w = true;
    N = true;
    qn(53);
    Eg.send("d", 1);
    mn(kk.weapons[1], true);
    setTimeout(() => {
      fm(18, 1);
      mn(kk.weapons[0], true);
      qn(7);
    }, 80);
    setTimeout(() => {
      Eg.send("d", 0);
      N = false;
      w = false;
      Cn();
      eb = true;
      nd();
    }, 220);
  }
}
function nd() {
  if (!jb) {
    mn(kk.weapons[0], true);
  }
}
function od() {
  mn(kk.weapons[1], true);
}
function pd() {
  if (Jn) {
    od();
    N = true;
    i = false;
    Eg.send("a", rn(Jn));
    Eg.send("D", rn(Jn));
    qn(53);
    setTimeout(() => {
      m = false;
      qn(7);
      nd();
      Eg.send("K", 1);
      fm(19, 1);
      Tb.push(b => fm(6, true));
    }, 90);
    setTimeout(() => {
      Eg.send("a", null);
      Eg.send("D", null);
      N = false;
      Cn();
      Eg.send("K", 1);
    }, 300);
  }
}
document.getElementById("storeHolder").style = "height: 500px; width: 500px;";
(function () {
  const d = document.createElement("link").relList;
  if (d && d.supports && d.supports("modulepreload")) {
    return;
  }
  for (const c of document.querySelectorAll("link[rel=\"modulepreload\"]")) {
    b(c);
  }
  new MutationObserver(c => {
    for (const d of c) {
      if (d.type === "childList") {
        for (const c of d.addedNodes) {
          if (c.tagName === "LINK" && c.rel === "modulepreload") {
            b(c);
          }
        }
      }
    }
  }).observe(document, {
    childList: true,
    subtree: true
  });
  function e(c) {
    const a = {};
    if (c.integrity) {
      a.integrity = c.integrity;
    }
    if (c.referrerpolicy) {
      a.referrerPolicy = c.referrerpolicy;
    }
    if (c.crossorigin === "use-credentials") {
      a.credentials = "include";
    } else if (c.crossorigin === "anonymous") {
      a.credentials = "omit";
    } else {
      a.credentials = "same-origin";
    }
    return a;
  }
  function b(b) {
    if (b.ep) {
      return;
    }
    b.ep = true;
    const a = e(b);
    fetch(b.href, a);
  }
})();
var qd = 4294967295;
function rd(f, a, b) {
  var c = b / 4294967296;
  var d = b;
  f.setUint32(a, c);
  f.setUint32(a + 4, d);
}
function sd(f, a, b) {
  var c = Math.floor(b / 4294967296);
  var d = b;
  f.setUint32(a, c);
  f.setUint32(a + 4, d);
}
function td(e, a) {
  var b = e.getInt32(a);
  var c = e.getUint32(a + 4);
  return b * 4294967296 + c;
}
function ud(e, a) {
  var b = e.getUint32(a);
  var c = e.getUint32(a + 4);
  return b * 4294967296 + c;
}
var vd = (typeof process === "undefined" || (process == null ? undefined : process.env)?.TEXT_ENCODING !== "never") && typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined";
function wd(g) {
  for (var a = g.length, b = 0, h = 0; h < a;) {
    var i = g.charCodeAt(h++);
    if (i & 4294967168) {
      if (!(i & 4294965248)) {
        b += 2;
      } else {
        if (i >= 55296 && i <= 56319 && h < a) {
          var j = g.charCodeAt(h);
          if ((j & 64512) === 56320) {
            ++h;
            i = ((i & 1023) << 10) + (j & 1023) + 65536;
          }
        }
        if (i & 4294901760) {
          b += 4;
        } else {
          b += 3;
        }
      }
    } else {
      b++;
      continue;
    }
  }
  return b;
}
function xd(i, a, b) {
  for (var c = i.length, d = b, j = 0; j < c;) {
    var k = i.charCodeAt(j++);
    if (k & 4294967168) {
      if (!(k & 4294965248)) {
        a[d++] = k >> 6 & 31 | 192;
      } else {
        if (k >= 55296 && k <= 56319 && j < c) {
          var l = i.charCodeAt(j);
          if ((l & 64512) === 56320) {
            ++j;
            k = ((k & 1023) << 10) + (l & 1023) + 65536;
          }
        }
        if (k & 4294901760) {
          a[d++] = k >> 18 & 7 | 240;
          a[d++] = k >> 12 & 63 | 128;
          a[d++] = k >> 6 & 63 | 128;
        } else {
          a[d++] = k >> 12 & 15 | 224;
          a[d++] = k >> 6 & 63 | 128;
        }
      }
    } else {
      a[d++] = k;
      continue;
    }
    a[d++] = k & 63 | 128;
  }
}
var yd = vd ? new TextEncoder() : undefined;
var zd = vd ? typeof process !== "undefined" && (process == null ? undefined : process.env)?.TEXT_ENCODING !== "force" ? 200 : 0 : qd;
function Ad(d, a, b) {
  a.set(yd.encode(d), b);
}
function Bd(d, a, b) {
  yd.encodeInto(d, a.subarray(b));
}
var Cd = yd != null && yd.encodeInto ? Bd : Ad;
var ea = 4096;
function ta(m, a, b) {
  for (var c = a, n = c + b, e = [], f = ""; c < n;) {
    var o = m[c++];
    if (!(o & 128)) {
      e.push(o);
    } else if ((o & 224) === 192) {
      var p = m[c++] & 63;
      e.push((o & 31) << 6 | p);
    } else if ((o & 240) === 224) {
      var p = m[c++] & 63;
      var q = m[c++] & 63;
      e.push((o & 31) << 12 | p << 6 | q);
    } else if ((o & 248) === 240) {
      var p = m[c++] & 63;
      var q = m[c++] & 63;
      var r = m[c++] & 63;
      var s = (o & 7) << 18 | p << 12 | q << 6 | r;
      if (s > 65535) {
        s -= 65536;
        e.push(s >>> 10 & 1023 | 55296);
        s = s & 1023 | 56320;
      }
      e.push(s);
    } else {
      e.push(o);
    }
    if (e.length >= ea) {
      f += String.fromCharCode.apply(String, e);
      e.length = 0;
    }
  }
  if (e.length > 0) {
    f += String.fromCharCode.apply(String, e);
  }
  return f;
}
var ia = vd ? new TextDecoder() : null;
var Dd = vd ? typeof process !== "undefined" && (process == null ? undefined : process.env)?.TEXT_DECODER !== "force" ? 200 : 0 : qd;
function na(e, a, b) {
  var c = e.subarray(a, a + b);
  return ia.decode(c);
}
var sa = function () {
  function b(c, a) {
    this.type = c;
    this.data = a;
  }
  return b;
}();
var ra = globalThis && globalThis.__extends || function () {
  function e(a, b) {
    e = Object.setPrototypeOf || {
      "__proto__": []
    } instanceof Array && function (c, a) {
      c.__proto__ = a;
    } || function (d, a) {
      for (var b in a) {
        if (Object.prototype.hasOwnProperty.call(a, b)) {
          d[b] = a[b];
        }
      }
    };
    return e(a, b);
  }
  return function (a, b) {
    if (typeof b != "function" && b !== null) {
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    }
    e(a, b);
    function c() {
      this.constructor = a;
    }
    a.prototype = b === null ? Object.create(b) : (c.prototype = b.prototype, new c());
  };
}();
var Ed = function (f) {
  ra(a, f);
  function a(b) {
    var c = f.call(this, b) || this;
    var d = Object.create(a.prototype);
    Object.setPrototypeOf(c, d);
    Object.defineProperty(c, "name", {
      configurable: true,
      enumerable: false,
      value: a.name
    });
    return c;
  }
  return a;
}(Error);
var oa = -1;
var Fd = 4294967295;
var aa = 17179869183;
function la(h) {
  var a = h.sec;
  var b = h.nsec;
  if (a >= 0 && b >= 0 && a <= aa) {
    if (b === 0 && a <= Fd) {
      var c = new Uint8Array(4);
      var i = new DataView(c.buffer);
      i.setUint32(0, a);
      return c;
    } else {
      var j = a / 4294967296;
      var f = a & 4294967295;
      var c = new Uint8Array(8);
      var i = new DataView(c.buffer);
      i.setUint32(0, b << 2 | j & 3);
      i.setUint32(4, f);
      return c;
    }
  } else {
    var c = new Uint8Array(12);
    var i = new DataView(c.buffer);
    i.setUint32(0, b);
    sd(i, 4, a);
    return c;
  }
}
function ca(f) {
  var a = f.getTime();
  var b = Math.floor(a / 1000);
  var c = (a - b * 1000) * 1000000;
  var d = Math.floor(c / 1000000000);
  return {
    sec: b + d,
    nsec: c - d * 1000000000
  };
}
function ha(c) {
  if (c instanceof Date) {
    var a = ca(c);
    return la(a);
  } else {
    return null;
  }
}
function fa(g) {
  var a = new DataView(g.buffer, g.byteOffset, g.byteLength);
  switch (g.byteLength) {
    case 4:
      {
        var b = a.getUint32(0);
        var h = 0;
        return {
          sec: b,
          nsec: h
        };
      }
    case 8:
      {
        var i = a.getUint32(0);
        var e = a.getUint32(4);
        var b = (i & 3) * 4294967296 + e;
        var h = i >>> 2;
        return {
          sec: b,
          nsec: h
        };
      }
    case 12:
      {
        var b = td(a, 4);
        var h = a.getUint32(0);
        return {
          sec: b,
          nsec: h
        };
      }
    default:
      throw new Ed(`Unrecognized data size for timestamp (expected 4, 8, or 12): ${g.length}`);
  }
}
function ua(c) {
  var a = fa(c);
  return new Date(a.sec * 1000 + a.nsec / 1000000);
}
var da = {
  type: oa,
  encode: ha,
  decode: ua
};
var pa = function () {
  function b() {
    this.builtInEncoders = [];
    this.builtInDecoders = [];
    this.encoders = [];
    this.decoders = [];
    this.register(da);
  }
  b.prototype.register = function (f) {
    var a = f.type;
    var b = f.encode;
    var c = f.decode;
    if (a >= 0) {
      this.encoders[a] = b;
      this.decoders[a] = c;
    } else {
      var d = 1 + a;
      this.builtInEncoders[d] = b;
      this.builtInDecoders[d] = c;
    }
  };
  b.prototype.tryToEncode = function (g, a) {
    for (var b = 0; b < this.builtInEncoders.length; b++) {
      var h = this.builtInEncoders[b];
      if (h != null) {
        var i = h(g, a);
        if (i != null) {
          var j = -1 - b;
          return new sa(j, i);
        }
      }
    }
    for (var b = 0; b < this.encoders.length; b++) {
      var h = this.encoders[b];
      if (h != null) {
        var i = h(g, a);
        if (i != null) {
          var j = b;
          return new sa(j, i);
        }
      }
    }
    if (g instanceof sa) {
      return g;
    } else {
      return null;
    }
  };
  b.prototype.decode = function (e, a, b) {
    var c = a < 0 ? this.builtInDecoders[-1 - a] : this.decoders[a];
    if (c) {
      return c(e, a, b);
    } else {
      return new sa(a, e);
    }
  };
  b.defaultCodec = new b();
  return b;
}();
function ma(b) {
  if (b instanceof Uint8Array) {
    return b;
  } else if (ArrayBuffer.isView(b)) {
    return new Uint8Array(b.buffer, b.byteOffset, b.byteLength);
  } else if (b instanceof ArrayBuffer) {
    return new Uint8Array(b);
  } else {
    return Uint8Array.from(b);
  }
}
function Gd(c) {
  if (c instanceof ArrayBuffer) {
    return new DataView(c);
  }
  var a = ma(c);
  return new DataView(a.buffer, a.byteOffset, a.byteLength);
}
var Hd = 100;
var ga = 2048;
var ya = function () {
  function b(i = undefined, j = undefined, k = undefined, l = undefined, m = false, e = false, f = false, g = false) {
    if (i === undefined) i = pa.defaultCodec;
    if (j === undefined) j = undefined;
    if (k === undefined) k = Hd;
    if (l === undefined) l = ga;
    this.extensionCodec = i;
    this.context = j;
    this.maxDepth = k;
    this.initialBufferSize = l;
    this.sortKeys = m;
    this.forceFloat32 = e;
    this.ignoreUndefined = f;
    this.forceIntegerToFloat = g;
    this.pos = 0;
    this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
    this.bytes = new Uint8Array(this.view.buffer);
  }
  b.prototype.reinitializeState = function () {
    this.pos = 0;
  };
  b.prototype.encodeSharedRef = function (b) {
    this.reinitializeState();
    this.doEncode(b, 1);
    return this.bytes.subarray(0, this.pos);
  };
  b.prototype.encode = function (b) {
    this.reinitializeState();
    this.doEncode(b, 1);
    return this.bytes.slice(0, this.pos);
  };
  b.prototype.doEncode = function (c, a) {
    if (a > this.maxDepth) {
      throw new Error(`Too deep objects in depth ${a}`);
    }
    if (c == null) {
      this.encodeNil();
    } else if (typeof c == "boolean") {
      this.encodeBoolean(c);
    } else if (typeof c == "number") {
      this.encodeNumber(c);
    } else if (typeof c == "string") {
      this.encodeString(c);
    } else {
      this.encodeObject(c, a);
    }
  };
  b.prototype.ensureBufferSizeToWrite = function (c) {
    var a = this.pos + c;
    if (this.view.byteLength < a) {
      this.resizeBuffer(a * 2);
    }
  };
  b.prototype.resizeBuffer = function (e) {
    var a = new ArrayBuffer(e);
    var b = new Uint8Array(a);
    var c = new DataView(a);
    b.set(this.bytes);
    this.view = c;
    this.bytes = b;
  };
  b.prototype.encodeNil = function () {
    this.writeU8(192);
  };
  b.prototype.encodeBoolean = function (b) {
    if (b === false) {
      this.writeU8(194);
    } else {
      this.writeU8(195);
    }
  };
  b.prototype.encodeNumber = function (b) {
    if (Number.isSafeInteger(b) && !this.forceIntegerToFloat) {
      if (b >= 0) {
        if (b < 128) {
          this.writeU8(b);
        } else if (b < 256) {
          this.writeU8(204);
          this.writeU8(b);
        } else if (b < 65536) {
          this.writeU8(205);
          this.writeU16(b);
        } else if (b < 4294967296) {
          this.writeU8(206);
          this.writeU32(b);
        } else {
          this.writeU8(207);
          this.writeU64(b);
        }
      } else if (b >= -32) {
        this.writeU8(b + 32 | 224);
      } else if (b >= -128) {
        this.writeU8(208);
        this.writeI8(b);
      } else if (b >= -32768) {
        this.writeU8(209);
        this.writeI16(b);
      } else if (b >= -2147483648) {
        this.writeU8(210);
        this.writeI32(b);
      } else {
        this.writeU8(211);
        this.writeI64(b);
      }
    } else if (this.forceFloat32) {
      this.writeU8(202);
      this.writeF32(b);
    } else {
      this.writeU8(203);
      this.writeF64(b);
    }
  };
  b.prototype.writeStringHeader = function (b) {
    if (b < 32) {
      this.writeU8(160 + b);
    } else if (b < 256) {
      this.writeU8(217);
      this.writeU8(b);
    } else if (b < 65536) {
      this.writeU8(218);
      this.writeU16(b);
    } else if (b < 4294967296) {
      this.writeU8(219);
      this.writeU32(b);
    } else {
      throw new Error(`Too long string: ${b} bytes in UTF-8`);
    }
  };
  b.prototype.encodeString = function (e) {
    var a = 5;
    var b = e.length;
    if (b > zd) {
      var c = wd(e);
      this.ensureBufferSizeToWrite(a + c);
      this.writeStringHeader(c);
      Cd(e, this.bytes, this.pos);
      this.pos += c;
    } else {
      var c = wd(e);
      this.ensureBufferSizeToWrite(a + c);
      this.writeStringHeader(c);
      xd(e, this.bytes, this.pos);
      this.pos += c;
    }
  };
  b.prototype.encodeObject = function (d, a) {
    var b = this.extensionCodec.tryToEncode(d, this.context);
    if (b != null) {
      this.encodeExtension(b);
    } else if (Array.isArray(d)) {
      this.encodeArray(d, a);
    } else if (ArrayBuffer.isView(d)) {
      this.encodeBinary(d);
    } else if (typeof d == "object") {
      this.encodeMap(d, a);
    } else {
      throw new Error(`Unrecognized object: ${Object.prototype.toString.apply(d)}`);
    }
  };
  b.prototype.encodeBinary = function (d) {
    var a = d.byteLength;
    if (a < 256) {
      this.writeU8(196);
      this.writeU8(a);
    } else if (a < 65536) {
      this.writeU8(197);
      this.writeU16(a);
    } else if (a < 4294967296) {
      this.writeU8(198);
      this.writeU32(a);
    } else {
      throw new Error(`Too large binary: ${a}`);
    }
    var b = ma(d);
    this.writeU8a(b);
  };
  b.prototype.encodeArray = function (g, a) {
    var b = g.length;
    if (b < 16) {
      this.writeU8(144 + b);
    } else if (b < 65536) {
      this.writeU8(220);
      this.writeU16(b);
    } else if (b < 4294967296) {
      this.writeU8(221);
      this.writeU32(b);
    } else {
      throw new Error(`Too large array: ${b}`);
    }
    for (var c = 0, h = g; c < h.length; c++) {
      var e = h[c];
      this.doEncode(e, a + 1);
    }
  };
  b.prototype.countWithoutUndefined = function (g, a) {
    var b = 0;
    for (var h = 0, i = a; h < i.length; h++) {
      var e = i[h];
      if (g[e] !== undefined) {
        b++;
      }
    }
    return b;
  };
  b.prototype.encodeMap = function (i, a) {
    var b = Object.keys(i);
    if (this.sortKeys) {
      b.sort();
    }
    var c = this.ignoreUndefined ? this.countWithoutUndefined(i, b) : b.length;
    if (c < 16) {
      this.writeU8(128 + c);
    } else if (c < 65536) {
      this.writeU8(222);
      this.writeU16(c);
    } else if (c < 4294967296) {
      this.writeU8(223);
      this.writeU32(c);
    } else {
      throw new Error(`Too large map object: ${c}`);
    }
    for (var d = 0, j = b; d < j.length; d++) {
      var f = j[d];
      var k = i[f];
      if (!this.ignoreUndefined || k !== undefined) {
        this.encodeString(f);
        this.doEncode(k, a + 1);
      }
    }
  };
  b.prototype.encodeExtension = function (c) {
    var a = c.data.length;
    if (a === 1) {
      this.writeU8(212);
    } else if (a === 2) {
      this.writeU8(213);
    } else if (a === 4) {
      this.writeU8(214);
    } else if (a === 8) {
      this.writeU8(215);
    } else if (a === 16) {
      this.writeU8(216);
    } else if (a < 256) {
      this.writeU8(199);
      this.writeU8(a);
    } else if (a < 65536) {
      this.writeU8(200);
      this.writeU16(a);
    } else if (a < 4294967296) {
      this.writeU8(201);
      this.writeU32(a);
    } else {
      throw new Error(`Too large extension object: ${a}`);
    }
    this.writeI8(c.type);
    this.writeU8a(c.data);
  };
  b.prototype.writeU8 = function (b) {
    this.ensureBufferSizeToWrite(1);
    this.view.setUint8(this.pos, b);
    this.pos++;
  };
  b.prototype.writeU8a = function (c) {
    var a = c.length;
    this.ensureBufferSizeToWrite(a);
    this.bytes.set(c, this.pos);
    this.pos += a;
  };
  b.prototype.writeI8 = function (b) {
    this.ensureBufferSizeToWrite(1);
    this.view.setInt8(this.pos, b);
    this.pos++;
  };
  b.prototype.writeU16 = function (b) {
    this.ensureBufferSizeToWrite(2);
    this.view.setUint16(this.pos, b);
    this.pos += 2;
  };
  b.prototype.writeI16 = function (b) {
    this.ensureBufferSizeToWrite(2);
    this.view.setInt16(this.pos, b);
    this.pos += 2;
  };
  b.prototype.writeU32 = function (b) {
    this.ensureBufferSizeToWrite(4);
    this.view.setUint32(this.pos, b);
    this.pos += 4;
  };
  b.prototype.writeI32 = function (b) {
    this.ensureBufferSizeToWrite(4);
    this.view.setInt32(this.pos, b);
    this.pos += 4;
  };
  b.prototype.writeF32 = function (b) {
    this.ensureBufferSizeToWrite(4);
    this.view.setFloat32(this.pos, b);
    this.pos += 4;
  };
  b.prototype.writeF64 = function (b) {
    this.ensureBufferSizeToWrite(8);
    this.view.setFloat64(this.pos, b);
    this.pos += 8;
  };
  b.prototype.writeU64 = function (b) {
    this.ensureBufferSizeToWrite(8);
    rd(this.view, this.pos, b);
    this.pos += 8;
  };
  b.prototype.writeI64 = function (b) {
    this.ensureBufferSizeToWrite(8);
    sd(this.view, this.pos, b);
    this.pos += 8;
  };
  return b;
}();
function wa(b) {
  return `${b < 0 ? "-" : ""}0x${Math.abs(b).toString(16).padStart(2, "0")}`;
}
var ka = 16;
var Id = 16;
var va = function () {
  function b(d = undefined, e = undefined) {
    if (d === undefined) d = ka;
    if (e === undefined) e = Id;
    this.maxKeyLength = d;
    this.maxLengthPerKey = e;
    this.hit = 0;
    this.miss = 0;
    this.caches = [];
    for (var f = 0; f < this.maxKeyLength; f++) {
      this.caches.push([]);
    }
  }
  b.prototype.canBeCached = function (b) {
    return b > 0 && b <= this.maxKeyLength;
  };
  b.prototype.find = function (j, a, b) {
    var c = this.caches[b - 1];
    _0xeb7391: for (var d = 0, k = c; d < k.length; d++) {
      var f = k[d];
      var l = f.bytes;
      for (var m = 0; m < b; m++) {
        if (l[m] !== j[a + m]) {
          continue _0xeb7391;
        }
      }
      return f.str;
    }
    return null;
  };
  b.prototype.store = function (e, a) {
    var b = this.caches[e.length - 1];
    var c = {
      bytes: e,
      str: a
    };
    if (b.length >= this.maxLengthPerKey) {
      b[Math.random() * b.length | 0] = c;
    } else {
      b.push(c);
    }
  };
  b.prototype.decode = function (g, a, b) {
    var c = this.find(g, a, b);
    if (c != null) {
      this.hit++;
      return c;
    }
    this.miss++;
    var d = ta(g, a, b);
    var e = Uint8Array.prototype.slice.call(g, a, a + b);
    this.store(e, d);
    return d;
  };
  return b;
}();
var xa = globalThis && globalThis.__awaiter || function (j, a, b, k) {
  function f(c) {
    if (c instanceof b) {
      return c;
    } else {
      return new b(function (a) {
        a(c);
      });
    }
  }
  return new (b ||= Promise)(function (b, c) {
    function d(b) {
      try {
        g(k.next(b));
      } catch (b) {
        c(b);
      }
    }
    function e(b) {
      try {
        g(k.throw(b));
      } catch (b) {
        c(b);
      }
    }
    function g(c) {
      if (c.done) {
        b(c.value);
      } else {
        f(c.value).then(d, e);
      }
    }
    g((k = k.apply(j, a || [])).next());
  });
};
var ba = globalThis && globalThis.__generator || function (j, a) {
  var b = {
    label: 0,
    sent: function () {
      if (m[0] & 1) {
        throw m[1];
      }
      return m[1];
    },
    trys: [],
    ops: []
  };
  var k;
  var l;
  var m;
  var n;
  n = {
    next: o(0),
    throw: o(1),
    return: o(2)
  };
  if (typeof Symbol == "function") {
    n[Symbol.iterator] = function () {
      return this;
    };
  }
  return n;
  function o(c) {
    return function (a) {
      return h([c, a]);
    };
  }
  function h(c) {
    if (k) {
      throw new TypeError("Generator is already executing.");
    }
    while (b) {
      try {
        k = 1;
        if (l && (m = c[0] & 2 ? l.return : c[0] ? l.throw || ((m = l.return) && m.call(l), 0) : l.next) && !(m = m.call(l, c[1])).done) {
          return m;
        }
        l = 0;
        if (m) {
          c = [c[0] & 2, m.value];
        }
        switch (c[0]) {
          case 0:
          case 1:
            m = c;
            break;
          case 4:
            b.label++;
            return {
              value: c[1],
              done: false
            };
          case 5:
            b.label++;
            l = c[1];
            c = [0];
            continue;
          case 7:
            c = b.ops.pop();
            b.trys.pop();
            continue;
          default:
            m = b.trys;
            if (!(m = m.length > 0 && m[m.length - 1]) && (c[0] === 6 || c[0] === 2)) {
              b = 0;
              continue;
            }
            if (c[0] === 3 && (!m || c[1] > m[0] && c[1] < m[3])) {
              b.label = c[1];
              break;
            }
            if (c[0] === 6 && b.label < m[1]) {
              b.label = m[1];
              m = c;
              break;
            }
            if (m && b.label < m[2]) {
              b.label = m[2];
              b.ops.push(c);
              break;
            }
            if (m[2]) {
              b.ops.pop();
            }
            b.trys.pop();
            continue;
        }
        c = a.call(j, b);
      } catch (b) {
        c = [6, b];
        l = 0;
      } finally {
        k = m = 0;
      }
    }
    if (c[0] & 5) {
      throw c[1];
    }
    return {
      value: c[0] ? c[1] : undefined,
      done: true
    };
  }
};
var Sa = globalThis && globalThis.__asyncValues || function (g) {
  if (!Symbol.asyncIterator) {
    throw new TypeError("Symbol.asyncIterator is not defined.");
  }
  var f = g[Symbol.asyncIterator];
  var h;
  if (f) {
    return f.call(g);
  } else {
    g = typeof __values == "function" ? __values(g) : g[Symbol.iterator]();
    h = {};
    b("next");
    b("throw");
    b("return");
    h[Symbol.asyncIterator] = function () {
      return this;
    };
    return h;
  }
  function b(a) {
    h[a] = g[a] && function (b) {
      return new Promise(function (c, d) {
        b = g[a](b);
        i(c, d, b.done, b.value);
      });
    };
  }
  function i(e, a, f, b) {
    Promise.resolve(b).then(function (a) {
      e({
        value: a,
        done: f
      });
    }, a);
  }
};
var Jd = globalThis && globalThis.__await || function (b) {
  if (this instanceof Jd) {
    this.v = b;
    return this;
  } else {
    return new Jd(b);
  }
};
var Kd = globalThis && globalThis.__asyncGenerator || function (m, a, b) {
  if (!Symbol.asyncIterator) {
    throw new TypeError("Symbol.asyncIterator is not defined.");
  }
  var c = b.apply(m, a || []);
  var d;
  var n = [];
  d = {};
  f("next");
  f("throw");
  f("return");
  d[Symbol.asyncIterator] = function () {
    return this;
  };
  return d;
  function f(e) {
    if (c[e]) {
      d[e] = function (a) {
        return new Promise(function (b, c) {
          if (n.push([e, a, b, c]) <= 1) {
            g(e, a);
          }
        });
      };
    }
  }
  function g(d, a) {
    try {
      h(c[d](a));
    } catch (b) {
      k(n[0][3], b);
    }
  }
  function h(b) {
    if (b.value instanceof Jd) {
      Promise.resolve(b.value.v).then(i, j);
    } else {
      k(n[0][2], b);
    }
  }
  function i(b) {
    g("next", b);
  }
  function j(b) {
    g("throw", b);
  }
  function k(c, a) {
    c(a);
    n.shift();
    if (n.length) {
      g(n[0][0], n[0][1]);
    }
  }
};
function Ld(c) {
  var a = typeof c;
  return a === "string" || a === "number";
}
var Ta = -1;
var Ia = new DataView(new ArrayBuffer(0));
var Md = new Uint8Array(Ia.buffer);
var Nd = function () {
  try {
    Ia.getInt8(0);
  } catch (b) {
    return b.constructor;
  }
  throw new Error("never reached");
}();
var Ma = new Nd("Insufficient data");
var Od = new va();
var Pd = function () {
  function b(i = undefined, j = undefined, k = undefined, l = undefined, m = undefined, n = undefined, o = undefined, p = undefined) {
    if (i === undefined) i = pa.defaultCodec;
    if (j === undefined) j = undefined;
    if (k === undefined) k = qd;
    if (l === undefined) l = qd;
    if (m === undefined) m = qd;
    if (n === undefined) n = qd;
    if (o === undefined) o = qd;
    if (p === undefined) p = Od;
    this.extensionCodec = i;
    this.context = j;
    this.maxStrLength = k;
    this.maxBinLength = l;
    this.maxArrayLength = m;
    this.maxMapLength = n;
    this.maxExtLength = o;
    this.keyDecoder = p;
    this.totalPos = 0;
    this.pos = 0;
    this.view = Ia;
    this.bytes = Md;
    this.headByte = Ta;
    this.stack = [];
  }
  b.prototype.reinitializeState = function () {
    this.totalPos = 0;
    this.headByte = Ta;
    this.stack.length = 0;
  };
  b.prototype.setBuffer = function (b) {
    this.bytes = ma(b);
    this.view = Gd(this.bytes);
    this.pos = 0;
  };
  b.prototype.appendBuffer = function (e) {
    if (this.headByte === Ta && !this.hasRemaining(1)) {
      this.setBuffer(e);
    } else {
      var a = this.bytes.subarray(this.pos);
      var b = ma(e);
      var c = new Uint8Array(a.length + b.length);
      c.set(a);
      c.set(b, a.length);
      this.setBuffer(c);
    }
  };
  b.prototype.hasRemaining = function (b) {
    return this.view.byteLength - this.pos >= b;
  };
  b.prototype.createExtraByteError = function (e) {
    var a = this;
    var b = a.view;
    var c = a.pos;
    return new RangeError(`Extra ${b.byteLength - c} of ${b.byteLength} byte(s) found at buffer[${e}]`);
  };
  b.prototype.decode = function (c) {
    this.reinitializeState();
    this.setBuffer(c);
    var a = this.doDecodeSync();
    if (this.hasRemaining(1)) {
      throw this.createExtraByteError(this.pos);
    }
    return a;
  };
  b.prototype.decodeMulti = function (c) {
    return ba(this, function (a) {
      switch (a.label) {
        case 0:
          this.reinitializeState();
          this.setBuffer(c);
          a.label = 1;
        case 1:
          if (this.hasRemaining(1)) {
            return [4, this.doDecodeSync()];
          } else {
            return [3, 3];
          }
        case 2:
          a.sent();
          return [3, 1];
        case 3:
          return [2];
      }
    });
  };
  b.prototype.decodeAsync = function (o) {
    var a;
    var p;
    var q;
    var r;
    return xa(this, undefined, undefined, function () {
      var b;
      var c;
      var d;
      var e;
      var s;
      var t;
      var u;
      var v;
      return ba(this, function (f) {
        switch (f.label) {
          case 0:
            b = false;
            f.label = 1;
          case 1:
            f.trys.push([1, 6, 7, 12]);
            a = Sa(o);
            f.label = 2;
          case 2:
            return [4, a.next()];
          case 3:
            p = f.sent();
            if (!!p.done) {
              return [3, 5];
            }
            d = p.value;
            if (b) {
              throw this.createExtraByteError(this.totalPos);
            }
            this.appendBuffer(d);
            try {
              c = this.doDecodeSync();
              b = true;
            } catch (b) {
              if (!(b instanceof Nd)) {
                throw b;
              }
            }
            this.totalPos += this.pos;
            f.label = 4;
          case 4:
            return [3, 2];
          case 5:
            return [3, 12];
          case 6:
            e = f.sent();
            q = {
              error: e
            };
            return [3, 12];
          case 7:
            f.trys.push([7,, 10, 11]);
            if (p && !p.done && (r = a.return)) {
              return [4, r.call(a)];
            } else {
              return [3, 9];
            }
          case 8:
            f.sent();
            f.label = 9;
          case 9:
            return [3, 11];
          case 10:
            if (q) {
              throw q.error;
            }
            return [7];
          case 11:
            return [7];
          case 12:
            if (b) {
              if (this.hasRemaining(1)) {
                throw this.createExtraByteError(this.totalPos);
              }
              return [2, c];
            }
            s = this;
            t = s.headByte;
            u = s.pos;
            v = s.totalPos;
            throw new RangeError(`Insufficient data in parsing ${wa(t)} at ${v} (${u} in the current buffer)`);
        }
      });
    });
  };
  b.prototype.decodeArrayStream = function (b) {
    return this.decodeMultiAsync(b, true);
  };
  b.prototype.decodeStream = function (b) {
    return this.decodeMultiAsync(b, false);
  };
  b.prototype.decodeMultiAsync = function (m, a) {
    return Kd(this, arguments, function () {
      var b;
      var n;
      var o;
      var p;
      var q;
      var r;
      var s;
      var t;
      var u;
      return ba(this, function (c) {
        switch (c.label) {
          case 0:
            b = a;
            n = -1;
            c.label = 1;
          case 1:
            c.trys.push([1, 13, 14, 19]);
            o = Sa(m);
            c.label = 2;
          case 2:
            return [4, Jd(o.next())];
          case 3:
            p = c.sent();
            if (!!p.done) {
              return [3, 12];
            }
            q = p.value;
            if (a && n === 0) {
              throw this.createExtraByteError(this.totalPos);
            }
            this.appendBuffer(q);
            if (b) {
              n = this.readArraySize();
              b = false;
              this.complete();
            }
            c.label = 4;
          case 4:
            c.trys.push([4, 9,, 10]);
            c.label = 5;
          case 5:
            return [4, Jd(this.doDecodeSync())];
          case 6:
            return [4, c.sent()];
          case 7:
            c.sent();
            if (--n === 0) {
              return [3, 8];
            } else {
              return [3, 5];
            }
          case 8:
            return [3, 10];
          case 9:
            r = c.sent();
            if (!(r instanceof Nd)) {
              throw r;
            }
            return [3, 10];
          case 10:
            this.totalPos += this.pos;
            c.label = 11;
          case 11:
            return [3, 2];
          case 12:
            return [3, 19];
          case 13:
            s = c.sent();
            t = {
              error: s
            };
            return [3, 19];
          case 14:
            c.trys.push([14,, 17, 18]);
            if (p && !p.done && (u = o.return)) {
              return [4, Jd(u.call(o))];
            } else {
              return [3, 16];
            }
          case 15:
            c.sent();
            c.label = 16;
          case 16:
            return [3, 18];
          case 17:
            if (t) {
              throw t.error;
            }
            return [7];
          case 18:
            return [7];
          case 19:
            return [2];
        }
      });
    });
  };
  b.prototype.doDecodeSync = function () {
    _0x4dce5a: while (true) {
      var g = this.readHeadByte();
      var h = undefined;
      if (g >= 224) {
        h = g - 256;
      } else if (g < 192) {
        if (g < 128) {
          h = g;
        } else if (g < 144) {
          var i = g - 128;
          if (i !== 0) {
            this.pushMapState(i);
            this.complete();
            continue _0x4dce5a;
          } else {
            h = {};
          }
        } else if (g < 160) {
          var i = g - 144;
          if (i !== 0) {
            this.pushArrayState(i);
            this.complete();
            continue _0x4dce5a;
          } else {
            h = [];
          }
        } else {
          var j = g - 160;
          h = this.decodeUtf8String(j, 0);
        }
      } else if (g === 192) {
        h = null;
      } else if (g === 194) {
        h = false;
      } else if (g === 195) {
        h = true;
      } else if (g === 202) {
        h = this.readF32();
      } else if (g === 203) {
        h = this.readF64();
      } else if (g === 204) {
        h = this.readU8();
      } else if (g === 205) {
        h = this.readU16();
      } else if (g === 206) {
        h = this.readU32();
      } else if (g === 207) {
        h = this.readU64();
      } else if (g === 208) {
        h = this.readI8();
      } else if (g === 209) {
        h = this.readI16();
      } else if (g === 210) {
        h = this.readI32();
      } else if (g === 211) {
        h = this.readI64();
      } else if (g === 217) {
        var j = this.lookU8();
        h = this.decodeUtf8String(j, 1);
      } else if (g === 218) {
        var j = this.lookU16();
        h = this.decodeUtf8String(j, 2);
      } else if (g === 219) {
        var j = this.lookU32();
        h = this.decodeUtf8String(j, 4);
      } else if (g === 220) {
        var i = this.readU16();
        if (i !== 0) {
          this.pushArrayState(i);
          this.complete();
          continue _0x4dce5a;
        } else {
          h = [];
        }
      } else if (g === 221) {
        var i = this.readU32();
        if (i !== 0) {
          this.pushArrayState(i);
          this.complete();
          continue _0x4dce5a;
        } else {
          h = [];
        }
      } else if (g === 222) {
        var i = this.readU16();
        if (i !== 0) {
          this.pushMapState(i);
          this.complete();
          continue _0x4dce5a;
        } else {
          h = {};
        }
      } else if (g === 223) {
        var i = this.readU32();
        if (i !== 0) {
          this.pushMapState(i);
          this.complete();
          continue _0x4dce5a;
        } else {
          h = {};
        }
      } else if (g === 196) {
        var i = this.lookU8();
        h = this.decodeBinary(i, 1);
      } else if (g === 197) {
        var i = this.lookU16();
        h = this.decodeBinary(i, 2);
      } else if (g === 198) {
        var i = this.lookU32();
        h = this.decodeBinary(i, 4);
      } else if (g === 212) {
        h = this.decodeExtension(1, 0);
      } else if (g === 213) {
        h = this.decodeExtension(2, 0);
      } else if (g === 214) {
        h = this.decodeExtension(4, 0);
      } else if (g === 215) {
        h = this.decodeExtension(8, 0);
      } else if (g === 216) {
        h = this.decodeExtension(16, 0);
      } else if (g === 199) {
        var i = this.lookU8();
        h = this.decodeExtension(i, 1);
      } else if (g === 200) {
        var i = this.lookU16();
        h = this.decodeExtension(i, 2);
      } else if (g === 201) {
        var i = this.lookU32();
        h = this.decodeExtension(i, 4);
      } else {
        throw new Ed(`Unrecognized type byte: ${wa(g)}`);
      }
      this.complete();
      for (var k = this.stack; k.length > 0;) {
        var l = k[k.length - 1];
        if (l.type === 0) {
          l.array[l.position] = h;
          l.position++;
          if (l.position === l.size) {
            k.pop();
            h = l.array;
          } else {
            continue _0x4dce5a;
          }
        } else if (l.type === 1) {
          if (!Ld(h)) {
            throw new Ed("The type of key must be string or number but " + typeof h);
          }
          if (h === "__proto__") {
            throw new Ed("The key __proto__ is not allowed");
          }
          l.key = h;
          l.type = 2;
          continue _0x4dce5a;
        } else {
          l.map[l.key] = h;
          l.readCount++;
          if (l.readCount === l.size) {
            k.pop();
            h = l.map;
          } else {
            l.key = null;
            l.type = 1;
            continue _0x4dce5a;
          }
        }
      }
      return h;
    }
  };
  b.prototype.readHeadByte = function () {
    if (this.headByte === Ta) {
      this.headByte = this.readU8();
    }
    return this.headByte;
  };
  b.prototype.complete = function () {
    this.headByte = Ta;
  };
  b.prototype.readArraySize = function () {
    var b = this.readHeadByte();
    switch (b) {
      case 220:
        return this.readU16();
      case 221:
        return this.readU32();
      default:
        {
          if (b < 160) {
            return b - 144;
          }
          throw new Ed(`Unrecognized array type byte: ${wa(b)}`);
        }
    }
  };
  b.prototype.pushMapState = function (b) {
    if (b > this.maxMapLength) {
      throw new Ed(`Max length exceeded: map length (${b}) > maxMapLengthLength (${this.maxMapLength})`);
    }
    this.stack.push({
      type: 1,
      size: b,
      key: null,
      readCount: 0,
      map: {}
    });
  };
  b.prototype.pushArrayState = function (b) {
    if (b > this.maxArrayLength) {
      throw new Ed(`Max length exceeded: array length (${b}) > maxArrayLength (${this.maxArrayLength})`);
    }
    this.stack.push({
      type: 0,
      size: b,
      array: new Array(b),
      position: 0
    });
  };
  b.prototype.decodeUtf8String = function (f, a) {
    var b;
    if (f > this.maxStrLength) {
      throw new Ed(`Max length exceeded: UTF-8 byte length (${f}) > maxStrLength (${this.maxStrLength})`);
    }
    if (this.bytes.byteLength < this.pos + a + f) {
      throw Ma;
    }
    var g = this.pos + a;
    var d;
    if (this.stateIsMapKey() && (b = this.keyDecoder) !== null && b !== undefined && b.canBeCached(f)) {
      d = this.keyDecoder.decode(this.bytes, g, f);
    } else if (f > Dd) {
      d = na(this.bytes, g, f);
    } else {
      d = ta(this.bytes, g, f);
    }
    this.pos += a + f;
    return d;
  };
  b.prototype.stateIsMapKey = function () {
    if (this.stack.length > 0) {
      var b = this.stack[this.stack.length - 1];
      return b.type === 1;
    }
    return false;
  };
  b.prototype.decodeBinary = function (e, a) {
    if (e > this.maxBinLength) {
      throw new Ed(`Max length exceeded: bin length (${e}) > maxBinLength (${this.maxBinLength})`);
    }
    if (!this.hasRemaining(e + a)) {
      throw Ma;
    }
    var b = this.pos + a;
    var c = this.bytes.subarray(b, b + e);
    this.pos += a + e;
    return c;
  };
  b.prototype.decodeExtension = function (e, a) {
    if (e > this.maxExtLength) {
      throw new Ed(`Max length exceeded: ext length (${e}) > maxExtLength (${this.maxExtLength})`);
    }
    var b = this.view.getInt8(this.pos + a);
    var c = this.decodeBinary(e, a + 1);
    return this.extensionCodec.decode(c, b, this.context);
  };
  b.prototype.lookU8 = function () {
    return this.view.getUint8(this.pos);
  };
  b.prototype.lookU16 = function () {
    return this.view.getUint16(this.pos);
  };
  b.prototype.lookU32 = function () {
    return this.view.getUint32(this.pos);
  };
  b.prototype.readU8 = function () {
    var b = this.view.getUint8(this.pos);
    this.pos++;
    return b;
  };
  b.prototype.readI8 = function () {
    var b = this.view.getInt8(this.pos);
    this.pos++;
    return b;
  };
  b.prototype.readU16 = function () {
    var b = this.view.getUint16(this.pos);
    this.pos += 2;
    return b;
  };
  b.prototype.readI16 = function () {
    var b = this.view.getInt16(this.pos);
    this.pos += 2;
    return b;
  };
  b.prototype.readU32 = function () {
    var b = this.view.getUint32(this.pos);
    this.pos += 4;
    return b;
  };
  b.prototype.readI32 = function () {
    var b = this.view.getInt32(this.pos);
    this.pos += 4;
    return b;
  };
  b.prototype.readU64 = function () {
    var b = ud(this.view, this.pos);
    this.pos += 8;
    return b;
  };
  b.prototype.readI64 = function () {
    var b = td(this.view, this.pos);
    this.pos += 8;
    return b;
  };
  b.prototype.readF32 = function () {
    var b = this.view.getFloat32(this.pos);
    this.pos += 4;
    return b;
  };
  b.prototype.readF64 = function () {
    var b = this.view.getFloat64(this.pos);
    this.pos += 8;
    return b;
  };
  return b;
}();
var Ea = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var Pa = {};
var Qd = {
  get exports() {
    return Pa;
  },
  set exports(b) {
    Pa = b;
  }
};
var Rd = Qd.exports = {};
var Ca;
var Sd;
function Td() {
  throw new Error("setTimeout has not been defined");
}
function Ud() {
  throw new Error("clearTimeout has not been defined");
}
(function () {
  try {
    if (typeof setTimeout == "function") {
      Ca = setTimeout;
    } else {
      Ca = Td;
    }
  } catch {
    Ca = Td;
  }
  try {
    if (typeof clearTimeout == "function") {
      Sd = clearTimeout;
    } else {
      Sd = Ud;
    }
  } catch {
    Sd = Ud;
  }
})();
function Vd(b) {
  if (Ca === setTimeout) {
    return setTimeout(b, 0);
  }
  if ((Ca === Td || !Ca) && setTimeout) {
    Ca = setTimeout;
    return setTimeout(b, 0);
  }
  try {
    return Ca(b, 0);
  } catch {
    try {
      return Ca.call(null, b, 0);
    } catch {
      return Ca.call(this, b, 0);
    }
  }
}
function Wd(b) {
  if (Sd === clearTimeout) {
    return clearTimeout(b);
  }
  if ((Sd === Ud || !Sd) && clearTimeout) {
    Sd = clearTimeout;
    return clearTimeout(b);
  }
  try {
    return Sd(b);
  } catch {
    try {
      return Sd.call(null, b);
    } catch {
      return Sd.call(this, b);
    }
  }
}
var Xd = [];
var Aa = false;
var Yd;
var Zd = -1;
function $d() {
  if (!!Aa && !!Yd) {
    Aa = false;
    if (Yd.length) {
      Xd = Yd.concat(Xd);
    } else {
      Zd = -1;
    }
    if (Xd.length) {
      _d();
    }
  }
}
function _d() {
  if (!Aa) {
    var c = Vd($d);
    Aa = true;
    for (var a = Xd.length; a;) {
      Yd = Xd;
      Xd = [];
      while (++Zd < a) {
        if (Yd) {
          Yd[Zd].run();
        }
      }
      Zd = -1;
      a = Xd.length;
    }
    Yd = null;
    Aa = false;
    Wd(c);
  }
}
Rd.nextTick = function (d) {
  var a = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var b = 1; b < arguments.length; b++) {
      a[b - 1] = arguments[b];
    }
  }
  Xd.push(new Da(d, a));
  if (Xd.length === 1 && !Aa) {
    Vd(_d);
  }
};
function Da(c, a) {
  this.fun = c;
  this.array = a;
}
Da.prototype.run = function () {
  this.fun.apply(null, this.array);
};
Rd.title = "browser";
Rd.browser = true;
Rd.env = {};
Rd.argv = [];
Rd.version = "";
Rd.versions = {};
function fe() {}
Rd.on = fe;
Rd.addListener = fe;
Rd.once = fe;
Rd.off = fe;
Rd.removeListener = fe;
Rd.removeAllListeners = fe;
Rd.emit = fe;
Rd.prependListener = fe;
Rd.prependOnceListener = fe;
Rd.listeners = function (b) {
  return [];
};
Rd.binding = function (b) {
  throw new Error("process.binding is not supported");
};
Rd.cwd = function () {
  return "/";
};
Rd.chdir = function (b) {
  throw new Error("process.chdir is not supported");
};
Rd.umask = function () {
  return 0;
};
let ge = 1440;
let ie = 10000080;
const Oa = 9;
const Ra = Pa && Pa.argv.indexOf("--largeserver") != -1 ? Infinity : Infinity;
const _a = Ra + 10;
const ke = 6;
const Ba = 3000;
const za = 10;
const Ha = 5;
const Fa = 50;
const Va = 4.5;
const Ua = 15;
const La = 0.9;
const Na = 1;
const qa = 60;
const Wa = 35;
const Xa = 3000;
const Ga = 500;
const Ya = Pa && {}.IS_SANDBOX;
const $a = 100;
const Ka = Math.PI / 2.6;
const Ja = 10;
const Qa = 0.25;
const Za = Math.PI / 2;
const ja = 35;
const le = 0.0016;
const ne = 0.993;
const oe = 25;
const te = ["#79553D", "transperent", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373"];
const ve = 7;
const xe = 0.06;
const ze = [];
const Ae = Math.PI / 3;
const Ce = [{
  id: 0,
  src: "",
  xp: 0,
  val: 1
}, {
  id: 1,
  src: "_g",
  xp: 3000,
  val: 1.1
}, {
  id: 2,
  src: "_d",
  xp: 7000,
  val: 1.18
}, {
  id: 3,
  src: "_r",
  poison: true,
  xp: 12000,
  val: 1.18
}];
const Fe = function (c) {
  const a = c.weaponXP[c.weaponIndex] || 0;
  for (let b = Ce.length - 1; b >= 0; --b) {
    if (a >= Ce[b].xp) {
      return Ce[b];
    }
  }
};
const Ke = ["wood", "food", "stone", "points"];
const Pe = 7;
const Qe = 9;
const Ue = 3;
const Ye = 32;
const lf = 7;
const ag = 724;
const bg = 114;
const cg = 0.0011;
const dg = 0.0001;
const eg = 1.3;
const fg = [150, 160, 165, 175];
const gg = [80, 85, 95];
const hg = [80, 85, 90];
const ig = 2400;
const jg = 0.75;
const kg = 15;
const lg = 14400;
const mg = 40;
const ng = 2200;
const og = 0.6;
const pg = 10;
const qg = 0.3;
const rg = 0.3;
const sg = 1440000;
const tg = 320;
const ug = 100;
const vg = 2;
const wg = 3200;
const xg = 1440;
const yg = 0.2;
const zg = -1;
const Ag = lg - tg - 120;
const Bg = lg - tg - 120;
const Cg = {
  maxScreenWidth: ge,
  maxScreenHeight: ie,
  serverUpdateRate: Oa,
  maxPlayers: Ra,
  maxPlayersHard: _a,
  collisionDepth: ke,
  minimapRate: Ba,
  colGrid: za,
  clientSendRate: Ha,
  healthBarWidth: Fa,
  healthBarPad: Va,
  iconPadding: Ua,
  iconPad: La,
  deathFadeout: Na,
  crownIconScale: qa,
  crownPad: Wa,
  chatCountdown: Xa,
  chatCooldown: Ga,
  inSandbox: Ya,
  maxAge: $a,
  gatherAngle: Ka,
  gatherWiggle: Ja,
  hitReturnRatio: Qa,
  hitAngle: Za,
  playerScale: ja,
  playerSpeed: le,
  playerDecel: ne,
  nameY: oe,
  skinColors: te,
  animalCount: ve,
  aiTurnRandom: xe,
  cowNames: ze,
  shieldAngle: Ae,
  weaponVariants: Ce,
  fetchVariant: Fe,
  resourceTypes: Ke,
  areaCount: Pe,
  treesPerArea: Qe,
  bushesPerArea: Ue,
  totalRocks: Ye,
  goldOres: lf,
  riverWidth: ag,
  riverPadding: bg,
  waterCurrent: cg,
  waveSpeed: dg,
  waveMax: eg,
  treeScales: fg,
  bushScales: gg,
  rockScales: hg,
  snowBiomeTop: ig,
  snowSpeed: jg,
  maxNameLength: kg,
  mapScale: lg,
  mapPingScale: mg,
  mapPingTime: ng,
  volcanoScale: tg,
  innerVolcanoScale: ug,
  volcanoAnimalStrength: vg,
  volcanoAnimationDuration: wg,
  volcanoAggressionRadius: xg,
  volcanoAggressionPercentage: yg,
  volcanoDamagePerSecond: zg,
  volcanoLocationX: Ag,
  volcanoLocationY: Bg,
  MAX_ATTACK: og,
  MAX_SPAWN_DELAY: pg,
  MAX_SPEED: qg,
  MAX_TURN_SPEED: rg,
  DAY_INTERVAL: sg
};
const Dg = new ya();
const T = new Pd();
const Eg = {
  sendMS: window.pingTime,
  SEND_LIMIT: 120,
  sendCount: 0,
  socket: null,
  connected: false,
  socketId: -1,
  connect: function (g, e, a) {
    if (this.socket) {
      return;
    }
    const c = this;
    try {
      let b = false;
      const d = g;
      this.socket = new WebSocket(g);
      this.socket.binaryType = "arraybuffer";
      this.socket.onmessage = function (d) {
        var g = new Uint8Array(d.data);
        const h = T.decode(g);
        const e = h[0];
        var g = h[1];
        if (e == "io-init") {
          c.socketId = g[0];
        } else {
          a[e].apply(undefined, g);
        }
      };
      this.socket.onopen = function () {
        c.connected = true;
        e();
      };
      this.socket.onclose = function (d) {
        c.connected = false;
        if (d.code == 4001) {
          e("Invalid Connection");
        } else if (!b) {
          e("disconnected");
        }
      };
      this.socket.onerror = function (c) {
        if (this.socket && this.socket.readyState != WebSocket.OPEN) {
          b = true;
          console.error("Socket error", arguments);
          e("Socket error");
        }
      };
    } catch (b) {
      console.warn("Socket connection error:", b);
      e(b);
    }
  },
  send: function (d) {
    const a = Array.prototype.slice.call(arguments, 1);
    const b = Dg.encode([d, a]);
    if (this.socket) {
      this.socket.send(b);
    }
    if (this.sendCount >= this.SEND_LIMIT) {
      return;
    }
    if (this.sendCount < this.SEND_LIMIT) {
      this.sendCount++;
      setTimeout(() => {
        this.sendCount--;
      }, 900);
    }
  },
  socketReady: function () {
    return this.socket && this.connected;
  },
  close: function () {
    if (this.socket) {
      this.socket.close();
    }
    this.socket = null;
    this.connected = false;
  }
};
var Fg = Math.abs;
const ee = Math.sqrt;
var Fg = Math.abs;
const Gg = Math.atan2;
const Hg = Math.PI;
const Ig = function (c, a) {
  return Math.floor(Math.random() * (a - c + 1)) + c;
};
const Jg = function (c, a) {
  return Math.random() * (a - c + 1) + c;
};
const Kg = function (d, a, b) {
  return d + (a - d) * b;
};
const Lg = function (c, d) {
  if (c > 0) {
    c = Math.max(0, c - d);
  } else if (c < 0) {
    c = Math.min(0, c + d);
  }
  return c;
};
const Mg = function (e, a, b, f) {
  return ee((b -= e) * b + (f -= a) * f);
};
const Ng = function (e, a, b, c) {
  return Gg(a - c, e - b);
};
const Og = function (d, a) {
  const b = Fg(a - d) % (Hg * 2);
  if (b > Hg) {
    return Hg * 2 - b;
  } else {
    return b;
  }
};
const Pg = function (b) {
  return typeof b == "number" && !isNaN(b) && isFinite(b);
};
const Qg = function (b) {
  return b && typeof b == "string";
};
const ec = function (b) {
  if (b > 999) {
    return (b / 1000).toFixed(1) + "k";
  } else {
    return b;
  }
};
const tc = function (b) {
  return b.charAt(0).toUpperCase() + b.slice(1);
};
const ic = function (c, a) {
  if (c) {
    return parseFloat(c.toFixed(a));
  } else {
    return 0;
  }
};
const nc = function (c, a) {
  return parseFloat(a.points) - parseFloat(c.points);
};
const sc = function (n, a, b, c, d, e, f, g) {
  let h = d;
  let o = f;
  if (d > f) {
    h = f;
    o = d;
  }
  if (o > b) {
    o = b;
  }
  if (h < n) {
    h = n;
  }
  if (h > o) {
    return false;
  }
  let p = e;
  let q = g;
  const r = f - d;
  if (Math.abs(r) > 1e-7) {
    const c = (g - e) / r;
    const a = e - c * d;
    p = c * h + a;
    q = c * o + a;
  }
  if (p > q) {
    const b = q;
    q = p;
    p = b;
  }
  if (q > c) {
    q = c;
  }
  if (p < a) {
    p = a;
  }
  return p <= q;
};
const rc = function (k, a, b) {
  const c = k.getBoundingClientRect();
  const d = c.left + window.scrollX;
  const e = c.top + window.scrollY;
  const f = c.width;
  const g = c.height;
  const h = a > d && a < d + f;
  const i = b > e && b < e + g;
  return h && i;
};
const oc = function (c) {
  const a = c.changedTouches[0];
  c.screenX = a.screenX;
  c.screenY = a.screenY;
  c.clientX = a.clientX;
  c.clientY = a.clientY;
  c.pageX = a.pageX;
  c.pageY = a.pageY;
};
const Rg = function (i, a) {
  const j = !a;
  let c = false;
  const b = false;
  i.addEventListener("touchstart", lc(e), b);
  i.addEventListener("touchmove", lc(f), b);
  i.addEventListener("touchend", lc(g), b);
  i.addEventListener("touchcancel", lc(g), b);
  i.addEventListener("touchleave", lc(g), b);
  function e(a) {
    oc(a);
    window.setUsingTouch(true);
    if (j) {
      a.preventDefault();
      a.stopPropagation();
    }
    if (i.onmouseover) {
      i.onmouseover(a);
    }
    c = true;
  }
  function f(a) {
    oc(a);
    window.setUsingTouch(true);
    if (j) {
      a.preventDefault();
      a.stopPropagation();
    }
    if (rc(i, a.pageX, a.pageY)) {
      if (!c) {
        if (i.onmouseover) {
          i.onmouseover(a);
        }
        c = true;
      }
    } else if (c) {
      if (i.onmouseout) {
        i.onmouseout(a);
      }
      c = false;
    }
  }
  function g(a) {
    oc(a);
    window.setUsingTouch(true);
    if (j) {
      a.preventDefault();
      a.stopPropagation();
    }
    if (c) {
      if (i.onclick) {
        i.onclick(a);
      }
      if (i.onmouseout) {
        i.onmouseout(a);
      }
      c = false;
    }
  }
};
const Sg = function (b) {
  while (b.hasChildNodes()) {
    b.removeChild(b.lastChild);
  }
};
const Tg = function (e) {
  const a = document.createElement(e.tag || "div");
  function b(b, c) {
    if (e[b]) {
      a[c] = e[b];
    }
  }
  b("text", "textContent");
  b("html", "innerHTML");
  b("class", "className");
  for (const b in e) {
    switch (b) {
      case "tag":
      case "text":
      case "html":
      case "class":
      case "style":
      case "hookTouch":
      case "parent":
      case "children":
        continue;
    }
    a[b] = e[b];
  }
  a.onclick &&= lc(a.onclick);
  a.onmouseover &&= lc(a.onmouseover);
  a.onmouseout &&= lc(a.onmouseout);
  if (e.style) {
    a.style.cssText = e.style;
  }
  if (e.hookTouch) {
    Rg(a);
  }
  if (e.parent) {
    e.parent.appendChild(a);
  }
  if (e.children) {
    for (let b = 0; b < e.children.length; b++) {
      a.appendChild(e.children[b]);
    }
  }
  return a;
};
const ac = function (b) {
  if (b && typeof b.isTrusted == "boolean") {
    return b.isTrusted;
  } else {
    return true;
  }
};
const lc = function (c) {
  return function (a) {
    if (a && a instanceof Event && ac(a)) {
      c(a);
    }
  };
};
const Ug = function (e) {
  let a = "";
  const d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (let b = 0; b < e; b++) {
    a += d.charAt(Math.floor(Math.random() * d.length));
  }
  return a;
};
const Be = function (e, a) {
  let b = 0;
  for (let c = 0; c < e.length; c++) {
    if (e[c] === a) {
      b++;
    }
  }
  return b;
};
const cc = {
  randInt: Ig,
  randFloat: Jg,
  lerp: Kg,
  decel: Lg,
  getDistance: Mg,
  getDirection: Ng,
  getAngleDist: Og,
  isNumber: Pg,
  isString: Qg,
  kFormat: ec,
  capitalizeFirst: tc,
  fixTo: ic,
  sortByPoints: nc,
  lineInRect: sc,
  containsPoint: rc,
  mousifyTouchEvent: oc,
  hookTouchEvents: Rg,
  removeAllChildren: Sg,
  generateElement: Tg,
  checkTrusted: lc,
  randomString: Ug,
  countInArray: Be
};
const hc = function () {
  this.init = function (h, a, b, c, d, e, f) {
    this.x = h;
    this.y = a;
    this.color = f;
    this.scale = b;
    this.weight = 50;
    this.startScale = this.scale;
    this.maxScale = db ? b * 2.2 : b;
    this.scaleSpeed = 0.7;
    this.speed = db ? -c : c;
    this.life = d;
    this.maxlife = d;
    this.text = e;
    this.ranX = Jg.randFloat(-1, 1);
    this.acc = 1;
    this.speedMax = b;
    this.movSpeed = Math.random() * 1 + 1;
    this.movAngle = Math.random() * 1 < 0.5;
  };
  this.update = function (b) {
    if (this.life) {
      this.life -= b;
      this.y -= this.speed * b;
      this.scale += this.scaleSpeed * b;
      if (this.scale >= this.maxScale) {
        this.scale = this.maxScale;
        this.scaleSpeed *= -1;
      } else if (this.scale <= this.startScale) {
        this.scale = this.startScale;
        this.scaleSpeed = 0;
      }
      if (this.life <= 0) {
        this.life = 0;
      }
    }
    this.render = function (e, a, b) {
      if (!lb && db) {
        var c = ue;
        e.fillStyle = this.color;
        e.font = this.scale + "px Hammersmith One";
        e.strokeStyle = c;
        e.strokeText(this.text, this.x - a, this.y - b);
        e.fillText(this.text, this.x - a, this.y - b);
        e.globalAlpha = 1.5 || 1.4;
      } else {
        e.fillStyle = this.color;
        e.font = this.scale + "px Hammersmith One";
        e.fillText(this.text, this.x - a, this.y - b);
        e.globalAlpha = this.alpha;
      }
    };
  };
};
this.render = function (d, a, b) {
  d.fillStyle = this.color;
  d.font = this.scale + "px Hammersmith One";
  d.fillText(this.text, this.x - a, this.y - b);
};
uc = function () {
  this.texts = [];
  this.update = function (f, a, b, c) {
    a.textBaseline = "middle";
    a.textAlign = "center";
    for (var d = 0; d < this.texts.length; ++d) {
      if (this.texts[d].life) {
        this.texts[d].update(f);
        this.texts[d].render(a, b, c);
      }
    }
  };
  this.showText = function (j, a, b, c, d, e, f) {
    var g;
    for (var k = 0; k < this.texts.length; ++k) {
      if (!this.texts[k].life) {
        g = this.texts[k];
        break;
      }
    }
    if (!g) {
      g = new hc();
      this.texts.push(g);
    }
    if (!g) {
      g = new this.render();
      this.texts.push(g);
    }
    g.init(j, a, b, c, d, e, f);
  };
  this.showText = function (i, a, b, c, d, e, f) {
    let g;
    for (let h = 0; h < this.texts.length; ++h) {
      if (!this.texts[h].life) {
        g = this.texts[h];
        break;
      }
    }
    if (!g) {
      g = new hc();
      this.texts.push(g);
    }
    g.init(i, a, b, c, d, e, f);
  };
};
dc = function (f, a) {
  let g;
  this.sounds = [];
  this.active = true;
  this.play = function (a, b, c) {
    if (!!b && !!this.active) {
      g = this.sounds[a];
      if (!g) {
        g = new Howl({
          src: ".././sound/" + a + ".mp3"
        });
        this.sounds[a] = g;
      }
      if (!c || !g.isPlaying) {
        g.isPlaying = true;
        g.play();
        g.volume((b || 1) * f.volumeMult);
        g.loop(c);
      }
    }
  };
  this.toggleMute = function (c, a) {
    g = this.sounds[c];
    if (g) {
      g.mute(a);
    }
  };
  this.stop = function (b) {
    g = this.sounds[b];
    if (g) {
      g.stop();
      g.isPlaying = false;
    }
  };
};
Os = Math.floor;
Rs = Math.abs;
Ot = Math.cos;
Rt = Math.sin;
pc = Math.sqrt;
function C(m, o, n, p, c, q) {
  this.objects = o;
  this.grids = {};
  this.updateObjects = [];
  let d;
  let r;
  const s = p.mapScale / p.colGrid;
  this.setObjectGrids = function (g) {
    const a = Math.min(p.mapScale, Math.max(0, g.x));
    const b = Math.min(p.mapScale, Math.max(0, g.y));
    for (let c = 0; c < p.colGrid; ++c) {
      d = c * s;
      for (let e = 0; e < p.colGrid; ++e) {
        r = e * s;
        if (a + g.scale >= d && a - g.scale <= d + s && b + g.scale >= r && b - g.scale <= r + s) {
          this.grids[c + "_" + e] ||= [];
          this.grids[c + "_" + e].push(g);
          g.gridLocations.push(c + "_" + e);
        }
      }
    }
  };
  this.removeObjGrid = function (d) {
    let a;
    for (let b = 0; b < d.gridLocations.length; ++b) {
      a = this.grids[d.gridLocations[b]].indexOf(d);
      if (a >= 0) {
        this.grids[d.gridLocations[b]].splice(a, 1);
      }
    }
  };
  this.disableObj = function (c) {
    c.active = false;
    if (q) {
      if (c.owner && c.pps) {
        c.owner.pps -= c.pps;
      }
      this.removeObjGrid(c);
      const a = this.updateObjects.indexOf(c);
      if (a >= 0) {
        this.updateObjects.splice(a, 1);
      }
    }
  };
  this.hitObj = function (e, a) {
    for (let b = 0; b < c.length; ++b) {
      if (c[b].active) {
        if (e.sentTo[c[b].id]) {
          if (e.active) {
            if (c[b].canSee(e)) {
              q.send(c[b].id, "L", n.fixTo(a, 1), e.sid);
            }
          } else {
            q.send(c[b].id, "Q", e.sid);
          }
        }
        if (!e.active && e.owner == c[b]) {
          c[b].changeItemCount(e.group.id, -1);
        }
      }
    }
  };
  const e = [];
  let a;
  this.getGridArrays = function (f, g, b) {
    d = Os(f / s);
    r = Os(g / s);
    e.length = 0;
    try {
      if (this.grids[d + "_" + r]) {
        e.push(this.grids[d + "_" + r]);
      }
      if (f + b >= (d + 1) * s) {
        a = this.grids[d + 1 + "_" + r];
        if (a) {
          e.push(a);
        }
        if (r && g - b <= r * s) {
          a = this.grids[d + 1 + "_" + (r - 1)];
          if (a) {
            e.push(a);
          }
        } else if (g + b >= (r + 1) * s) {
          a = this.grids[d + 1 + "_" + (r + 1)];
          if (a) {
            e.push(a);
          }
        }
      }
      if (d && f - b <= d * s) {
        a = this.grids[d - 1 + "_" + r];
        if (a) {
          e.push(a);
        }
        if (r && g - b <= r * s) {
          a = this.grids[d - 1 + "_" + (r - 1)];
          if (a) {
            e.push(a);
          }
        } else if (g + b >= (r + 1) * s) {
          a = this.grids[d - 1 + "_" + (r + 1)];
          if (a) {
            e.push(a);
          }
        }
      }
      if (g + b >= (r + 1) * s) {
        a = this.grids[d + "_" + (r + 1)];
        if (a) {
          e.push(a);
        }
      }
      if (r && g - b <= r * s) {
        a = this.grids[d + "_" + (r - 1)];
        if (a) {
          e.push(a);
        }
      }
    } catch {}
    return e;
  };
  let b;
  this.add = function (a, c, d, e, f, g, h, i, j) {
    b = null;
    for (var k = 0; k < o.length; ++k) {
      if (o[k].sid == a) {
        b = o[k];
        break;
      }
    }
    if (!b) {
      for (var k = 0; k < o.length; ++k) {
        if (!o[k].active) {
          b = o[k];
          break;
        }
      }
    }
    if (!b) {
      b = new m(a);
      o.push(b);
    }
    if (i) {
      b.sid = a;
    }
    b.init(c, d, e, f, g, h, j);
    if (q) {
      this.setObjectGrids(b);
      if (b.doUpdate) {
        this.updateObjects.push(b);
      }
    }
  };
  this.disableBySid = function (b) {
    for (let a = 0; a < o.length; ++a) {
      if (o[a].sid == b) {
        this.disableObj(o[a]);
        break;
      }
    }
  };
  this.removeAllItems = function (b, a) {
    for (let c = 0; c < o.length; ++c) {
      if (o[c].active && o[c].owner && o[c].owner.sid == b) {
        this.disableObj(o[c]);
      }
    }
    if (a) {
      a.broadcast("R", b);
    }
  };
  this.fetchSpawnObj = function (e) {
    let a = null;
    for (let c = 0; c < o.length; ++c) {
      b = o[c];
      if (b.active && b.owner && b.owner.sid == e && b.spawnPoint) {
        a = [b.x, b.y];
        this.disableObj(b);
        q.broadcast("Q", b.sid);
        if (b.owner) {
          b.owner.changeItemCount(b.group.id, -1);
        }
        break;
      }
    }
    return a;
  };
  this.checkItemLocation = function (b, a, c, e, d, f, g) {
    for (let i = 0; i < o.length; ++i) {
      const d = o[i].blocker ? o[i].blocker : o[i].getScale(e, o[i].isItem);
      if (o[i].active && n.getDistance(b, a, o[i].x, o[i].y) < c + d) {
        return false;
      }
    }
    return !!f || d == 18 || a < p.mapScale / 2 - p.riverWidth / 2 || a > p.mapScale / 2 + p.riverWidth / 2;
  };
  this.addProjectile = function (e, a, b, d, f) {
    const g = items.projectiles[f];
    let h;
    for (let g = 0; g < projectiles.length; ++g) {
      if (!projectiles[g].active) {
        h = projectiles[g];
        break;
      }
    }
    if (!h) {
      h = new Projectile(c, n);
      projectiles.push(h);
    }
    h.init(f, e, a, b, g.speed, d, g.scale);
  };
  this.checkCollision = function (c, a, b) {
    b = b || 1;
    const d = c.x - a.x;
    const f = c.y - a.y;
    let g = c.scale + a.scale;
    if (Rs(d) <= g || Rs(f) <= g) {
      g = c.scale + (a.getScale ? a.getScale() : a.scale);
      let e = pc(d * d + f * f) - g;
      if (e <= 0) {
        if (a.ignoreCollision) {
          if (a.trap && !c.noTrap && a.owner != c && (!a.owner || !a.owner.team || a.owner.team != c.team)) {
            c.lockMove = true;
            a.hideFromEnemy = false;
          } else if (a.boostSpeed) {
            c.xVel += b * a.boostSpeed * (a.weightM || 1) * Ot(a.dir);
            c.yVel += b * a.boostSpeed * (a.weightM || 1) * Rt(a.dir);
          } else if (a.healCol) {
            c.healCol = a.healCol;
          } else if (a.teleport) {
            c.x = n.randInt(0, p.mapScale);
            c.y = n.randInt(0, p.mapScale);
          }
        } else {
          const b = n.getDirection(c.x, c.y, a.x, a.y);
          n.getDistance(c.x, c.y, a.x, a.y);
          if (a.isPlayer) {
            e = e * -1 / 2;
            c.x += e * Ot(b);
            c.y += e * Rt(b);
            a.x -= e * Ot(b);
            a.y -= e * Rt(b);
          } else {
            c.x = a.x + g * Ot(b);
            c.y = a.y + g * Rt(b);
            c.xVel *= 0.75;
            c.yVel *= 0.75;
          }
          if (a.dmg && a.owner != c && (!a.owner || !a.owner.team || a.owner.team != c.team)) {
            c.changeHealth(-a.dmg, a.owner, a);
            const d = (a.weightM || 1) * 1.5;
            c.xVel += d * Ot(b);
            c.yVel += d * Rt(b);
            if (a.pDmg && (!c.skin || !c.skin.poisonRes)) {
              c.dmgOverTime.dmg = a.pDmg;
              c.dmgOverTime.time = 5;
              c.dmgOverTime.doer = a.owner;
            }
            if (c.colDmg && a.health) {
              if (a.changeHealth(-c.colDmg)) {
                this.disableObj(a);
              }
              this.hitObj(a, n.getDirection(c.x, c.y, a.x, a.y));
            }
          }
        }
        if (a.zIndex > c.zIndex) {
          c.zIndex = a.zIndex;
        }
        return true;
      }
    }
    return false;
  };
}
function fc(j, k, a, b, c, d, e, f, g) {
  this.addProjectile = function (h, i, u, l, m, n, o, p, q) {
    const r = d.projectiles[n];
    let s;
    for (let b = 0; b < k.length; ++b) {
      if (!k[b].active) {
        s = k[b];
        break;
      }
    }
    if (!s) {
      s = new j(a, b, c, d, e, f, g);
      s.sid = k.length;
      k.push(s);
    }
    s.init(n, h, i, u, m, r.dmg, l, r.scale, o);
    s.ignoreObj = p;
    s.layer = q || r.layer;
    s.src = r.src;
    return s;
  };
}
function mc(j, a, b, c, d, e, f, g, h) {
  this.aiTypes = [{
    id: 0,
    src: "cow_1",
    killScore: 150,
    health: 500,
    weightM: 0.8,
    speed: 0.00095,
    turnSpeed: 0.001,
    scale: 72,
    drop: ["food", 50]
  }, {
    id: 1,
    src: "pig_1",
    killScore: 200,
    health: 800,
    weightM: 0.6,
    speed: 0.00085,
    turnSpeed: 0.001,
    scale: 72,
    drop: ["food", 80]
  }, {
    id: 2,
    name: "Bull",
    src: "bull_2",
    hostile: true,
    dmg: 20,
    killScore: 1000,
    health: 1800,
    weightM: 0.5,
    speed: 0.00094,
    turnSpeed: 0.00074,
    scale: 78,
    viewRange: 800,
    chargePlayer: true,
    drop: ["food", 100]
  }, {
    id: 3,
    name: "Bully",
    src: "bull_1",
    hostile: true,
    dmg: 20,
    killScore: 2000,
    health: 2800,
    weightM: 0.45,
    speed: 0.001,
    turnSpeed: 0.0008,
    scale: 90,
    viewRange: 900,
    chargePlayer: true,
    drop: ["food", 400]
  }, {
    id: 4,
    name: "Wolf",
    src: "wolf_1",
    hostile: true,
    dmg: 8,
    killScore: 500,
    health: 300,
    weightM: 0.45,
    speed: 0.001,
    turnSpeed: 0.002,
    scale: 84,
    viewRange: 800,
    chargePlayer: true,
    drop: ["food", 200]
  }, {
    id: 5,
    name: "Quack",
    src: "chicken_1",
    dmg: 8,
    killScore: 2000,
    noTrap: true,
    health: 300,
    weightM: 0.2,
    speed: 0.0018,
    turnSpeed: 0.006,
    scale: 70,
    drop: ["food", 100]
  }, {
    id: 6,
    name: "MOOSTAFA",
    nameScale: 50,
    src: "enemy",
    hostile: true,
    dontRun: true,
    fixedSpawn: true,
    spawnDelay: 60000,
    noTrap: true,
    colDmg: 100,
    dmg: 40,
    killScore: 8000,
    health: 18000,
    weightM: 0.4,
    speed: 0.0007,
    turnSpeed: 0.01,
    scale: 80,
    spriteMlt: 1.8,
    leapForce: 0.9,
    viewRange: 1000,
    hitRange: 210,
    hitDelay: 1000,
    chargePlayer: true,
    drop: ["food", 100]
  }, {
    id: 7,
    name: "Treasure",
    hostile: true,
    nameScale: 35,
    src: "crate_1",
    fixedSpawn: true,
    spawnDelay: 120000,
    colDmg: 200,
    killScore: 5000,
    health: 20000,
    weightM: 0.1,
    speed: 0,
    turnSpeed: 0,
    scale: 70,
    spriteMlt: 1
  }, {
    id: 8,
    name: "MOOFIE",
    src: "wolf_2",
    hostile: true,
    fixedSpawn: true,
    dontRun: true,
    hitScare: 4,
    spawnDelay: 30000,
    noTrap: true,
    nameScale: 35,
    dmg: 10,
    colDmg: 100,
    killScore: 3000,
    health: 7000,
    weightM: 0.45,
    speed: 0.0015,
    turnSpeed: 0.002,
    scale: 90,
    viewRange: 800,
    chargePlayer: true,
    drop: ["food", 1000]
  }, {
    id: 9,
    name: "🧔🏿MOOFIE",
    src: "wolf_2",
    hostile: true,
    fixedSpawn: true,
    dontRun: true,
    hitScare: 50,
    spawnDelay: 60000,
    noTrap: true,
    nameScale: 35,
    dmg: 12,
    colDmg: 100,
    killScore: 3000,
    health: 9000,
    weightM: 0.45,
    speed: 0.0015,
    turnSpeed: 0.0025,
    scale: 94,
    viewRange: 1440,
    chargePlayer: true,
    drop: ["food", 3000],
    minSpawnRange: 0.85,
    maxSpawnRange: 0.9
  }, {
    id: 10,
    name: "👨🏿Wolf",
    src: "wolf_1",
    hostile: true,
    fixedSpawn: true,
    dontRun: true,
    hitScare: 50,
    spawnDelay: 30000,
    dmg: 10,
    killScore: 700,
    health: 500,
    weightM: 0.45,
    speed: 0.00115,
    turnSpeed: 0.0025,
    scale: 88,
    viewRange: 1440,
    chargePlayer: true,
    drop: ["food", 400],
    minSpawnRange: 0.85,
    maxSpawnRange: 0.9
  }, {
    id: 11,
    name: "👱🏿‍♂️Bully",
    src: "bull_1",
    hostile: true,
    fixedSpawn: true,
    dontRun: true,
    hitScare: 50,
    dmg: 20,
    killScore: 5000,
    health: 5000,
    spawnDelay: 100000,
    weightM: 0.45,
    speed: 0.00115,
    turnSpeed: 0.0025,
    scale: 94,
    viewRange: 1440,
    chargePlayer: true,
    drop: ["food", 800],
    minSpawnRange: 0.85,
    maxSpawnRange: 0.9
  }];
  this.spawn = function (i, o, k, l) {
    if (!this.aiTypes[l]) {
      console.error("missing ai type", l);
      return this.spawn(i, o, k, 0);
    }
    let m;
    for (let a = 0; a < j.length; ++a) {
      if (!j[a].active) {
        m = j[a];
        break;
      }
    }
    if (!m) {
      m = new a(j.length, d, b, c, f, e, g, h);
      j.push(m);
    }
    m.init(i, o, k, l, this.aiTypes[l]);
    return m;
  };
}
const gc = Math.PI * 2;
const yc = 0;
function Vg(l, n, o, a, u, e, c, d) {
  this.sid = l;
  this.isAI = true;
  this.nameIndex = u.randInt(0, e.cowNames.length - 1);
  this.init = function (f, a, b, c, d) {
    this.x = f;
    this.y = a;
    this.startX = null;
    this.startY = null;
    this.xVel = 0;
    this.yVel = 0;
    this.zIndex = 0;
    this.dir = b + Math.PI;
    this.dirPlus = 0;
    this.index = c;
    this.src = d.src;
    if (d.name) {
      this.name = d.name;
    }
    if ((this.name || "").startsWith("💀")) {
      this.isVolcanoAi = true;
    }
    this.weightM = d.weightM;
    this.speed = d.speed;
    this.killScore = d.killScore;
    this.turnSpeed = d.turnSpeed;
    this.scale = d.scale;
    this.maxHealth = d.health;
    this.leapForce = d.leapForce;
    this.health = this.maxHealth;
    this.cHealth = this.health;
    this.tReload = 1;
    this.chargePlayer = d.chargePlayer;
    this.viewRange = d.viewRange;
    this.drop = d.drop;
    this.dmg = d.dmg;
    this.hostile = d.hostile;
    this.dontRun = d.dontRun;
    this.hitRange = d.hitRange;
    this.hitDelay = d.hitDelay;
    this.hitScare = d.hitScare;
    this.spriteMlt = d.spriteMlt;
    this.nameScale = d.nameScale;
    this.colDmg = d.colDmg;
    this.noTrap = d.noTrap;
    this.spawnDelay = d.spawnDelay;
    this.minSpawnRange = d.minSpawnRange;
    this.maxSpawnRange = d.maxSpawnRange;
    this.hitWait = 0;
    this.waitCount = 1000;
    this.moveCount = 0;
    this.targetDir = 0;
    this.active = true;
    this.alive = true;
    this.runFrom = null;
    this.chargeTarget = null;
    this.chat = {
      message: null,
      count: 0
    };
    this.dmgOverTime = {};
  };
  this.getVolcanoAggression = function () {
    const c = u.getDistance(this.x, this.y, e.volcanoLocationX, e.volcanoLocationY);
    const a = c > e.volcanoAggressionRadius ? 0 : e.volcanoAggressionRadius - c;
    return 1 + e.volcanoAggressionPercentage * (1 - a / e.volcanoAggressionRadius);
  };
  let b = 0;
  this.update = function (f) {
    if (this.active) {
      if (this.spawnCounter) {
        this.spawnCounter -= f * 1 * this.getVolcanoAggression();
        if (this.spawnCounter <= 0) {
          this.spawnCounter = 0;
          if (this.minSpawnRange || this.maxSpawnRange) {
            const c = e.mapScale * this.minSpawnRange;
            const a = e.mapScale * this.maxSpawnRange;
            this.x = u.randInt(c, a);
            this.y = u.randInt(c, a);
          } else {
            this.x = this.startX || u.randInt(0, e.mapScale);
            this.y = this.startY || u.randInt(0, e.mapScale);
          }
        }
        return;
      }
      b -= f;
      if (b <= 0) {
        if (this.dmgOverTime.dmg) {
          this.changeHealth(-this.dmgOverTime.dmg, this.dmgOverTime.doer);
          this.dmgOverTime.time -= 1;
          if (this.dmgOverTime.time <= 0) {
            this.dmgOverTime.dmg = 0;
          }
        }
        b = 1000;
      }
      let d = false;
      let g = 1;
      if (!this.zIndex && !this.lockMove && this.y >= e.mapScale / 2 - e.riverWidth / 2 && this.y <= e.mapScale / 2 + e.riverWidth / 2) {
        g = 0.33;
        this.xVel += e.waterCurrent * f;
      }
      if (this.lockMove) {
        this.xVel = 0;
        this.yVel = 0;
      } else if (this.waitCount > 0) {
        this.waitCount -= f;
        if (this.waitCount <= 0) {
          if (this.chargePlayer) {
            let d;
            let a;
            let b;
            for (var c = 0; c < o.length; ++c) {
              if (o[c].alive && (!o[c].skin || !o[c].skin.bullRepel)) {
                b = u.getDistance(this.x, this.y, o[c].x, o[c].y);
                if (b <= this.viewRange && (!d || b < a)) {
                  a = b;
                  d = o[c];
                }
              }
            }
            if (d) {
              this.chargeTarget = d;
              this.moveCount = u.randInt(8000, 12000);
            } else {
              this.moveCount = u.randInt(1000, 2000);
              this.targetDir = u.randFloat(-Math.PI, Math.PI);
            }
          } else {
            this.moveCount = u.randInt(4000, 10000);
            this.targetDir = u.randFloat(-Math.PI, Math.PI);
          }
        }
      } else if (this.moveCount > 0) {
        var a = this.speed * g * (1 + e.MAX_SPEED * yc) * this.getVolcanoAggression();
        if (this.runFrom && this.runFrom.active && (!this.runFrom.isPlayer || !!this.runFrom.alive)) {
          this.targetDir = u.getDirection(this.x, this.y, this.runFrom.x, this.runFrom.y);
          a *= 1.42;
        } else if (this.chargeTarget && this.chargeTarget.alive) {
          this.targetDir = u.getDirection(this.chargeTarget.x, this.chargeTarget.y, this.x, this.y);
          a *= 1.75;
          d = true;
        }
        if (this.hitWait) {
          a *= 0.3;
        }
        if (this.dir != this.targetDir) {
          this.dir %= gc;
          const a = (this.dir - this.targetDir + gc) % gc;
          const b = Math.min(Math.abs(a - gc), a, this.turnSpeed * f);
          const c = a - Math.PI >= 0 ? 1 : -1;
          this.dir += c * b + gc;
        }
        this.dir %= gc;
        this.xVel += a * f * Math.cos(this.dir);
        this.yVel += a * f * Math.sin(this.dir);
        this.moveCount -= f;
        if (this.moveCount <= 0) {
          this.runFrom = null;
          this.chargeTarget = null;
          this.waitCount = this.hostile ? 1500 : u.randInt(1500, 6000);
        }
      }
      this.zIndex = 0;
      this.lockMove = false;
      var h;
      const j = u.getDistance(0, 0, this.xVel * f, this.yVel * f);
      const k = Math.min(4, Math.max(1, Math.round(j / 40)));
      const l = 1 / k;
      for (var c = 0; c < k; ++c) {
        if (this.xVel) {
          this.x += this.xVel * f * l;
        }
        if (this.yVel) {
          this.y += this.yVel * f * l;
        }
        h = n.getGridArrays(this.x, this.y, this.scale);
        for (var i = 0; i < h.length; ++i) {
          for (let b = 0; b < h[i].length; ++b) {
            if (h[i][b].active) {
              n.checkCollision(this, h[i][b], l);
            }
          }
        }
      }
      let m = false;
      if (this.hitWait > 0 && (this.hitWait -= f, this.hitWait <= 0)) {
        m = true;
        this.hitWait = 0;
        if (this.leapForce && !u.randInt(0, 2)) {
          this.xVel += this.leapForce * Math.cos(this.dir);
          this.yVel += this.leapForce * Math.sin(this.dir);
        }
        var h = n.getGridArrays(this.x, this.y, this.hitRange);
        var p;
        var q;
        for (let b = 0; b < h.length; ++b) {
          for (var i = 0; i < h[b].length; ++i) {
            p = h[b][i];
            if (p.health) {
              q = u.getDistance(this.x, this.y, p.x, p.y);
              if (q < p.scale + this.hitRange) {
                if (p.changeHealth(-this.dmg * 5)) {
                  n.disableObj(p);
                }
                n.hitObj(p, u.getDirection(this.x, this.y, p.x, p.y));
              }
            }
          }
        }
        for (var i = 0; i < o.length; ++i) {
          if (o[i].canSee(this)) {
            d.send(o[i].id, "J", this.sid);
          }
        }
      }
      if (d || m) {
        var p;
        var q;
        let b;
        for (var c = 0; c < o.length; ++c) {
          p = o[c];
          if (p && p.alive) {
            q = u.getDistance(this.x, this.y, p.x, p.y);
            if (this.hitRange) {
              if (!this.hitWait && q <= this.hitRange + p.scale) {
                if (m) {
                  b = u.getDirection(p.x, p.y, this.x, this.y);
                  p.changeHealth(-this.dmg * (1 + e.MAX_ATTACK * yc) * this.getVolcanoAggression());
                  p.xVel += Math.cos(b) * 0.6;
                  p.yVel += Math.sin(b) * 0.6;
                  this.runFrom = null;
                  this.chargeTarget = null;
                  this.waitCount = 3000;
                  this.hitWait = u.randInt(0, 2) ? 0 : 600;
                } else {
                  this.hitWait = this.hitDelay;
                }
              }
            } else if (q <= this.scale + p.scale) {
              b = u.getDirection(p.x, p.y, this.x, this.y);
              p.changeHealth(-this.dmg * (1 + e.MAX_ATTACK * yc) * this.getVolcanoAggression());
              p.xVel += Math.cos(b) * 0.55;
              p.yVel += Math.sin(b) * 0.55;
            }
          }
        }
      }
      if (this.xVel) {
        this.xVel *= Math.pow(e.playerDecel, f);
      }
      if (this.yVel) {
        this.yVel *= Math.pow(e.playerDecel, f);
      }
      const r = this.scale;
      if (this.x - r < 0) {
        this.x = r;
        this.xVel = 0;
      } else if (this.x + r > e.mapScale) {
        this.x = e.mapScale - r;
        this.xVel = 0;
      }
      if (this.y - r < 0) {
        this.y = r;
        this.yVel = 0;
      } else if (this.y + r > e.mapScale) {
        this.y = e.mapScale - r;
        this.yVel = 0;
      }
      if (this.isVolcanoAi) {
        if (this.chargeTarget && (u.getDistance(this.chargeTarget.x, this.chargeTarget.y, e.volcanoLocationX, e.volcanoLocationY) || 0) > e.volcanoAggressionRadius) {
          this.chargeTarget = null;
        }
        if (this.xVel) {
          if (this.x < e.volcanoLocationX - e.volcanoAggressionRadius) {
            this.x = e.volcanoLocationX - e.volcanoAggressionRadius;
            this.xVel = 0;
          } else if (this.x > e.volcanoLocationX + e.volcanoAggressionRadius) {
            this.x = e.volcanoLocationX + e.volcanoAggressionRadius;
            this.xVel = 0;
          }
        }
        if (this.yVel) {
          if (this.y < e.volcanoLocationY - e.volcanoAggressionRadius) {
            this.y = e.volcanoLocationY - e.volcanoAggressionRadius;
            this.yVel = 0;
          } else if (this.y > e.volcanoLocationY + e.volcanoAggressionRadius) {
            this.y = e.volcanoLocationY + e.volcanoAggressionRadius;
            this.yVel = 0;
          }
        }
      }
    }
  };
  this.canSee = function (d) {
    if (!d || d.skin && d.skin.invisTimer && d.noMovTimer >= d.skin.invisTimer) {
      return false;
    }
    const a = Math.abs(d.x - this.x) - d.scale;
    const b = Math.abs(d.y - this.y) - d.scale;
    return a <= e.maxScreenWidth / 2 * 1.3 && b <= e.maxScreenHeight / 2 * 1.3;
  };
  let f = 0;
  let g = 0;
  this.animate = function (b) {
    if (this.animTime > 0) {
      this.animTime -= b;
      if (this.animTime <= 0) {
        this.animTime = 0;
        this.dirPlus = 0;
        f = 0;
        g = 0;
      } else if (g == 0) {
        f += b / (this.animSpeed * e.hitReturnRatio);
        this.dirPlus = u.lerp(0, this.targetAngle, Math.min(1, f));
        if (f >= 1) {
          f = 1;
          g = 1;
        }
      } else {
        f -= b / (this.animSpeed * (1 - e.hitReturnRatio));
        this.dirPlus = u.lerp(0, this.targetAngle, Math.max(0, f));
      }
    }
  };
  this.startAnim = function () {
    this.animTime = this.animSpeed = 600;
    this.targetAngle = Math.PI * 0.8;
    f = 0;
    g = 0;
  };
  this.changeHealth = function (f, g, a) {
    if (this.active && (this.health += f, a && (this.hitScare && !u.randInt(0, this.hitScare) ? (this.runFrom = a, this.waitCount = 0, this.moveCount = 2000) : this.hostile && this.chargePlayer && a.isPlayer ? (this.chargeTarget = a, this.waitCount = 0, this.moveCount = 8000) : this.dontRun || (this.runFrom = a, this.waitCount = 0, this.moveCount = 2000)), f < 0 && this.hitRange && u.randInt(0, 1) && (this.hitWait = 500), g && g.canSee(this) && f < 0 && d.send(g.id, "8", Math.round(this.x), Math.round(this.y), Math.round(-f), 1), this.health <= 0)) {
      if (this.spawnDelay) {
        this.spawnCounter = this.spawnDelay;
        this.x = -1000000;
        this.y = -1000000;
      } else if (this.minSpawnRange || this.maxSpawnRange) {
        const c = e.mapScale * this.minSpawnRange;
        const a = e.mapScale * this.maxSpawnRange;
        this.x = u.randInt(c, a);
        this.y = u.randInt(c, a);
      } else {
        this.x = this.startX || u.randInt(0, e.mapScale);
        this.y = this.startY || u.randInt(0, e.mapScale);
      }
      this.health = this.maxHealth;
      this.runFrom = null;
      if (g && (c(g, this.killScore), this.drop)) {
        for (let b = 0; b < this.drop.length;) {
          g.addResource(e.resourceTypes.indexOf(this.drop[b]), this.drop[b + 1]);
          b += 2;
        }
      }
    }
  };
}
function Wg(b) {
  this.sid = b;
  this.init = function (h, a, b, c, d, e, i) {
    e = e || {};
    this.sentTo = {};
    this.gridLocations = [];
    this.active = true;
    this.doUpdate = e.doUpdate;
    this.x = h;
    this.y = a;
    this.dir = b;
    this.xWiggle = 0;
    this.yWiggle = 0;
    this.scale = c;
    this.type = d;
    this.id = e.id;
    this.owner = i;
    this.name = e.name;
    this.isItem = this.id != null;
    this.group = e.group;
    this.health = e.health;
    this.maxHealth = e.health;
    this.layer = 2;
    if (this.group != null) {
      this.layer = this.group.layer;
    } else if (this.type == 0) {
      this.layer = 3;
    } else if (this.type == 2) {
      this.layer = 0;
    } else if (this.type == 4) {
      this.layer = -1;
    }
    this.colDiv = e.colDiv || 1;
    this.blocker = e.blocker;
    this.ignoreCollision = e.ignoreCollision;
    this.dontGather = e.dontGather;
    this.hideFromEnemy = e.hideFromEnemy;
    this.friction = e.friction;
    this.projDmg = e.projDmg;
    this.healthMov = e.health;
    this.dmg = e.dmg;
    this.pDmg = e.pDmg;
    this.pps = e.pps;
    this.zIndex = e.zIndex || 0;
    this.turnSpeed = e.turnSpeed;
    this.req = e.req;
    this.trap = e.trap;
    this.healCol = e.healCol;
    this.teleport = e.teleport;
    this.boostSpeed = e.boostSpeed;
    this.projectile = e.projectile;
    this.shootRange = e.shootRange;
    this.shooting = {};
    this.shootRate = e.shootRate;
    this.shootCount = this.shootRate;
    this.spawnPoint = e.spawnPoint;
  };
  this.changeHealth = function (c, a) {
    this.health += c;
    return this.health <= 0;
  };
  this.getScale = function (c, d) {
    c = c || 1;
    return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : c * 0.6) * (d ? 1 : this.colDiv);
  };
  this.visibleToPlayer = function (b) {
    return !this.hideFromEnemy || this.owner && (this.owner == b || this.owner.team && b.team == this.owner.team);
  };
  this.update = function (b) {
    if (this.health != this.healthMov) {
      if (this.health < this.healthMov) {
        this.healthMov -= 1.9;
      } else {
        this.healthMov += 1.9;
      }
      if (Math.abs(this.health - this.healthMov) < 1.9) {
        this.healthMov = this.health;
      }
    }
    ;
    if (this.active) {
      if (this.xWiggle) {
        this.xWiggle *= Math.pow(0.99, b);
      }
      if (this.yWiggle) {
        this.yWiggle *= Math.pow(0.99, b);
      }
      if (this.turnSpeed) {
        this.dir += this.turnSpeed * b;
      }
    }
  };
}
const wc = [{
  id: 0,
  name: "food",
  layer: 0
}, {
  id: 1,
  name: "walls",
  place: true,
  limit: 30,
  layer: 0
}, {
  id: 2,
  name: "spikes",
  place: true,
  limit: 15,
  layer: 0
}, {
  id: 3,
  name: "mill",
  place: true,
  limit: 7,
  sandboxLimit: 299,
  layer: 1
}, {
  id: 4,
  name: "mine",
  place: true,
  limit: 1,
  layer: 0
}, {
  id: 5,
  name: "trap",
  place: true,
  limit: 6,
  layer: -1
}, {
  id: 6,
  name: "booster",
  place: true,
  limit: 12,
  sandboxLimit: 299,
  layer: -1
}, {
  id: 7,
  name: "turret",
  place: true,
  limit: 2,
  layer: 1
}, {
  id: 8,
  name: "watchtower",
  place: true,
  limit: 12,
  layer: 1
}, {
  id: 9,
  name: "buff",
  place: true,
  limit: 4,
  layer: -1
}, {
  id: 10,
  name: "spawn",
  place: true,
  limit: 1,
  layer: -1
}, {
  id: 11,
  name: "sapling",
  place: true,
  limit: 2,
  layer: 0
}, {
  id: 12,
  name: "blocker",
  place: true,
  limit: 3,
  layer: -1
}, {
  id: 13,
  name: "teleporter",
  place: true,
  limit: 2,
  sandboxLimit: 299,
  layer: -1
}];
const kc = [{
  indx: 0,
  layer: 0,
  src: "arrow_1",
  dmg: 25,
  speed: 1.6,
  scale: 103,
  range: 1000
}, {
  indx: 1,
  layer: 1,
  dmg: 25,
  scale: 20
}, {
  indx: 0,
  layer: 0,
  src: "arrow_1",
  dmg: 35,
  speed: 2.5,
  scale: 103,
  range: 1200
}, {
  indx: 0,
  layer: 0,
  src: "arrow_1",
  dmg: 30,
  speed: 2,
  scale: 103,
  range: 1200
}, {
  indx: 1,
  layer: 1,
  dmg: 16,
  scale: 20
}, {
  indx: 0,
  layer: 0,
  src: "bullet_1",
  dmg: 50,
  speed: 3.6,
  scale: 160,
  range: 1400
}];
const j = [{
  id: 0,
  type: 0,
  name: "tool hammer",
  desc: "tool for gathering all resources",
  src: "hammer_1",
  length: 140,
  width: 140,
  xOff: -3,
  yOff: 18,
  dmg: 25,
  range: 65,
  gather: 1,
  speed: 300
}, {
  id: 1,
  type: 0,
  age: 2,
  name: "hand axe",
  desc: "gathers resources at a higher rate",
  src: "axe_1",
  length: 140,
  width: 140,
  xOff: 3,
  yOff: 24,
  dmg: 30,
  spdMult: 1,
  range: 70,
  gather: 2,
  speed: 400
}, {
  id: 2,
  type: 0,
  age: 8,
  pre: 1,
  name: "great axe",
  desc: "deal more damage and gather more resources",
  src: "great_axe_1",
  length: 140,
  width: 140,
  xOff: -8,
  yOff: 25,
  dmg: 35,
  spdMult: 1,
  range: 75,
  gather: 4,
  speed: 400
}, {
  id: 3,
  type: 0,
  age: 2,
  name: "short sword",
  desc: "increased attack power but slower move speed",
  src: "sword_1",
  iPad: 1.3,
  length: 130,
  width: 210,
  xOff: -8,
  yOff: 46,
  dmg: 35,
  spdMult: 0.8,
  range: 110,
  gather: 1,
  speed: 300
}, {
  id: 4,
  type: 0,
  age: 8,
  pre: 3,
  name: "katana",
  desc: "greater range and damage",
  src: "samurai_1",
  iPad: 1.3,
  length: 130,
  width: 210,
  xOff: -8,
  yOff: 59,
  dmg: 40,
  spdMult: 0.8,
  range: 118,
  gather: 1,
  speed: 300
}, {
  id: 5,
  type: 0,
  age: 2,
  name: "polearm",
  desc: "long range melee weapon",
  src: "spear_1",
  iPad: 1.3,
  length: 130,
  width: 210,
  xOff: -8,
  yOff: 53,
  dmg: 45,
  knock: 0.2,
  spdMult: 0.82,
  range: 142,
  gather: 1,
  speed: 700
}, {
  id: 6,
  type: 0,
  age: 2,
  name: "bat",
  desc: "fast long range melee weapon",
  src: "bat_1",
  iPad: 1.3,
  length: 110,
  width: 180,
  turnSpeed: 0.001,
  xOff: -8,
  yOff: 53,
  dmg: 20,
  knock: 0.7,
  range: 110,
  gather: 1,
  speed: 300
}, {
  id: 7,
  type: 0,
  age: 2,
  name: "daggers",
  desc: "really fast short range weapon",
  src: "dagger_1",
  iPad: 0.8,
  length: 110,
  width: 110,
  xOff: 18,
  yOff: 0,
  dmg: 20,
  knock: 0.1,
  range: 65,
  gather: 1,
  hitSlow: 0.1,
  spdMult: 1.13,
  speed: 100
}, {
  id: 8,
  type: 0,
  age: 2,
  name: "stick",
  desc: "great for gathering but very weak",
  src: "stick_1",
  length: 140,
  width: 140,
  xOff: 3,
  yOff: 24,
  dmg: 1,
  spdMult: 1,
  range: 70,
  gather: 7,
  speed: 400
}, {
  id: 9,
  type: 1,
  age: 6,
  name: "hunting bow",
  desc: "bow used for ranged combat and hunting",
  src: "bow_1",
  req: ["wood", 4],
  length: 120,
  width: 120,
  xOff: -6,
  yOff: 0,
  projectile: 0,
  spdMult: 0.75,
  speed: 600
}, {
  id: 10,
  type: 1,
  age: 6,
  name: "great hammer",
  desc: "hammer used for destroying structures",
  src: "great_hammer_1",
  length: 140,
  width: 140,
  xOff: -9,
  yOff: 25,
  dmg: 10,
  spdMult: 0.88,
  range: 75,
  sDmg: 7.5,
  gather: 1,
  speed: 400
}, {
  id: 11,
  type: 1,
  age: 6,
  name: "wooden shield",
  desc: "blocks projectiles and reduces melee damage",
  src: "shield_1",
  length: 120,
  width: 120,
  shield: 0.2,
  xOff: 6,
  yOff: 0,
  spdMult: 0.7
}, {
  id: 12,
  type: 1,
  age: 8,
  pre: 9,
  name: "crossbow",
  desc: "deals more damage and has greater range",
  src: "crossbow_1",
  req: ["wood", 5],
  aboveHand: true,
  armS: 0.75,
  length: 120,
  width: 120,
  xOff: -4,
  yOff: 0,
  projectile: 2,
  spdMult: 0.7,
  speed: 700
}, {
  id: 13,
  type: 1,
  age: 9,
  pre: 12,
  name: "repeater crossbow",
  desc: "high firerate crossbow with reduced damage",
  src: "crossbow_2",
  req: ["wood", 10],
  aboveHand: true,
  armS: 0.75,
  length: 120,
  width: 120,
  xOff: -4,
  yOff: 0,
  projectile: 3,
  spdMult: 0.7,
  speed: 230
}, {
  id: 14,
  type: 1,
  age: 6,
  name: "mc grabby",
  desc: "steals resources from enemies",
  src: "grab_1",
  length: 130,
  width: 210,
  xOff: -8,
  yOff: 53,
  dmg: 0,
  steal: 250,
  knock: 0.2,
  spdMult: 1.05,
  range: 125,
  gather: 0,
  speed: 700
}, {
  id: 15,
  type: 1,
  age: 9,
  pre: 12,
  name: "musket",
  desc: "slow firerate but high damage and range",
  src: "musket_1",
  req: ["stone", 10],
  aboveHand: true,
  rec: 0.35,
  armS: 0.6,
  hndS: 0.3,
  hndD: 1.6,
  length: 205,
  width: 205,
  xOff: 25,
  yOff: 0,
  projectile: 5,
  hideProjectile: true,
  spdMult: 0.6,
  speed: 1500
}];
const vc = [{
  group: wc[0],
  name: "apple",
  desc: "restores 20 health when consumed",
  req: ["food", 10],
  consume: function (b) {
    return b.changeHealth(20, b);
  },
  scale: 22,
  holdOffset: 15
}, {
  age: 3,
  group: wc[0],
  name: "cookie",
  desc: "restores 40 health when consumed",
  req: ["food", 15],
  consume: function (b) {
    return b.changeHealth(40, b);
  },
  scale: 27,
  holdOffset: 15
}, {
  age: 7,
  group: wc[0],
  name: "cheese",
  desc: "restores 30 health and another 50 over 5 seconds",
  req: ["food", 25],
  consume: function (b) {
    if (b.changeHealth(30, b) || b.health < 100) {
      b.dmgOverTime.dmg = -10;
      b.dmgOverTime.doer = b;
      b.dmgOverTime.time = 5;
      return true;
    } else {
      return false;
    }
  },
  scale: 27,
  holdOffset: 15
}, {
  group: wc[1],
  name: "wood wall",
  desc: "provides protection for your village",
  req: ["wood", 10],
  projDmg: true,
  health: 380,
  scale: 50,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 3,
  group: wc[1],
  name: "stone wall",
  desc: "provides improved protection for your village",
  req: ["stone", 25],
  health: 900,
  scale: 50,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  pre: 1,
  group: wc[1],
  name: "castle wall",
  desc: "provides powerful protection for your village",
  req: ["stone", 35],
  health: 1500,
  scale: 52,
  holdOffset: 20,
  placeOffset: -5
}, {
  group: wc[2],
  name: "spikes",
  desc: "damages enemies when they touch them",
  req: ["wood", 20, "stone", 5],
  health: 400,
  dmg: 20,
  scale: 49,
  spritePadding: -23,
  holdOffset: 8,
  placeOffset: -5
}, {
  age: 5,
  group: wc[2],
  name: "greater spikes",
  desc: "damages enemies when they touch them",
  req: ["wood", 30, "stone", 10],
  health: 500,
  dmg: 35,
  scale: 52,
  spritePadding: -23,
  holdOffset: 8,
  placeOffset: -5
}, {
  age: 9,
  pre: 1,
  group: wc[2],
  name: "poison spikes",
  desc: "poisons enemies when they touch them",
  req: ["wood", 35, "stone", 15],
  health: 600,
  dmg: 30,
  pDmg: 5,
  scale: 52,
  spritePadding: -23,
  holdOffset: 8,
  placeOffset: -5
}, {
  age: 9,
  pre: 2,
  group: wc[2],
  name: "spinning spikes",
  desc: "damages enemies when they touch them",
  req: ["wood", 30, "stone", 20],
  health: 500,
  dmg: 45,
  turnSpeed: 0.001,
  scale: 52,
  spritePadding: -23,
  holdOffset: 8,
  placeOffset: -5
}, {
  group: wc[3],
  name: "windmill",
  desc: "generates gold over time",
  req: ["wood", 50, "stone", 10],
  health: 400,
  pps: 1,
  turnSpeed: 0,
  spritePadding: 25,
  iconLineMult: 12,
  scale: 45,
  holdOffset: 20,
  placeOffset: 5
}, {
  age: 5,
  pre: 1,
  group: wc[3],
  name: "faster windmill",
  desc: "generates more gold over time",
  req: ["wood", 60, "stone", 20],
  health: 500,
  pps: 1.5,
  turnSpeed: 0,
  spritePadding: 25,
  iconLineMult: 12,
  scale: 47,
  holdOffset: 20,
  placeOffset: 5
}, {
  age: 8,
  pre: 1,
  group: wc[3],
  name: "power mill",
  desc: "generates more gold over time",
  req: ["wood", 100, "stone", 50],
  health: 800,
  pps: 2,
  turnSpeed: 0,
  spritePadding: 25,
  iconLineMult: 12,
  scale: 47,
  holdOffset: 20,
  placeOffset: 5
}, {
  age: 5,
  group: wc[4],
  type: 2,
  name: "mine",
  desc: "allows you to mine stone",
  req: ["wood", 20, "stone", 100],
  iconLineMult: 12,
  scale: 65,
  holdOffset: 20,
  placeOffset: 0
}, {
  age: 5,
  group: wc[11],
  type: 0,
  name: "sapling",
  desc: "allows you to farm wood",
  req: ["wood", 150],
  iconLineMult: 12,
  colDiv: 0.5,
  scale: 110,
  holdOffset: 50,
  placeOffset: -15
}, {
  age: 4,
  group: wc[5],
  name: "pit trap",
  desc: "pit that traps enemies if they walk over it",
  req: ["wood", 30, "stone", 30],
  trap: true,
  ignoreCollision: true,
  hideFromEnemy: true,
  health: 500,
  colDiv: 0.2,
  scale: 50,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 4,
  group: wc[6],
  name: "boost pad",
  desc: "provides boost when stepped on",
  req: ["stone", 20, "wood", 5],
  ignoreCollision: true,
  boostSpeed: 1.5,
  health: 150,
  colDiv: 0.7,
  scale: 45,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  group: wc[7],
  doUpdate: true,
  name: "turret",
  desc: "defensive structure that shoots at enemies",
  req: ["wood", 200, "stone", 150],
  health: 800,
  projectile: 1,
  shootRange: 700,
  shootRate: 2200,
  scale: 43,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  group: wc[8],
  name: "platform",
  desc: "platform to shoot over walls and cross over water",
  req: ["wood", 20],
  ignoreCollision: true,
  zIndex: 1,
  health: 300,
  scale: 43,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  group: wc[9],
  name: "healing pad",
  desc: "standing on it will slowly heal you",
  req: ["wood", 30, "food", 10],
  ignoreCollision: true,
  healCol: 15,
  health: 400,
  colDiv: 0.7,
  scale: 45,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 9,
  group: wc[10],
  name: "spawn pad",
  desc: "you will spawn here when you die but it will dissapear",
  req: ["wood", 100, "stone", 100],
  health: 400,
  ignoreCollision: true,
  spawnPoint: true,
  scale: 45,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  group: wc[12],
  name: "blocker",
  desc: "blocks building in radius",
  req: ["wood", 30, "stone", 25],
  ignoreCollision: true,
  blocker: 300,
  health: 400,
  colDiv: 0.7,
  scale: 45,
  holdOffset: 20,
  placeOffset: -5
}, {
  age: 7,
  group: wc[13],
  name: "teleporter",
  desc: "teleports you to a random point on the map",
  req: ["wood", 60, "stone", 60],
  ignoreCollision: true,
  teleport: true,
  health: 200,
  colDiv: 0.7,
  scale: 45,
  holdOffset: 20,
  placeOffset: -5
}];
for (let b = 0; b < vc.length; ++b) {
  vc[b].id = b;
  vc[b].pre &&= b - vc[b].pre;
}
const xc = {
  groups: wc,
  projectiles: kc,
  weapons: j,
  list: vc
};
const Xg = [];
const R = {
  words: Xg
};
var bc = {};
var Sc = [];
var Tc = /\b()\b/gi;
var Ic = {
  object: bc,
  array: Sc,
  regex: Tc
};
const Mc = R.words;
const Ec = Ic.array;
class Pc {
  constructor(b = undefined) {
    if (b === undefined) b = {};
    Object.assign(this, {
      list: b.emptyList && [] || Array.prototype.concat.apply(Mc, [Ec, b.list || []]),
      exclude: b.exclude || [],
      splitRegex: b.splitRegex || /\b/,
      placeHolder: b.placeHolder || "*",
      regex: b.regex || /[^a-zA-Z0-9|\$|\@]|\^/g,
      replaceRegex: b.replaceRegex || /\w/g
    });
  }
  isProfane(d) {
    return this.list.filter(a => {
      const b = new RegExp("\\b " + a.replace(/(\W)/g, "\\$1") + "\\b", "gi");
      return !this.exclude.includes(a.toLowerCase()) && b.test(d);
    }).length > 0 || false;
  }
  replaceWord(b) {
    return b.replace(this.regex, "").replace(this.replaceRegex, this.placeHolder);
  }
  clean(b) {
    return b.split(this.splitRegex).map(b => this.isProfane(b) ? this.replaceWord(b) : b).join(this.splitRegex.exec(b)[0]);
  }
  addWords() {
    let b = Array.from(arguments);
    this.list.push(...b);
    b.map(b => b.toLowerCase()).forEach(b => {
      if (this.exclude.includes(b)) {
        this.exclude.splice(this.exclude.indexOf(b), 1);
      }
    });
  }
  removeWords() {
    this.exclude.push(...Array.from(arguments).map(b => b.toLowerCase()));
  }
}
var Cc = Pc;
const Ac = new Cc();
const Dc = [];
Ac.addWords(...Dc);
const Yg = Math.abs;
const Oc = Math.cos;
const Zg = Math.sin;
const $g = Math.pow;
const _g = Math.sqrt;
function ci(s, a, t, c, d, u, f, g, v, b, e, h, i, j) {
  this.id = s;
  this.sid = a;
  this.tmpScore = 0;
  this.team = null;
  this.skinIndex = 0;
  this.tailIndex = 0;
  this.hitTime = 0;
  this.tails = {};
  for (var k = 0; k < e.length; ++k) {
    if (e[k].price <= 0) {
      this.tails[e[k].id] = 1;
    }
  }
  this.skins = {};
  for (var k = 0; k < b.length; ++k) {
    if (b[k].price <= 0) {
      this.skins[b[k].id] = 1;
    }
  }
  this.points = 0;
  this.dt = 0;
  this.hidden = false;
  this.itemCounts = {};
  this.isPlayer = true;
  this.pps = 0;
  this.moveDir = undefined;
  this.skinRot = 0;
  this.lastPing = 0;
  this.iconIndex = 0;
  this.skinColor = 0;
  this.spawn = function (b) {
    this.active = true;
    this.alive = true;
    this.lockMove = false;
    this.lockDir = false;
    this.minimapCounter = 0;
    this.chatCountdown = 0;
    this.shameCount = 0;
    this.shameTimer = 0;
    this.sentTo = {};
    this.gathering = 0;
    this.autoGather = 0;
    this.animTime = 0;
    this.animSpeed = 0;
    this.mouseState = 0;
    this.buildIndex = -1;
    this.weaponIndex = 0;
    this.dmgOverTime = {};
    this.cHealth = this.health;
    this.noMovTimer = 0;
    this.maxXP = 300;
    this.XP = 0;
    this.age = 1;
    this.kills = 0;
    this.upgrAge = 2;
    this.upgradePoints = 0;
    this.x = 0;
    this.y = 0;
    this.zIndex = 0;
    this.xVel = 0;
    this.yVel = 0;
    this.slowMult = 1;
    this.dir = 0;
    this.dirPlus = 0;
    this.targetDir = 0;
    this.targetAngle = 0;
    this.maxHealth = 100;
    this.health = this.maxHealth;
    this.scale = t.playerScale;
    this.speed = t.playerSpeed;
    this.resetMoveDir();
    this.resetResources(b);
    this.items = [0, 3, 6, 10];
    this.weapons = [0];
    this.shootCount = 0;
    this.weaponXP = [];
    this.reloads = [{
      count: Math.ceil(300 / 111),
      date: 0,
      max: Math.ceil(300 / 111),
      max2: 300,
      done: true,
      date: 0,
      id: 5,
      val: 0
    }, {
      date: Date.now(),
      count: Math.ceil(1500 / 111),
      max: Math.ceil(1500 / 111),
      max2: 1500,
      done: true,
      id: 15,
      val: 0
    }, {
      count: 23,
      date: 0,
      max: 23,
      done: true,
      max2: 2500
    }];
    this.timeSpentNearVolcano = 0;
  };
  this.resetMoveDir = function () {
    this.moveDir = undefined;
  };
  this.resetResources = function (c) {
    for (let a = 0; a < t.resourceTypes.length; ++a) {
      this[t.resourceTypes[a]] = c ? 100 : 0;
    }
  };
  this.addItem = function (d) {
    const a = v.list[d];
    if (a) {
      for (let b = 0; b < this.items.length; ++b) {
        if (v.list[this.items[b]].group == a.group) {
          if (this.buildIndex == this.items[b]) {
            this.buildIndex = d;
          }
          this.items[b] = d;
          return true;
        }
      }
      this.items.push(d);
      return true;
    }
    return false;
  };
  this.setUserData = function (c) {
    if (c) {
      this.name = "stfu";
      let a = c.name + "";
      a = a.slice(0, t.maxNameLength);
      a = a.replace(/[^\w:\(\)\/? -]+/gmi, " ");
      a = a.replace(/[^\x00-\x7F]/g, " ");
      a = a.trim();
      let b = false;
      const d = a.toLowerCase().replace(/\s/g, "").replace(/1/g, "i").replace(/0/g, "o").replace(/5/g, "s");
      for (const c of Ac.list) {
        if (d.indexOf(c) != -1) {
          b = true;
          break;
        }
      }
      if (a.length > 0 && !b) {
        this.name = a;
      }
      this.skinColor = 0;
      if (t.skinColors[c.skin]) {
        this.skinColor = c.skin;
      }
    }
  };
  this.getData = function () {
    return [this.id, this.sid, this.name, c.fixTo(this.x, 2), c.fixTo(this.y, 2), c.fixTo(this.dir, 3), this.health, this.maxHealth, this.scale, this.skinColor];
  };
  this.setData = function (b) {
    this.id = b[0];
    this.sid = b[1];
    this.name = b[2];
    this.x = b[3];
    this.y = b[4];
    this.dir = b[5];
    this.health = b[6];
    this.maxHealth = b[7];
    this.scale = b[8];
    this.skinColor = b[9];
  };
  let l = 0;
  this.update = function (g) {
    if (!this.alive) {
      return;
    }
    if ((c.getDistance(this.x, this.y, t.volcanoLocationX, t.volcanoLocationY) || 0) < t.volcanoAggressionRadius) {
      this.timeSpentNearVolcano += g;
      if (this.timeSpentNearVolcano >= 1000) {
        this.changeHealth(t.volcanoDamagePerSecond, null);
        h.send(this.id, "8", Math.round(this.x), Math.round(this.y), t.volcanoDamagePerSecond, -1);
        this.timeSpentNearVolcano %= 1000;
      }
    }
    if (this.shameTimer > 0) {
      this.shameTimer -= g;
      if (this.shameTimer <= 0) {
        this.shameTimer = 0;
        this.shameCount = 0;
      }
    }
    l -= g;
    if (l <= 0) {
      const b = (this.skin && this.skin.healthRegen ? this.skin.healthRegen : 0) + (this.tail && this.tail.healthRegen ? this.tail.healthRegen : 0);
      if (b) {
        this.changeHealth(b, this);
      }
      if (this.dmgOverTime.dmg) {
        this.changeHealth(-this.dmgOverTime.dmg, this.dmgOverTime.doer);
        this.dmgOverTime.time -= 1;
        if (this.dmgOverTime.time <= 0) {
          this.dmgOverTime.dmg = 0;
        }
      }
      if (this.healCol) {
        this.changeHealth(this.healCol, this);
      }
      l = 1000;
    }
    if (!this.alive) {
      return;
    }
    if (this.slowMult < 1) {
      this.slowMult += g * 0.0008;
      if (this.slowMult > 1) {
        this.slowMult = 1;
      }
    }
    this.noMovTimer += g;
    if (this.xVel || this.yVel) {
      this.noMovTimer = 0;
    }
    if (this.lockMove) {
      this.xVel = 0;
      this.yVel = 0;
    } else {
      let a = (this.buildIndex >= 0 ? 0.5 : 1) * (v.weapons[this.weaponIndex].spdMult || 1) * (this.skin && this.skin.spdMult || 1) * (this.tail && this.tail.spdMult || 1) * (this.y <= t.snowBiomeTop ? this.skin && this.skin.coldM ? 1 : t.snowSpeed : 1) * this.slowMult;
      if (!this.zIndex && this.y >= t.mapScale / 2 - t.riverWidth / 2 && this.y <= t.mapScale / 2 + t.riverWidth / 2) {
        if (this.skin && this.skin.watrImm) {
          a *= 0.75;
          this.xVel += t.waterCurrent * 0.4 * g;
        } else {
          a *= 0.33;
          this.xVel += t.waterCurrent * g;
        }
      }
      let b = this.moveDir != null ? Oc(this.moveDir) : 0;
      let c = this.moveDir != null ? Zg(this.moveDir) : 0;
      const d = _g(b * b + c * c);
      if (d != 0) {
        b /= d;
        c /= d;
      }
      if (b) {
        this.xVel += b * this.speed * a * g;
      }
      if (c) {
        this.yVel += c * this.speed * a * g;
      }
    }
    this.zIndex = 0;
    this.lockMove = false;
    this.healCol = 0;
    let e;
    const a = c.getDistance(0, 0, this.xVel * g, this.yVel * g);
    const i = Math.min(4, Math.max(1, Math.round(a / 40)));
    const j = 1 / i;
    let k = {};
    for (var m = 0; m < i; ++m) {
      if (this.xVel) {
        this.x += this.xVel * g * j;
      }
      if (this.yVel) {
        this.y += this.yVel * g * j;
      }
      e = u.getGridArrays(this.x, this.y, this.scale);
      for (let b = 0; b < e.length; ++b) {
        for (let a = 0; a < e[b].length && (!e[b][a].active || !!k[e[b][a].sid] || !u.checkCollision(this, e[b][a], j) || !(k[e[b][a].sid] = true, !this.alive)); ++a);
        if (!this.alive) {
          break;
        }
      }
      if (!this.alive) {
        break;
      }
    }
    var p = f.indexOf(this);
    for (var m = p + 1; m < f.length; ++m) {
      if (f[m] != this && f[m].alive) {
        u.checkCollision(this, f[m]);
      }
    }
    if (this.xVel) {
      this.xVel *= $g(t.playerDecel, g);
      if (this.xVel <= 0.01 && this.xVel >= -0.01) {
        this.xVel = 0;
      }
    }
    if (this.yVel) {
      this.yVel *= $g(t.playerDecel, g);
      if (this.yVel <= 0.01 && this.yVel >= -0.01) {
        this.yVel = 0;
      }
    }
    if (this.x - this.scale < 0) {
      this.x = this.scale;
    } else if (this.x + this.scale > t.mapScale) {
      this.x = t.mapScale - this.scale;
    }
    if (this.y - this.scale < 0) {
      this.y = this.scale;
    } else if (this.y + this.scale > t.mapScale) {
      this.y = t.mapScale - this.scale;
    }
    if (this.buildIndex < 0) {
      if (this.reloads[this.weaponIndex] > 0) {
        this.reloads[this.weaponIndex] -= g;
        this.gathering = this.mouseState;
      } else if (this.gathering || this.autoGather) {
        let b = true;
        if (v.weapons[this.weaponIndex].gather != null) {
          this.gather(f);
        } else if (v.weapons[this.weaponIndex].projectile != null && this.hasRes(v.weapons[this.weaponIndex], this.skin ? this.skin.projCost : 0)) {
          this.useRes(v.weapons[this.weaponIndex], this.skin ? this.skin.projCost : 0);
          this.noMovTimer = 0;
          var p = v.weapons[this.weaponIndex].projectile;
          const c = this.scale * 2;
          const a = this.skin && this.skin.aMlt ? this.skin.aMlt : 1;
          if (v.weapons[this.weaponIndex].rec) {
            this.xVel -= v.weapons[this.weaponIndex].rec * Oc(this.dir);
            this.yVel -= v.weapons[this.weaponIndex].rec * Zg(this.dir);
          }
          d.addProjectile(this.x + c * Oc(this.dir), this.y + c * Zg(this.dir), this.dir, v.projectiles[p].range * a, v.projectiles[p].speed * a, p, this, null, this.zIndex);
        } else {
          b = false;
        }
        this.gathering = this.mouseState;
        if (b) {
          this.reloads[this.weaponIndex] = v.weapons[this.weaponIndex].speed * (this.skin && this.skin.atkSpd || 1);
        }
      }
    }
  };
  this.addWeaponXP = function (b) {
    this.weaponXP[this.weaponIndex] ||= 0;
    this.weaponXP[this.weaponIndex] += b;
  };
  this.earnXP = function (b) {
    if (this.age < t.maxAge) {
      this.XP += b;
      if (this.XP >= this.maxXP) {
        if (this.age < t.maxAge) {
          this.age++;
          this.XP = 0;
          this.maxXP *= 1.2;
        } else {
          this.XP = this.maxXP;
        }
        this.upgradePoints++;
        h.send(this.id, "U", Points, this.upgrAge);
        h.send(this.id, "T", this.XP, c.fixTo(this.maxXP, 1), this.age);
      } else {
        h.send(this.id, "T", this.XP);
      }
    }
  };
  this.changeHealth = function (c, d) {
    if (c > 0 && this.health >= this.maxHealth) {
      return false;
    }
    if (c < 0 && this.skin) {
      c *= this.skin.dmgMult || 1;
    }
    if (c < 0 && this.tail) {
      c *= this.tail.dmgMult || 1;
    }
    if (c < 0) {
      this.hitTime = Date.now();
    }
    this.health += c;
    if (this.health > this.maxHealth) {
      c -= this.health - this.maxHealth;
      this.health = this.maxHealth;
    }
    if (this.health <= 0) {
      this.kill(d);
    }
    for (let a = 0; a < f.length; ++a) {
      if (this.sentTo[f[a].id]) {
        h.send(f[a].id, "O", this.sid, this.health);
      }
    }
    if (d && d.canSee(this) && (d != this || c >= 0)) {
      h.send(d.id, "8", Math.round(this.x), Math.round(this.y), Math.round(-c), 1);
    }
    return true;
  };
  this.kill = function (b) {
    if (b && b.alive) {
      b.kills++;
      if (b.skin && b.skin.goldSteal) {
        i(b, Math.round(this.points / 2));
      } else {
        i(b, Math.round(this.age * 100 * (b.skin && b.skin.kScrM ? b.skin.kScrM : 1)));
      }
      h.send(b.id, "N", "kills", b.kills, 1);
    }
    this.alive = false;
    h.send(this.id, "P");
    j();
  };
  this.addResource = function (c, a, b) {
    if (!b && a > 0) {
      this.addWeaponXP(a);
    }
    if (c == 3) {
      i(this, a, true);
    } else {
      this[t.resourceTypes[c]] += a;
      h.send(this.id, "N", t.resourceTypes[c], this[t.resourceTypes[c]], 1);
    }
  };
  this.changeItemCount = function (c, a) {
    this.itemCounts[c] = this.itemCounts[c] || 0;
    this.itemCounts[c] += a;
    h.send(this.id, "S", c, this.itemCounts[c]);
  };
  this.buildItem = function (e) {
    const a = this.scale + e.scale + (e.placeOffset || 0);
    const b = this.x + a * Oc(this.dir);
    const c = this.y + a * Zg(this.dir);
    if (this.canBuild(e) && (!e.consume || !this.skin || !this.skin.noEat) && (e.consume || u.checkItemLocation(b, c, e.scale, 0.6, e.id, false, this))) {
      let a = false;
      if (e.consume) {
        if (this.hitTime) {
          const b = Date.now() - this.hitTime;
          this.hitTime = 0;
          if (b <= 120) {
            this.shameCount++;
            if (this.shameCount >= 8) {
              this.shameTimer = 30000;
              this.shameCount = 0;
            }
          } else {
            this.shameCount -= 2;
            if (this.shameCount <= 0) {
              this.shameCount = 0;
            }
          }
        }
        if (this.shameTimer <= 0) {
          a = e.consume(this);
        }
      } else {
        a = true;
        if (e.group.limit) {
          this.changeItemCount(e.group.id, 1);
        }
        if (e.pps) {
          this.pps += e.pps;
        }
        u.add(u.objects.length, b, c, this.dir, e.scale, e.type, e, false, this);
      }
      if (a) {
        this.useRes(e);
        this.buildIndex = -1;
      }
    }
  };
  this.hasRes = function (d, a) {
    for (let b = 0; b < d.req.length;) {
      if (this[d.req[b]] < Math.round(d.req[b + 1] * (a || 1))) {
        return false;
      }
      b += 2;
    }
    return true;
  };
  this.useRes = function (c, a) {
    if (!t.inSandbox) {
      for (let b = 0; b < c.req.length;) {
        this.addResource(t.resourceTypes.indexOf(c.req[b]), -Math.round(c.req[b + 1] * (a || 1)));
        b += 2;
      }
    }
  };
  this.canBuild = function (c) {
    const a = t.inSandbox ? c.group.sandboxLimit || Math.max(c.group.limit * 3, 99) : c.group.limit;
    if (a && this.itemCounts[c.group.id] >= a) {
      return false;
    } else if (t.inSandbox) {
      return true;
    } else {
      return this.hasRes(c);
    }
  };
  this.gather = function () {
    this.noMovTimer = 0;
    this.slowMult -= v.weapons[this.weaponIndex].hitSlow || 0.3;
    if (this.slowMult < 0) {
      this.slowMult = 0;
    }
    const d = t.fetchVariant(this);
    const i = d.poison;
    const b = d.val;
    const e = {};
    let h;
    let q;
    let r;
    let a;
    const j = u.getGridArrays(this.x, this.y, v.weapons[this.weaponIndex].range);
    for (let d = 0; d < j.length; ++d) {
      for (var o = 0; o < j[d].length; ++o) {
        r = j[d][o];
        if (r.active && !r.dontGather && !e[r.sid] && r.visibleToPlayer(this) && (h = c.getDistance(this.x, this.y, r.x, r.y) - r.scale, h <= v.weapons[this.weaponIndex].range && (q = c.getDirection(r.x, r.y, this.x, this.y), c.getAngleDist(q, this.dir) <= t.gatherAngle))) {
          e[r.sid] = 1;
          if (r.health) {
            if (r.changeHealth(-v.weapons[this.weaponIndex].dmg * b * (v.weapons[this.weaponIndex].sDmg || 1) * (this.skin && this.skin.bDmg ? this.skin.bDmg : 1), this)) {
              for (let b = 0; b < r.req.length;) {
                this.addResource(t.resourceTypes.indexOf(r.req[b]), r.req[b + 1]);
                b += 2;
              }
              u.disableObj(r);
            }
          } else {
            if (r.name === "volcano") {
              this.hitVolcano(v.weapons[this.weaponIndex].gather);
            } else {
              this.earnXP(v.weapons[this.weaponIndex].gather * 4);
              const b = v.weapons[this.weaponIndex].gather + (r.type == 3 ? 4 : 0);
              this.addResource(r.type, b);
            }
            if (this.skin && this.skin.extraGold) {
              this.addResource(3, 1);
            }
          }
          a = true;
          u.hitObj(r, q);
        }
      }
    }
    for (var o = 0; o < f.length + g.length; ++o) {
      r = f[o] || g[o - f.length];
      if (r != this && r.alive && (!r.team || r.team != this.team) && (h = c.getDistance(this.x, this.y, r.x, r.y) - r.scale * 1.8, h <= v.weapons[this.weaponIndex].range && (q = c.getDirection(r.x, r.y, this.x, this.y), c.getAngleDist(q, this.dir) <= t.gatherAngle))) {
        let d = v.weapons[this.weaponIndex].steal;
        if (d && r.addResource) {
          d = Math.min(r.points || 0, d);
          this.addResource(3, d);
          r.addResource(3, -d);
        }
        let a = b;
        if (r.weaponIndex != null && v.weapons[r.weaponIndex].shield && c.getAngleDist(q + Math.PI, r.dir) <= t.shieldAngle) {
          a = v.weapons[r.weaponIndex].shield;
        }
        const e = v.weapons[this.weaponIndex].dmg;
        const f = e * (this.skin && this.skin.dmgMultO ? this.skin.dmgMultO : 1) * (this.tail && this.tail.dmgMultO ? this.tail.dmgMultO : 1);
        const g = (r.weightM || 1) * 0.3 + (v.weapons[this.weaponIndex].knock || 0);
        r.xVel += g * Oc(q);
        r.yVel += g * Zg(q);
        if (this.skin && this.skin.healD) {
          this.changeHealth(f * a * this.skin.healD, this);
        }
        if (this.tail && this.tail.healD) {
          this.changeHealth(f * a * this.tail.healD, this);
        }
        if (r.skin && r.skin.dmg) {
          this.changeHealth(-e * r.skin.dmg, r);
        }
        if (r.tail && r.tail.dmg) {
          this.changeHealth(-e * r.tail.dmg, r);
        }
        if (r.dmgOverTime && this.skin && this.skin.poisonDmg && (!r.skin || !r.skin.poisonRes)) {
          r.dmgOverTime.dmg = this.skin.poisonDmg;
          r.dmgOverTime.time = this.skin.poisonTime || 1;
          r.dmgOverTime.doer = this;
        }
        if (r.dmgOverTime && i && (!r.skin || !r.skin.poisonRes)) {
          r.dmgOverTime.dmg = 5;
          r.dmgOverTime.time = 5;
          r.dmgOverTime.doer = this;
        }
        if (r.skin && r.skin.dmgK) {
          this.xVel -= r.skin.dmgK * Oc(q);
          this.yVel -= r.skin.dmgK * Zg(q);
        }
        r.changeHealth(-f * a, this, this);
      }
    }
    this.sendAnimation(a ? 1 : 0);
  };
  this.hitVolcano = function (c) {
    const a = 5 + Math.round(c / 3.5);
    this.addResource(2, a);
    this.addResource(3, a);
  };
  this.sendAnimation = function (c) {
    for (let a = 0; a < f.length; ++a) {
      if (this.sentTo[f[a].id] && this.canSee(f[a])) {
        h.send(f[a].id, "K", this.sid, c ? 1 : 0, this.weaponIndex);
      }
    }
  };
  let m = 0;
  let n = 0;
  this.animate = function (b) {
    if (this.animTime > 0) {
      this.animTime -= b;
      if (this.animTime <= 0) {
        this.animTime = 0;
        this.dirPlus = 0;
        m = 0;
        n = 0;
      } else if (n == 0) {
        m += b / (this.animSpeed * t.hitReturnRatio);
        this.dirPlus = c.lerp(0, this.targetAngle, Math.min(1, m));
        if (m >= 1) {
          m = 1;
          n = 1;
        }
      } else {
        m -= b / (this.animSpeed * (1 - t.hitReturnRatio));
        this.dirPlus = c.lerp(0, this.targetAngle, Math.max(0, m));
      }
    }
  };
  this.startAnim = function (c, a) {
    this.animTime = this.animSpeed = v.weapons[a].speed;
    this.targetAngle = c ? -t.hitAngle : -Math.PI;
    m = 0;
    n = 0;
  };
  this.canSee = function (c) {
    if (!c || c.skin && c.skin.invisTimer && c.noMovTimer >= c.skin.invisTimer) {
      return false;
    }
    const a = Yg(c.x - this.x) - c.scale;
    const b = Yg(c.y - this.y) - c.scale;
    return a <= t.maxScreenWidth / 2 * 1.3 && b <= t.maxScreenHeight / 2 * 1.3;
  };
}
const Rc = [{
  id: 45,
  name: "Shame!",
  dontSell: true,
  price: 0,
  scale: 120,
  desc: "hacks are for losers"
}, {
  id: 51,
  name: "Moo Cap",
  price: 0,
  scale: 120,
  desc: "coolest mooer around"
}, {
  id: 50,
  name: "Apple Cap",
  price: 0,
  scale: 120,
  desc: "apple farms remembers"
}, {
  id: 28,
  name: "Moo Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 29,
  name: "Pig Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 30,
  name: "Fluff Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 36,
  name: "Pandou Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 37,
  name: "Bear Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 38,
  name: "Monkey Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 44,
  name: "Polar Head",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 35,
  name: "Fez Hat",
  price: 0,
  scale: 120,
  desc: "no effect"
}, {
  id: 42,
  name: "Enigma Hat",
  price: 0,
  scale: 120,
  desc: "join the enigma army"
}, {
  id: 43,
  name: "Blitz Hat",
  price: 0,
  scale: 120,
  desc: "hey everybody i'm blitz"
}, {
  id: 49,
  name: "Bob XIII Hat",
  price: 0,
  scale: 120,
  desc: "like and subscribe"
}, {
  id: 57,
  name: "Pumpkin",
  price: 50,
  scale: 120,
  desc: "Spooooky"
}, {
  id: 8,
  name: "Bummle Hat",
  price: 100,
  scale: 120,
  desc: "no effect"
}, {
  id: 2,
  name: "Straw Hat",
  price: 500,
  scale: 120,
  desc: "no effect"
}, {
  id: 15,
  name: "Winter Cap",
  price: 600,
  scale: 120,
  desc: "allows you to move at normal speed in snow",
  coldM: 1
}, {
  id: 5,
  name: "Cowboy Hat",
  price: 1000,
  scale: 120,
  desc: "no effect"
}, {
  id: 4,
  name: "Ranger Hat",
  price: 2000,
  scale: 120,
  desc: "no effect"
}, {
  id: 18,
  name: "Explorer Hat",
  price: 2000,
  scale: 120,
  desc: "no effect"
}, {
  id: 31,
  name: "Flipper Hat",
  price: 2500,
  scale: 120,
  desc: "have more control while in water",
  watrImm: true
}, {
  id: 1,
  name: "Marksman Cap",
  price: 3000,
  scale: 120,
  desc: "increases arrow speed and range",
  aMlt: 1.3
}, {
  id: 10,
  name: "Bush Gear",
  price: 3000,
  scale: 160,
  desc: "allows you to disguise yourself as a bush"
}, {
  id: 48,
  name: "Halo",
  price: 3000,
  scale: 120,
  desc: "no effect"
}, {
  id: 6,
  name: "Soldier Helmet",
  price: 4000,
  scale: 120,
  desc: "reduces damage taken but slows movement",
  spdMult: 0.94,
  dmgMult: 0.75
}, {
  id: 23,
  name: "Anti Venom Gear",
  price: 4000,
  scale: 120,
  desc: "makes you immune to poison",
  poisonRes: 1
}, {
  id: 13,
  name: "Medic Gear",
  price: 5000,
  scale: 110,
  desc: "slowly regenerates health over time",
  healthRegen: 3
}, {
  id: 9,
  name: "Miners Helmet",
  price: 5000,
  scale: 120,
  desc: "earn 1 extra gold per resource",
  extraGold: 1
}, {
  id: 32,
  name: "Musketeer Hat",
  price: 5000,
  scale: 120,
  desc: "reduces cost of projectiles",
  projCost: 0.5
}, {
  id: 7,
  name: "Bull Helmet",
  price: 6000,
  scale: 120,
  desc: "increases damage done but drains health",
  healthRegen: -5,
  dmgMultO: 1.5,
  spdMult: 0.96
}, {
  id: 22,
  name: "Emp Helmet",
  price: 6000,
  scale: 120,
  desc: "turrets won't attack but you move slower",
  antiTurret: 1,
  spdMult: 0.7
}, {
  id: 12,
  name: "Booster Hat",
  price: 6000,
  scale: 120,
  desc: "increases your movement speed",
  spdMult: 1.16
}, {
  id: 26,
  name: "Barbarian Armor",
  price: 8000,
  scale: 120,
  desc: "knocks back enemies that attack you",
  dmgK: 0.6
}, {
  id: 21,
  name: "Plague Mask",
  price: 10000,
  scale: 120,
  desc: "melee attacks deal poison damage",
  poisonDmg: 5,
  poisonTime: 6
}, {
  id: 46,
  name: "Bull Mask",
  price: 10000,
  scale: 120,
  desc: "bulls won't target you unless you attack them",
  bullRepel: 1
}, {
  id: 14,
  name: "Windmill Hat",
  topSprite: true,
  price: 10000,
  scale: 120,
  desc: "generates points while worn",
  pps: 1.5
}, {
  id: 11,
  name: "Spike Gear",
  topSprite: true,
  price: 10000,
  scale: 120,
  desc: "deal damage to players that damage you",
  dmg: 0.45
}, {
  id: 53,
  name: "Turret Gear",
  topSprite: true,
  price: 10000,
  scale: 120,
  desc: "you become a walking turret",
  turret: {
    proj: 1,
    range: 700,
    rate: 2500
  },
  spdMult: 0.7
}, {
  id: 20,
  name: "Samurai Armor",
  price: 12000,
  scale: 120,
  desc: "increased attack speed and fire rate",
  atkSpd: 0.78
}, {
  id: 58,
  name: "Dark Knight",
  price: 12000,
  scale: 120,
  desc: "restores health when you deal damage",
  healD: 0.4
}, {
  id: 27,
  name: "Scavenger Gear",
  price: 15000,
  scale: 120,
  desc: "earn double points for each kill",
  kScrM: 2
}, {
  id: 40,
  name: "Tank Gear",
  price: 15000,
  scale: 120,
  desc: "increased damage to buildings but slower movement",
  spdMult: 0.3,
  bDmg: 3.3
}, {
  id: 52,
  name: "Thief Gear",
  price: 15000,
  scale: 120,
  desc: "steal half of a players gold when you kill them",
  goldSteal: 0.5
}, {
  id: 55,
  name: "Bloodthirster",
  price: 20000,
  scale: 120,
  desc: "Restore Health when dealing damage. And increased damage",
  healD: 0.25,
  dmgMultO: 1.2
}, {
  id: 56,
  name: "Assassin Gear",
  price: 20000,
  scale: 120,
  desc: "Go invisible when not moving. Can't eat. Increased speed",
  noEat: true,
  spdMult: 1.1,
  invisTimer: 1000
}];
const _c = [{
  id: 12,
  name: "Snowball",
  price: 1000,
  scale: 105,
  xOff: 18,
  desc: "no effect"
}, {
  id: 9,
  name: "Tree Cape",
  price: 1000,
  scale: 90,
  desc: "no effect"
}, {
  id: 10,
  name: "Stone Cape",
  price: 1000,
  scale: 90,
  desc: "no effect"
}, {
  id: 3,
  name: "Cookie Cape",
  price: 1500,
  scale: 90,
  desc: "no effect"
}, {
  id: 8,
  name: "Cow Cape",
  price: 2000,
  scale: 90,
  desc: "no effect"
}, {
  id: 11,
  name: "Monkey Tail",
  price: 2000,
  scale: 97,
  xOff: 25,
  desc: "Super speed but reduced damage",
  spdMult: 1.35,
  dmgMultO: 0.2
}, {
  id: 17,
  name: "Apple Basket",
  price: 3000,
  scale: 80,
  xOff: 12,
  desc: "slowly regenerates health over time",
  healthRegen: 1
}, {
  id: 6,
  name: "Winter Cape",
  price: 3000,
  scale: 90,
  desc: "no effect"
}, {
  id: 4,
  name: "Skull Cape",
  price: 4000,
  scale: 90,
  desc: "no effect"
}, {
  id: 5,
  name: "Dash Cape",
  price: 5000,
  scale: 90,
  desc: "no effect"
}, {
  id: 2,
  name: "Dragon Cape",
  price: 6000,
  scale: 90,
  desc: "no effect"
}, {
  id: 1,
  name: "Super Cape",
  price: 8000,
  scale: 90,
  desc: "no effect"
}, {
  id: 7,
  name: "Troll Cape",
  price: 8000,
  scale: 90,
  desc: "no effect"
}, {
  id: 14,
  name: "Thorns",
  price: 10000,
  scale: 115,
  xOff: 20,
  desc: "no effect"
}, {
  id: 15,
  name: "Blockades",
  price: 10000,
  scale: 95,
  xOff: 15,
  desc: "no effect"
}, {
  id: 20,
  name: "Devils Tail",
  price: 10000,
  scale: 95,
  xOff: 20,
  desc: "no effect"
}, {
  id: 16,
  name: "Sawblade",
  price: 12000,
  scale: 90,
  spin: true,
  xOff: 0,
  desc: "deal damage to players that damage you",
  dmg: 0.15
}, {
  id: 13,
  name: "Angel Wings",
  price: 15000,
  scale: 138,
  xOff: 22,
  desc: "slowly regenerates health over time",
  healthRegen: 3
}, {
  id: 19,
  name: "Shadow Wings",
  price: 15000,
  scale: 138,
  xOff: 22,
  desc: "increased movement speed",
  spdMult: 1.1
}, {
  id: 18,
  name: "Blood Wings",
  price: 20000,
  scale: 178,
  xOff: 26,
  desc: "restores health when you deal damage",
  healD: 0.2
}, {
  id: 21,
  name: "Corrupt X Wings",
  price: 20000,
  scale: 178,
  xOff: 26,
  desc: "deal damage to players that damage you",
  dmg: 0.25
}];
const Bc = {
  hats: Rc,
  accessories: _c
};
function zc(j, a, n, c, d, e, o) {
  this.init = function (g, a, b, c, d, e, f, h, i) {
    this.active = true;
    this.indx = g;
    this.x = a;
    this.y = b;
    this.dir = c;
    this.skipMov = true;
    this.speed = d;
    this.dmg = e;
    this.scale = h;
    this.range = f;
    this.owner = i;
    if (o) {
      this.sentTo = {};
    }
  };
  const f = [];
  let g;
  this.update = function (b) {
    if (this.active) {
      let i = this.speed * b;
      let k;
      if (this.skipMov) {
        this.skipMov = false;
      } else {
        this.x += i * Math.cos(this.dir);
        this.y += i * Math.sin(this.dir);
        this.range -= i;
        if (this.range <= 0) {
          this.x += this.range * Math.cos(this.dir);
          this.y += this.range * Math.sin(this.dir);
          i = 1;
          this.range = 0;
          this.active = false;
        }
      }
      if (o) {
        for (var h = 0; h < j.length; ++h) {
          if (!this.sentTo[j[h].id] && j[h].canSee(this)) {
            this.sentTo[j[h].id] = 1;
            o.send(j[h].id, "X", e.fixTo(this.x, 1), e.fixTo(this.y, 1), e.fixTo(this.dir, 2), e.fixTo(this.range, 1), this.speed, this.indx, this.layer, this.sid);
          }
        }
        f.length = 0;
        for (var h = 0; h < j.length + a.length; ++h) {
          g = j[h] || a[h - j.length];
          if (g.alive && g != this.owner && (!this.owner.team || g.team != this.owner.team) && e.lineInRect(g.x - g.scale, g.y - g.scale, g.x + g.scale, g.y + g.scale, this.x, this.y, this.x + i * Math.cos(this.dir), this.y + i * Math.sin(this.dir))) {
            f.push(g);
          }
        }
        const l = n.getGridArrays(this.x, this.y, this.scale);
        for (let c = 0; c < l.length; ++c) {
          for (let a = 0; a < l[c].length; ++a) {
            g = l[c][a];
            k = g.getScale();
            if (g.active && this.ignoreObj != g.sid && this.layer <= g.layer && f.indexOf(g) < 0 && !g.ignoreCollision && e.lineInRect(g.x - k, g.y - k, g.x + k, g.y + k, this.x, this.y, this.x + i * Math.cos(this.dir), this.y + i * Math.sin(this.dir))) {
              f.push(g);
            }
          }
        }
        if (f.length > 0) {
          let g = null;
          let a = null;
          let b = null;
          for (var h = 0; h < f.length; ++h) {
            b = e.getDistance(this.x, this.y, f[h].x, f[h].y);
            if (a == null || b < a) {
              a = b;
              g = f[h];
            }
          }
          if (g.isPlayer || g.isAI) {
            const b = (g.weightM || 1) * 0.3;
            g.xVel += b * Math.cos(this.dir);
            g.yVel += b * Math.sin(this.dir);
            if (g.weaponIndex == null || !c.weapons[g.weaponIndex].shield || e.getAngleDist(this.dir + Math.PI, g.dir) > d.shieldAngle) {
              g.changeHealth(-this.dmg, this.owner, this.owner);
            }
          } else {
            if (g.projDmg && g.health && g.changeHealth(-this.dmg)) {
              n.disableObj(g);
            }
            for (var h = 0; h < j.length; ++h) {
              if (j[h].active) {
                if (g.sentTo[j[h].id]) {
                  if (g.active) {
                    if (j[h].canSee(g)) {
                      o.send(j[h].id, "L", e.fixTo(this.dir, 2), g.sid);
                    }
                  } else {
                    o.send(j[h].id, "Q", g.sid);
                  }
                }
                if (!g.active && g.owner == j[h]) {
                  j[h].changeItemCount(g.group.id, -1);
                }
              }
            }
          }
          this.active = false;
          for (var h = 0; h < j.length; ++h) {
            if (this.sentTo[j[h].id]) {
              o.send(j[h].id, "Y", this.sid, e.fixTo(a, 1));
            }
          }
        }
      }
    }
  };
}
var gi = {};
var Hc = {
  get exports() {
    return gi;
  },
  set exports(b) {
    gi = b;
  }
};
var hi = {};
var Fc = {
  get exports() {
    return hi;
  },
  set exports(b) {
    hi = b;
  }
};
(function () {
  var g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var d = {
    rotl: function (c, a) {
      return c << a | c >>> 32 - a;
    },
    rotr: function (c, a) {
      return c << 32 - a | c >>> a;
    },
    endian: function (b) {
      if (b.constructor == Number) {
        return d.rotl(b, 8) & 16711935 | d.rotl(b, 24) & 4278255360;
      }
      for (var a = 0; a < b.length; a++) {
        b[a] = d.endian(b[a]);
      }
      return b;
    },
    randomBytes: function (c) {
      var d = [];
      for (; c > 0; c--) {
        d.push(Math.floor(Math.random() * 256));
      }
      return d;
    },
    bytesToWords: function (e) {
      var a = [];
      for (var b = 0, f = 0; b < e.length; b++, f += 8) {
        a[f >>> 5] |= e[b] << 24 - f % 32;
      }
      return a;
    },
    wordsToBytes: function (d) {
      var a = [];
      for (var b = 0; b < d.length * 32; b += 8) {
        a.push(d[b >>> 5] >>> 24 - b % 32 & 255);
      }
      return a;
    },
    bytesToHex: function (d) {
      var a = [];
      for (var b = 0; b < d.length; b++) {
        a.push((d[b] >>> 4).toString(16));
        a.push((d[b] & 15).toString(16));
      }
      return a.join("");
    },
    hexToBytes: function (d) {
      var a = [];
      for (var b = 0; b < d.length; b += 2) {
        a.push(parseInt(d.substr(b, 2), 16));
      }
      return a;
    },
    bytesToBase64: function (a) {
      var b = [];
      for (var c = 0; c < a.length; c += 3) {
        var h = a[c] << 16 | a[c + 1] << 8 | a[c + 2];
        for (var i = 0; i < 4; i++) {
          if (c * 8 + i * 6 <= a.length * 8) {
            b.push(g.charAt(h >>> (3 - i) * 6 & 63));
          } else {
            b.push("=");
          }
        }
      }
      return b.join("");
    },
    base64ToBytes: function (a) {
      a = a.replace(/[^A-Z0-9+\/]/ig, "");
      var f = [];
      for (var c = 0, h = 0; c < a.length; h = ++c % 4) {
        if (h != 0) {
          f.push((g.indexOf(a.charAt(c - 1)) & Math.pow(2, h * -2 + 8) - 1) << h * 2 | g.indexOf(a.charAt(c)) >>> 6 - h * 2);
        }
      }
      return f;
    }
  };
  Fc.exports = d;
})();
var li = {
  utf8: {
    stringToBytes: function (b) {
      return li.bin.stringToBytes(unescape(encodeURIComponent(b)));
    },
    bytesToString: function (b) {
      return decodeURIComponent(escape(li.bin.bytesToString(b)));
    }
  },
  bin: {
    stringToBytes: function (d) {
      var a = [];
      for (var b = 0; b < d.length; b++) {
        a.push(d.charCodeAt(b) & 255);
      }
      return a;
    },
    bytesToString: function (d) {
      var a = [];
      for (var b = 0; b < d.length; b++) {
        a.push(String.fromCharCode(d[b]));
      }
      return a.join("");
    }
  }
};
var Vc = li;
function ni(b) {
  return b != null && (qi(b) || Uc(b) || !!b._isBuffer);
}
function qi(b) {
  return !!b.constructor && typeof b.constructor.isBuffer == "function" && b.constructor.isBuffer(b);
}
function Uc(b) {
  return typeof b.readFloatLE == "function" && typeof b.slice == "function" && qi(b.slice(0, 0));
}
(function () {
  var w = hi;
  var a = Vc.utf8;
  var b = ni;
  var c = Vc.bin;
  function d(e, x) {
    if (e.constructor == String) {
      if (x && x.encoding === "binary") {
        e = c.stringToBytes(e);
      } else {
        e = a.stringToBytes(e);
      }
    } else if (b(e)) {
      e = Array.prototype.slice.call(e, 0);
    } else if (!Array.isArray(e) && e.constructor !== Uint8Array) {
      e = e.toString();
    }
    for (var g = w.bytesToWords(e), h = e.length * 8, i = 1732584193, y = -271733879, z = -1732584194, A = 271733878, B = 0; B < g.length; B++) {
      g[B] = (g[B] << 8 | g[B] >>> 24) & 16711935 | (g[B] << 24 | g[B] >>> 8) & 4278255360;
    }
    g[h >>> 5] |= 128 << h % 32;
    g[(h + 64 >>> 9 << 4) + 14] = h;
    var C = d._ff;
    var o = d._gg;
    var p = d._hh;
    var q = d._ii;
    for (var B = 0; B < g.length; B += 16) {
      var r = i;
      var D = y;
      var E = z;
      var F = A;
      i = C(i, y, z, A, g[B + 0], 7, -680876936);
      A = C(A, i, y, z, g[B + 1], 12, -389564586);
      z = C(z, A, i, y, g[B + 2], 17, 606105819);
      y = C(y, z, A, i, g[B + 3], 22, -1044525330);
      i = C(i, y, z, A, g[B + 4], 7, -176418897);
      A = C(A, i, y, z, g[B + 5], 12, 1200080426);
      z = C(z, A, i, y, g[B + 6], 17, -1473231341);
      y = C(y, z, A, i, g[B + 7], 22, -45705983);
      i = C(i, y, z, A, g[B + 8], 7, 1770035416);
      A = C(A, i, y, z, g[B + 9], 12, -1958414417);
      z = C(z, A, i, y, g[B + 10], 17, -42063);
      y = C(y, z, A, i, g[B + 11], 22, -1990404162);
      i = C(i, y, z, A, g[B + 12], 7, 1804603682);
      A = C(A, i, y, z, g[B + 13], 12, -40341101);
      z = C(z, A, i, y, g[B + 14], 17, -1502002290);
      y = C(y, z, A, i, g[B + 15], 22, 1236535329);
      i = o(i, y, z, A, g[B + 1], 5, -165796510);
      A = o(A, i, y, z, g[B + 6], 9, -1069501632);
      z = o(z, A, i, y, g[B + 11], 14, 643717713);
      y = o(y, z, A, i, g[B + 0], 20, -373897302);
      i = o(i, y, z, A, g[B + 5], 5, -701558691);
      A = o(A, i, y, z, g[B + 10], 9, 38016083);
      z = o(z, A, i, y, g[B + 15], 14, -660478335);
      y = o(y, z, A, i, g[B + 4], 20, -405537848);
      i = o(i, y, z, A, g[B + 9], 5, 568446438);
      A = o(A, i, y, z, g[B + 14], 9, -1019803690);
      z = o(z, A, i, y, g[B + 3], 14, -187363961);
      y = o(y, z, A, i, g[B + 8], 20, 1163531501);
      i = o(i, y, z, A, g[B + 13], 5, -1444681467);
      A = o(A, i, y, z, g[B + 2], 9, -51403784);
      z = o(z, A, i, y, g[B + 7], 14, 1735328473);
      y = o(y, z, A, i, g[B + 12], 20, -1926607734);
      i = p(i, y, z, A, g[B + 5], 4, -378558);
      A = p(A, i, y, z, g[B + 8], 11, -2022574463);
      z = p(z, A, i, y, g[B + 11], 16, 1839030562);
      y = p(y, z, A, i, g[B + 14], 23, -35309556);
      i = p(i, y, z, A, g[B + 1], 4, -1530992060);
      A = p(A, i, y, z, g[B + 4], 11, 1272893353);
      z = p(z, A, i, y, g[B + 7], 16, -155497632);
      y = p(y, z, A, i, g[B + 10], 23, -1094730640);
      i = p(i, y, z, A, g[B + 13], 4, 681279174);
      A = p(A, i, y, z, g[B + 0], 11, -358537222);
      z = p(z, A, i, y, g[B + 3], 16, -722521979);
      y = p(y, z, A, i, g[B + 6], 23, 76029189);
      i = p(i, y, z, A, g[B + 9], 4, -640364487);
      A = p(A, i, y, z, g[B + 12], 11, -421815835);
      z = p(z, A, i, y, g[B + 15], 16, 530742520);
      y = p(y, z, A, i, g[B + 2], 23, -995338651);
      i = q(i, y, z, A, g[B + 0], 6, -198630844);
      A = q(A, i, y, z, g[B + 7], 10, 1126891415);
      z = q(z, A, i, y, g[B + 14], 15, -1416354905);
      y = q(y, z, A, i, g[B + 5], 21, -57434055);
      i = q(i, y, z, A, g[B + 12], 6, 1700485571);
      A = q(A, i, y, z, g[B + 3], 10, -1894986606);
      z = q(z, A, i, y, g[B + 10], 15, -1051523);
      y = q(y, z, A, i, g[B + 1], 21, -2054922799);
      i = q(i, y, z, A, g[B + 8], 6, 1873313359);
      A = q(A, i, y, z, g[B + 15], 10, -30611744);
      z = q(z, A, i, y, g[B + 6], 15, -1560198380);
      y = q(y, z, A, i, g[B + 13], 21, 1309151649);
      i = q(i, y, z, A, g[B + 4], 6, -145523070);
      A = q(A, i, y, z, g[B + 11], 10, -1120210379);
      z = q(z, A, i, y, g[B + 2], 15, 718787259);
      y = q(y, z, A, i, g[B + 9], 21, -343485551);
      i = i + r >>> 0;
      y = y + D >>> 0;
      z = z + E >>> 0;
      A = A + F >>> 0;
    }
    return w.endian([i, y, z, A]);
  }
  d._ff = function (i, a, b, c, d, e, f) {
    var g = i + (a & b | ~a & c) + (d >>> 0) + f;
    return (g << e | g >>> 32 - e) + a;
  };
  d._gg = function (i, a, b, c, d, e, f) {
    var g = i + (a & c | b & ~c) + (d >>> 0) + f;
    return (g << e | g >>> 32 - e) + a;
  };
  d._hh = function (i, a, b, c, d, e, f) {
    var g = i + (a ^ b ^ c) + (d >>> 0) + f;
    return (g << e | g >>> 32 - e) + a;
  };
  d._ii = function (i, a, b, c, d, e, f) {
    var g = i + (b ^ (a | ~c)) + (d >>> 0) + f;
    return (g << e | g >>> 32 - e) + a;
  };
  d._blocksize = 16;
  d._digestsize = 16;
  Hc.exports = function (a, b) {
    if (a == null) {
      throw new Error("Illegal argument " + a);
    }
    var e = w.wordsToBytes(d(a, b));
    if (b && b.asBytes) {
      return e;
    } else if (b && b.asString) {
      return c.bytesToString(e);
    } else {
      return w.bytesToHex(e);
    }
  };
})();
var si;
var Lc;
function ji() {
  if (Lc) {
    return si;
  }
  Lc = 1;
  function d(g, a, b, c, d, e) {
    return {
      tag: g,
      key: a,
      attrs: b,
      children: c,
      text: d,
      dom: e,
      domSize: undefined,
      state: undefined,
      events: undefined,
      instance: undefined
    };
  }
  d.normalize = function (a) {
    if (Array.isArray(a)) {
      return d("[", undefined, undefined, d.normalizeChildren(a), undefined, undefined);
    } else if (a == null || typeof a == "boolean") {
      return null;
    } else if (typeof a == "object") {
      return a;
    } else {
      return d("#", undefined, undefined, String(a), undefined, undefined);
    }
  };
  d.normalizeChildren = function (a) {
    var b = [];
    if (a.length) {
      var c = a[0] != null && a[0].key != null;
      for (var f = 1; f < a.length; f++) {
        if ((a[f] != null && a[f].key != null) !== c) {
          throw new TypeError(c && (a[f] != null || typeof a[f] == "boolean") ? "In fragments, vnodes must either all have keys or none have keys. You may wish to consider using an explicit keyed empty fragment, m.fragment({key: ...}), instead of a hole." : "In fragments, vnodes must either all have keys or none have keys.");
        }
      }
      for (var f = 0; f < a.length; f++) {
        b[f] = d.normalize(a[f]);
      }
    }
    return b;
  };
  si = d;
  return si;
}
var zi = ji();
function Ge() {
  var d = arguments[this];
  var e = this + 1;
  var f;
  if (d == null) {
    d = {};
  } else if (typeof d != "object" || d.tag != null || Array.isArray(d)) {
    d = {};
    e = this;
  }
  if (arguments.length === e + 1) {
    f = arguments[e];
    if (!Array.isArray(f)) {
      f = [f];
    }
  } else {
    for (f = []; e < arguments.length;) {
      f.push(arguments[e++]);
    }
  }
  return zi("", d.key, d, f);
}
var Nc = {}.hasOwnProperty;
var Bi = ji();
var Ci = Ge;
var qc = Nc;
var Wc = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
var Fi = {};
function Xc(c) {
  for (var a in c) {
    if (qc.call(c, a)) {
      return false;
    }
  }
  return true;
}
function Gi(i) {
  for (var a, j = "div", k = [], d = {}; a = Wc.exec(i);) {
    var e = a[1];
    var l = a[2];
    if (e === "" && l !== "") {
      j = l;
    } else if (e === "#") {
      d.id = l;
    } else if (e === ".") {
      k.push(l);
    } else if (a[3][0] === "[") {
      var m = a[6];
      m &&= m.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\");
      if (a[4] === "class") {
        k.push(m);
      } else {
        d[a[4]] = m === "" ? m : m || true;
      }
    }
  }
  if (k.length > 0) {
    d.className = k.join(" ");
  }
  return Fi[i] = {
    tag: j,
    attrs: d
  };
}
function Hi(h, a) {
  var b = a.attrs;
  var i = qc.call(b, "class");
  var d = i ? b.class : b.className;
  a.tag = h.tag;
  a.attrs = {};
  if (!Xc(h.attrs) && !Xc(b)) {
    var e = {};
    for (var f in b) {
      if (qc.call(b, f)) {
        e[f] = b[f];
      }
    }
    b = e;
  }
  for (var f in h.attrs) {
    if (qc.call(h.attrs, f) && f !== "className" && !qc.call(b, f)) {
      b[f] = h.attrs[f];
    }
  }
  if (d != null || h.attrs.className != null) {
    b.className = d != null ? h.attrs.className != null ? String(h.attrs.className) + " " + String(d) : d : h.attrs.className ?? null;
  }
  if (i) {
    b.class = null;
  }
  for (var f in b) {
    if (qc.call(b, f) && f !== "key") {
      a.attrs = b;
      break;
    }
  }
  return a;
}
function Gc(c) {
  if (c == null || typeof c != "string" && typeof c != "function" && typeof c.view != "function") {
    throw Error("The selector must be either a string or a component.");
  }
  var a = Ci.apply(1, arguments);
  if (typeof c == "string" && (a.children = Bi.normalizeChildren(a.children), c !== "[")) {
    return Hi(Fi[c] || Gi(c), a);
  } else {
    a.tag = c;
    return a;
  }
}
var Yc = Gc;
var $c = ji();
function Ji(b) {
  if (b == null) {
    b = "";
  }
  return $c("<", undefined, undefined, b, undefined, undefined);
}
var Kc = ji();
var Jc = Ge;
function Qc() {
  var b = Jc.apply(0, arguments);
  b.tag = "[";
  b.children = Kc.normalizeChildren(b.children);
  return b;
}
var Zc = Yc;
Zc.trust = Ji;
Zc.fragment = Qc;
var jc = Zc;
var Ki = {};
var eh = {
  get exports() {
    return Ki;
  },
  set exports(b) {
    Ki = b;
  }
};
var yi;
var Li;
function Ni() {
  if (Li) {
    return yi;
  }
  Li = 1;
  function l(a) {
    if (!(this instanceof l)) {
      throw new Error("Promise must be called with 'new'.");
    }
    if (typeof a != "function") {
      throw new TypeError("executor must be a function.");
    }
    var b = this;
    var m = [];
    var d = [];
    var e = h(m, true);
    var f = h(d, false);
    var g = b._instance = {
      resolvers: m,
      rejectors: d
    };
    var c = typeof setImmediate == "function" ? setImmediate : setTimeout;
    function h(e, a) {
      return function k(h) {
        var j;
        try {
          if (a && h != null && (typeof h == "object" || typeof h == "function") && typeof (j = h.then) == "function") {
            if (h === b) {
              throw new TypeError("Promise can't be resolved with itself.");
            }
            i(j.bind(h));
          } else {
            c(function () {
              if (!a && e.length === 0) {
                console.error("Possible unhandled promise rejection:", h);
              }
              for (var b = 0; b < e.length; b++) {
                e[b](h);
              }
              m.length = 0;
              d.length = 0;
              g.state = a;
              g.retry = function () {
                k(h);
              };
            });
          }
        } catch (b) {
          f(b);
        }
      };
    }
    function i(g) {
      var h = 0;
      function a(b) {
        return function (a) {
          if (h++ <= 0) {
            b(a);
          }
        };
      }
      var c = a(f);
      try {
        g(a(e), c);
      } catch (b) {
        c(b);
      }
    }
    i(a);
  }
  l.prototype.then = function (a, b) {
    var c = this;
    var j = c._instance;
    function d(g, a, h, b) {
      a.push(function (a) {
        if (typeof g != "function") {
          h(a);
        } else {
          try {
            e(g(a));
          } catch (b) {
            if (f) {
              f(b);
            }
          }
        }
      });
      if (typeof j.retry == "function" && b === j.state) {
        j.retry();
      }
    }
    var e;
    var f;
    var k = new l(function (c, a) {
      e = c;
      f = a;
    });
    d(a, j.resolvers, e, true);
    d(b, j.rejectors, f, false);
    return k;
  };
  l.prototype.catch = function (b) {
    return this.then(null, b);
  };
  l.prototype.finally = function (a) {
    return this.then(function (b) {
      return l.resolve(a()).then(function () {
        return b;
      });
    }, function (b) {
      return l.resolve(a()).then(function () {
        return l.reject(b);
      });
    });
  };
  l.resolve = function (c) {
    if (c instanceof l) {
      return c;
    } else {
      return new l(function (b) {
        b(c);
      });
    }
  };
  l.reject = function (d) {
    return new l(function (b, a) {
      a(d);
    });
  };
  l.all = function (i) {
    return new l(function (b, a) {
      var c = i.length;
      var d = 0;
      var h = [];
      if (i.length === 0) {
        b([]);
      } else {
        for (var f = 0; f < i.length; f++) {
          (function (e) {
            function f(a) {
              d++;
              h[e] = a;
              if (d === c) {
                b(h);
              }
            }
            if (i[e] != null && (typeof i[e] == "object" || typeof i[e] == "function") && typeof i[e].then == "function") {
              i[e].then(f, a);
            } else {
              f(i[e]);
            }
          })(f);
        }
      }
    });
  };
  l.race = function (e) {
    return new l(function (b, a) {
      for (var c = 0; c < e.length; c++) {
        e[c].then(b, a);
      }
    });
  };
  yi = l;
  return yi;
}
var Pi = Ni();
if (typeof window !== "undefined") {
  if (typeof window.Promise === "undefined") {
    window.Promise = Pi;
  } else {
    window.Promise.prototype.finally ||= Pi.prototype.finally;
  }
  eh.exports = window.Promise;
} else if (typeof Ea !== "undefined") {
  if (typeof Ea.Promise === "undefined") {
    Ea.Promise = Pi;
  } else {
    Ea.Promise.prototype.finally ||= Pi.prototype.finally;
  }
  eh.exports = Ea.Promise;
} else {
  eh.exports = Pi;
}
var Qi;
var Ui;
function Vi() {
  if (Ui) {
    return Qi;
  }
  Ui = 1;
  var m = ji();
  Qi = function (a) {
    var da = a && a.document;
    var ea;
    var b = {
      svg: "http://www.w3.org/2000/svg",
      math: "http://www.w3.org/1998/Math/MathML"
    };
    function fa(c) {
      return c.attrs && c.attrs.xmlns || b[c.tag];
    }
    function ga(c, a) {
      if (c.state !== a) {
        throw new Error("'vnode.state' must not be modified.");
      }
    }
    function ha(c) {
      var a = c.state;
      try {
        return this.apply(a, arguments);
      } finally {
        ga(c, a);
      }
    }
    function ia() {
      try {
        return da.activeElement;
      } catch {
        return null;
      }
    }
    function ja(j, a, b, c, d, e, f) {
      for (var g = b; g < c; g++) {
        var k = a[g];
        if (k != null) {
          h(j, k, d, f, e);
        }
      }
    }
    function h(h, a, b, c, d) {
      var e = a.tag;
      if (typeof e == "string") {
        a.state = {};
        if (a.attrs != null) {
          U(a.attrs, a, b);
        }
        switch (e) {
          case "#":
            f(h, a, d);
            break;
          case "<":
            g(h, a, c, d);
            break;
          case "[":
            i(h, a, b, c, d);
            break;
          default:
            j(h, a, b, c, d);
        }
      } else {
        l(h, a, b, c, d);
      }
    }
    function f(c, a, b) {
      a.dom = da.createTextNode(a.children);
      z(c, a.dom, b);
    }
    var c = {
      caption: "table",
      thead: "table",
      tbody: "table",
      tfoot: "table",
      tr: "tbody",
      th: "tr",
      td: "tr",
      colgroup: "table",
      col: "colgroup"
    };
    function g(j, a, b, d) {
      var e = a.children.match(/^\s*?<(\w+)/im) || [];
      var f = da.createElement(c[e[1]] || "div");
      if (b === "http://www.w3.org/2000/svg") {
        f.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\">" + a.children + "</svg>";
        f = f.firstChild;
      } else {
        f.innerHTML = a.children;
      }
      a.dom = f.firstChild;
      a.domSize = f.childNodes.length;
      a.instance = [];
      var k = da.createDocumentFragment();
      for (var h; h = f.firstChild;) {
        a.instance.push(h);
        k.appendChild(h);
      }
      z(j, k, d);
    }
    function i(c, a, b, d, e) {
      var f = da.createDocumentFragment();
      if (a.children != null) {
        var g = a.children;
        ja(f, g, 0, g.length, b, null, d);
      }
      a.dom = f.firstChild;
      a.domSize = f.childNodes.length;
      z(c, f, e);
    }
    function j(c, a, b, d, f) {
      var g = a.tag;
      var h = a.attrs;
      var i = h && h.is;
      d = fa(a) || d;
      var j = d ? i ? da.createElementNS(d, g, {
        is: i
      }) : da.createElementNS(d, g) : i ? da.createElement(g, {
        is: i
      }) : da.createElement(g);
      a.dom = j;
      if (h != null) {
        G(a, h, d);
      }
      z(c, j, f);
      if (!A(a) && a.children != null) {
        var k = a.children;
        ja(j, k, 0, k.length, b, null, d);
        if (a.tag === "select" && h != null) {
          J(a, h);
        }
      }
    }
    function k(a, b) {
      var c;
      if (typeof a.tag.view == "function") {
        a.state = Object.create(a.tag);
        c = a.state.view;
        if (c.$$reentrantLock$$ != null) {
          return;
        }
        c.$$reentrantLock$$ = true;
      } else {
        a.state = undefined;
        c = a.tag;
        if (c.$$reentrantLock$$ != null) {
          return;
        }
        c.$$reentrantLock$$ = true;
        a.state = a.tag.prototype != null && typeof a.tag.prototype.view == "function" ? new a.tag(a) : a.tag(a);
      }
      U(a.state, a, b);
      if (a.attrs != null) {
        U(a.attrs, a, b);
      }
      a.instance = m.normalize(ha.call(a.state.view, a));
      if (a.instance === a) {
        throw Error("A view cannot return the vnode it received as argument");
      }
      c.$$reentrantLock$$ = null;
    }
    function l(f, a, b, c, d) {
      k(a, b);
      if (a.instance != null) {
        h(f, a.instance, b, c, d);
        a.dom = a.instance.dom;
        a.domSize = a.dom != null ? a.instance.domSize : 0;
      } else {
        a.domSize = 0;
      }
    }
    function n(j, a, b, c, d, k) {
      if (a !== b && (a != null || b != null)) {
        if (a == null || a.length === 0) {
          ja(j, b, 0, b.length, c, d, k);
        } else if (b == null || b.length === 0) {
          B(j, a, 0, a.length);
        } else {
          var f = a[0] != null && a[0].key != null;
          var g = b[0] != null && b[0].key != null;
          var t = 0;
          var z = 0;
          if (!f) {
            while (z < a.length && a[z] == null) {
              z++;
            }
          }
          if (!g) {
            while (t < b.length && b[t] == null) {
              t++;
            }
          }
          if (f !== g) {
            B(j, a, z, a.length);
            ja(j, b, t, b.length, c, d, k);
          } else if (g) {
            for (var D = a.length - 1, H = b.length - 1, I, L, M, N, O, P; D >= z && H >= t && (N = a[D], O = b[H], N.key === O.key);) {
              if (N !== O) {
                o(j, N, O, c, d, k);
              }
              if (O.dom != null) {
                d = O.dom;
              }
              D--;
              H--;
            }
            while (D >= z && H >= t && (L = a[z], M = b[t], L.key === M.key)) {
              z++;
              t++;
              if (L !== M) {
                o(j, L, M, c, w(a, z, d), k);
              }
            }
            while (D >= z && H >= t && t !== H && L.key === O.key && N.key === M.key) {
              P = w(a, z, d);
              x(j, N, P);
              if (N !== M) {
                o(j, N, M, c, P, k);
              }
              if (++t <= --H) {
                x(j, L, d);
              }
              if (L !== O) {
                o(j, L, O, c, d, k);
              }
              if (O.dom != null) {
                d = O.dom;
              }
              z++;
              D--;
              N = a[D];
              O = b[H];
              L = a[z];
              M = b[t];
            }
            while (D >= z && H >= t && N.key === O.key) {
              if (N !== O) {
                o(j, N, O, c, d, k);
              }
              if (O.dom != null) {
                d = O.dom;
              }
              D--;
              H--;
              N = a[D];
              O = b[H];
            }
            if (t > H) {
              B(j, a, z, D + 1);
            } else if (z > D) {
              ja(j, b, t, H + 1, c, d, k);
            } else {
              var Q = d;
              var R = H - t + 1;
              var S = new Array(R);
              var T = 0;
              var U = 0;
              var V = 2147483647;
              var W = 0;
              var I;
              var X;
              for (U = 0; U < R; U++) {
                S[U] = -1;
              }
              for (U = H; U >= t; U--) {
                if (I == null) {
                  I = e(a, z, D + 1);
                }
                O = b[U];
                var Y = I[O.key];
                if (Y != null) {
                  V = Y < V ? Y : -1;
                  S[U - t] = Y;
                  N = a[Y];
                  a[Y] = null;
                  if (N !== O) {
                    o(j, N, O, c, d, k);
                  }
                  if (O.dom != null) {
                    d = O.dom;
                  }
                  W++;
                }
              }
              d = Q;
              if (W !== D - z + 1) {
                B(j, a, z, D + 1);
              }
              if (W === 0) {
                ja(j, b, t, H + 1, c, d, k);
              } else if (V === -1) {
                X = v(S);
                T = X.length - 1;
                U = H;
                for (; U >= t; U--) {
                  M = b[U];
                  if (S[U - t] === -1) {
                    h(j, M, c, k, d);
                  } else if (X[T] === U - t) {
                    T--;
                  } else {
                    x(j, M, d);
                  }
                  if (M.dom != null) {
                    d = b[U].dom;
                  }
                }
              } else {
                for (U = H; U >= t; U--) {
                  M = b[U];
                  if (S[U - t] === -1) {
                    h(j, M, c, k, d);
                  }
                  if (M.dom != null) {
                    d = b[U].dom;
                  }
                }
              }
            }
          } else {
            var Z = a.length < b.length ? a.length : b.length;
            for (t = t < z ? t : z; t < Z; t++) {
              L = a[t];
              M = b[t];
              if (L !== M && (L != null || M != null)) {
                if (L == null) {
                  h(j, M, c, k, w(a, t + 1, d));
                } else if (M == null) {
                  C(j, L);
                } else {
                  o(j, L, M, c, w(a, t + 1, d), k);
                }
              }
            }
            if (a.length > Z) {
              B(j, a, t, a.length);
            }
            if (b.length > Z) {
              ja(j, b, t, b.length, c, d, k);
            }
          }
        }
      }
    }
    function o(i, a, b, c, d, e) {
      var f = a.tag;
      var g = b.tag;
      if (f === g) {
        b.state = a.state;
        b.events = a.events;
        if (W(b, a)) {
          return;
        }
        if (typeof f == "string") {
          if (b.attrs != null) {
            V(b.attrs, b, c);
          }
          switch (f) {
            case "#":
              p(a, b);
              break;
            case "<":
              q(i, a, b, e, d);
              break;
            case "[":
              r(i, a, b, c, d, e);
              break;
            default:
              s(a, b, c, e);
          }
        } else {
          t(i, a, b, c, d, e);
        }
      } else {
        C(i, a);
        h(i, b, c, e, d);
      }
    }
    function p(c, a) {
      if (c.children.toString() !== a.children.toString()) {
        c.dom.nodeValue = a.children;
      }
      a.dom = c.dom;
    }
    function q(f, a, b, c, d) {
      if (a.children !== b.children) {
        D(f, a);
        g(f, b, c, d);
      } else {
        b.dom = a.dom;
        b.domSize = a.domSize;
        b.instance = a.instance;
      }
    }
    function r(k, a, b, c, d, e) {
      n(k, a.children, b.children, c, d, e);
      var f = 0;
      var l = b.children;
      b.dom = null;
      if (l != null) {
        for (var h = 0; h < l.length; h++) {
          var m = l[h];
          if (m != null && m.dom != null) {
            if (b.dom == null) {
              b.dom = m.dom;
            }
            f += m.domSize || 1;
          }
        }
        if (f !== 1) {
          b.domSize = f;
        }
      }
    }
    function s(f, a, b, c) {
      var g = a.dom = f.dom;
      c = fa(a) || c;
      if (a.tag === "textarea" && a.attrs == null) {
        a.attrs = {};
      }
      K(a, f.attrs, a.attrs, c);
      if (!A(a)) {
        n(g, f.children, a.children, b, null, c);
      }
    }
    function t(a, b, c, d, e, f) {
      c.instance = m.normalize(ha.call(c.state.view, c));
      if (c.instance === c) {
        throw Error("A view cannot return the vnode it received as argument");
      }
      V(c.state, c, d);
      if (c.attrs != null) {
        V(c.attrs, c, d);
      }
      if (c.instance != null) {
        if (b.instance == null) {
          h(a, c.instance, d, f, e);
        } else {
          o(a, b.instance, c.instance, d, e, f);
        }
        c.dom = c.instance.dom;
        c.domSize = c.instance.domSize;
      } else if (b.instance != null) {
        C(a, b.instance);
        c.dom = undefined;
        c.domSize = 0;
      } else {
        c.dom = b.dom;
        c.domSize = b.domSize;
      }
    }
    function e(g, a, h) {
      var c = Object.create(null);
      for (; a < h; a++) {
        var d = g[a];
        if (d != null) {
          var i = d.key;
          if (i != null) {
            c[i] = a;
          }
        }
      }
      return c;
    }
    var u = [];
    function v(i) {
      var a = [0];
      var b = 0;
      var j = 0;
      for (var k = 0, l = u.length = i.length, k = 0; k < l; k++) {
        u[k] = i[k];
      }
      for (var k = 0; k < l; ++k) {
        if (i[k] !== -1) {
          var f = a[a.length - 1];
          if (i[f] < i[k]) {
            u[k] = f;
            a.push(k);
            continue;
          }
          b = 0;
          j = a.length - 1;
          while (b < j) {
            var m = (b >>> 1) + (j >>> 1) + (b & j & 1);
            if (i[a[m]] < i[k]) {
              b = m + 1;
            } else {
              j = m;
            }
          }
          if (i[k] < i[a[b]]) {
            if (b > 0) {
              u[k] = a[b - 1];
            }
            a[b] = k;
          }
        }
      }
      b = a.length;
      j = a[b - 1];
      while (b-- > 0) {
        a[b] = j;
        j = u[j];
      }
      u.length = 0;
      return a;
    }
    function w(d, a, e) {
      for (; a < d.length; a++) {
        if (d[a] != null && d[a].dom != null) {
          return d[a].dom;
        }
      }
      return e;
    }
    function x(c, a, b) {
      var d = da.createDocumentFragment();
      y(c, d, a);
      z(c, d, b);
    }
    function y(f, a, b) {
      while (b.dom != null && b.dom.parentNode === f) {
        if (typeof b.tag != "string") {
          b = b.instance;
          if (b != null) {
            continue;
          }
        } else if (b.tag === "<") {
          for (var g = 0; g < b.instance.length; g++) {
            a.appendChild(b.instance[g]);
          }
        } else if (b.tag !== "[") {
          a.appendChild(b.dom);
        } else if (b.children.length === 1) {
          b = b.children[0];
          if (b != null) {
            continue;
          }
        } else {
          for (var g = 0; g < b.children.length; g++) {
            var h = b.children[g];
            if (h != null) {
              y(f, a, h);
            }
          }
        }
        break;
      }
    }
    function z(d, a, b) {
      if (b != null) {
        d.insertBefore(a, b);
      } else {
        d.appendChild(a);
      }
    }
    function A(d) {
      if (d.attrs == null || d.attrs.contenteditable == null && d.attrs.contentEditable == null) {
        return false;
      }
      var a = d.children;
      if (a != null && a.length === 1 && a[0].tag === "<") {
        var b = a[0].children;
        if (d.dom.innerHTML !== b) {
          d.dom.innerHTML = b;
        }
      } else if (a != null && a.length !== 0) {
        throw new Error("Child node of a contenteditable must be trusted.");
      }
      return true;
    }
    function B(g, a, b, c) {
      for (var d = b; d < c; d++) {
        var h = a[d];
        if (h != null) {
          C(g, h);
        }
      }
    }
    function C(g, a) {
      var b = 0;
      var h = a.state;
      var d;
      var k;
      if (typeof a.tag != "string" && typeof a.state.onbeforeremove == "function") {
        var l = ha.call(a.state.onbeforeremove, a);
        if (l != null && typeof l.then == "function") {
          b = 1;
          d = l;
        }
      }
      if (a.attrs && typeof a.attrs.onbeforeremove == "function") {
        var l = ha.call(a.attrs.onbeforeremove, a);
        if (l != null && typeof l.then == "function") {
          b |= 2;
          k = l;
        }
      }
      ga(a, h);
      if (!b) {
        F(a);
        E(g, a);
      } else {
        if (d != null) {
          function c() {
            if (b & 1) {
              b &= 2;
              if (!b) {
                m();
              }
            }
          }
          d.then(c, c);
        }
        if (k != null) {
          function c() {
            if (b & 2) {
              b &= 1;
              if (!b) {
                m();
              }
            }
          }
          k.then(c, c);
        }
      }
      function m() {
        ga(a, h);
        F(a);
        E(g, a);
      }
    }
    function D(d, a) {
      for (var b = 0; b < a.instance.length; b++) {
        d.removeChild(a.instance[b]);
      }
    }
    function E(e, a) {
      while (a.dom != null && a.dom.parentNode === e) {
        if (typeof a.tag != "string") {
          a = a.instance;
          if (a != null) {
            continue;
          }
        } else if (a.tag === "<") {
          D(e, a);
        } else {
          if (a.tag !== "[" && (e.removeChild(a.dom), !Array.isArray(a.children))) {
            break;
          }
          if (a.children.length === 1) {
            a = a.children[0];
            if (a != null) {
              continue;
            }
          } else {
            for (var f = 0; f < a.children.length; f++) {
              var g = a.children[f];
              if (g != null) {
                E(e, g);
              }
            }
          }
        }
        break;
      }
    }
    function F(e) {
      if (typeof e.tag != "string" && typeof e.state.onremove == "function") {
        ha.call(e.state.onremove, e);
      }
      if (e.attrs && typeof e.attrs.onremove == "function") {
        ha.call(e.attrs.onremove, e);
      }
      if (typeof e.tag != "string") {
        if (e.instance != null) {
          F(e.instance);
        }
      } else {
        var a = e.children;
        if (Array.isArray(a)) {
          for (var b = 0; b < a.length; b++) {
            var f = a[b];
            if (f != null) {
              F(f);
            }
          }
        }
      }
    }
    function G(f, a, b) {
      if (f.tag === "input" && a.type != null) {
        f.dom.setAttribute("type", a.type);
      }
      var c = a != null && f.tag === "input" && a.type === "file";
      for (var d in a) {
        H(f, d, null, a[d], b, c);
      }
    }
    function H(g, a, b, c, d, e) {
      if (a !== "key" && a !== "is" && c != null && !M(a) && (b !== c || !!L(g, a) || typeof c == "object") && (a !== "type" || g.tag !== "input")) {
        if (a[0] === "o" && a[1] === "n") {
          return T(g, a, c);
        }
        if (a.slice(0, 6) === "xlink:") {
          g.dom.setAttributeNS("http://www.w3.org/1999/xlink", a.slice(6), c);
        } else if (a === "style") {
          R(g.dom, b, c);
        } else if (N(g, a, d)) {
          if (a === "value") {
            if ((g.tag === "input" || g.tag === "textarea") && g.dom.value === "" + c && (e || g.dom === ia()) || g.tag === "select" && b !== null && g.dom.value === "" + c || g.tag === "option" && b !== null && g.dom.value === "" + c) {
              return;
            }
            if (e && "" + c != "") {
              console.error("`value` is read-only on file inputs!");
              return;
            }
          }
          g.dom[a] = c;
        } else if (typeof c == "boolean") {
          if (c) {
            g.dom.setAttribute(a, "");
          } else {
            g.dom.removeAttribute(a);
          }
        } else {
          g.dom.setAttribute(a === "className" ? "class" : a, c);
        }
      }
    }
    function I(f, a, g, c) {
      if (a !== "key" && a !== "is" && g != null && !M(a)) {
        if (a[0] === "o" && a[1] === "n") {
          T(f, a, undefined);
        } else if (a === "style") {
          R(f.dom, g, null);
        } else if (N(f, a, c) && a !== "className" && a !== "title" && (a !== "value" || f.tag !== "option" && (f.tag !== "select" || f.dom.selectedIndex !== -1 || f.dom !== ia())) && (f.tag !== "input" || a !== "type")) {
          f.dom[a] = null;
        } else {
          var d = a.indexOf(":");
          if (d !== -1) {
            a = a.slice(d + 1);
          }
          if (g !== false) {
            f.dom.removeAttribute(a === "className" ? "class" : a);
          }
        }
      }
    }
    function J(d, a) {
      if ("value" in a) {
        if (a.value === null) {
          if (d.dom.selectedIndex !== -1) {
            d.dom.value = null;
          }
        } else {
          var b = "" + a.value;
          if (d.dom.value !== b || d.dom.selectedIndex === -1) {
            d.dom.value = b;
          }
        }
      }
      if ("selectedIndex" in a) {
        H(d, "selectedIndex", null, a.selectedIndex, undefined);
      }
    }
    function K(h, a, b, c) {
      if (a && a === b) {
        console.warn("Don't reuse attrs object, use new object for every redraw, this will throw in next major");
      }
      if (b != null) {
        if (h.tag === "input" && b.type != null) {
          h.dom.setAttribute("type", b.type);
        }
        var d = h.tag === "input" && b.type === "file";
        for (var e in b) {
          H(h, e, a && a[e], b[e], c, d);
        }
      }
      var i;
      if (a != null) {
        for (var e in a) {
          if ((i = a[e]) != null && (b == null || b[e] == null)) {
            I(h, e, i, c);
          }
        }
      }
    }
    function L(c, a) {
      return a === "value" || a === "checked" || a === "selectedIndex" || a === "selected" && c.dom === ia() || c.tag === "option" && c.dom.parentNode === da.activeElement;
    }
    function M(b) {
      return b === "oninit" || b === "oncreate" || b === "onupdate" || b === "onremove" || b === "onbeforeremove" || b === "onbeforeupdate";
    }
    function N(d, a, b) {
      return b === undefined && (d.tag.indexOf("-") > -1 || d.attrs != null && d.attrs.is || a !== "href" && a !== "list" && a !== "form" && a !== "width" && a !== "height") && a in d.dom;
    }
    var O = /[A-Z]/g;
    function P(b) {
      return "-" + b.toLowerCase();
    }
    function Q(b) {
      if (b[0] === "-" && b[1] === "-") {
        return b;
      } else if (b === "cssFloat") {
        return "float";
      } else {
        return b.replace(O, P);
      }
    }
    function R(f, a, b) {
      if (a !== b) {
        if (b == null) {
          f.style.cssText = "";
        } else if (typeof b != "object") {
          f.style.cssText = b;
        } else if (a == null || typeof a != "object") {
          f.style.cssText = "";
          for (var c in b) {
            var g = b[c];
            if (g != null) {
              f.style.setProperty(Q(c), String(g));
            }
          }
        } else {
          for (var c in b) {
            var g = b[c];
            if (g != null && (g = String(g)) !== String(a[c])) {
              f.style.setProperty(Q(c), g);
            }
          }
          for (var c in a) {
            if (a[c] != null && b[c] == null) {
              f.style.removeProperty(Q(c));
            }
          }
        }
      }
    }
    function S() {
      this._ = ea;
    }
    S.prototype = Object.create(null);
    S.prototype.handleEvent = function (d) {
      var a = this["on" + d.type];
      var b;
      if (typeof a == "function") {
        b = a.call(d.currentTarget, d);
      } else if (typeof a.handleEvent == "function") {
        a.handleEvent(d);
      }
      if (this._ && d.redraw !== false) {
        (0, this._)();
      }
      if (b === false) {
        d.preventDefault();
        d.stopPropagation();
      }
    };
    function T(d, a, b) {
      if (d.events != null) {
        d.events._ = ea;
        if (d.events[a] === b) {
          return;
        }
        if (b != null && (typeof b == "function" || typeof b == "object")) {
          if (d.events[a] == null) {
            d.dom.addEventListener(a.slice(2), d.events, false);
          }
          d.events[a] = b;
        } else {
          if (d.events[a] != null) {
            d.dom.removeEventListener(a.slice(2), d.events, false);
          }
          d.events[a] = undefined;
        }
      } else if (b != null && (typeof b == "function" || typeof b == "object")) {
        d.events = new S();
        d.dom.addEventListener(a.slice(2), d.events, false);
        d.events[a] = b;
      }
    }
    function U(d, a, b) {
      if (typeof d.oninit == "function") {
        ha.call(d.oninit, a);
      }
      if (typeof d.oncreate == "function") {
        b.push(ha.bind(d.oncreate, a));
      }
    }
    function V(d, a, b) {
      if (typeof d.onupdate == "function") {
        b.push(ha.bind(d.onupdate, a));
      }
    }
    function W(d, a) {
      do {
        if (d.attrs != null && typeof d.attrs.onbeforeupdate == "function") {
          var b = ha.call(d.attrs.onbeforeupdate, d, a);
          if (b !== undefined && !b) {
            break;
          }
        }
        if (typeof d.tag != "string" && typeof d.state.onbeforeupdate == "function") {
          var b = ha.call(d.state.onbeforeupdate, d, a);
          if (b !== undefined && !b) {
            break;
          }
        }
        return false;
      } while (false);
      d.dom = a.dom;
      d.domSize = a.domSize;
      d.instance = a.instance;
      d.attrs = a.attrs;
      d.children = a.children;
      d.text = a.text;
      return true;
    }
    var X;
    return function (a, b, d) {
      if (!a) {
        throw new TypeError("DOM element being rendered to does not exist.");
      }
      if (X != null && a.contains(X)) {
        throw new TypeError("Node is currently being rendered to and thus is locked.");
      }
      var e = ea;
      var f = X;
      var g = [];
      var h = ia();
      var i = a.namespaceURI;
      X = a;
      ea = typeof d == "function" ? d : undefined;
      try {
        if (a.vnodes == null) {
          a.textContent = "";
        }
        b = m.normalizeChildren(Array.isArray(b) ? b : [b]);
        n(a, a.vnodes, b, g, null, i === "http://www.w3.org/1999/xhtml" ? undefined : i);
        a.vnodes = b;
        if (h != null && ia() !== h && typeof h.focus == "function") {
          h.focus();
        }
        for (var j = 0; j < g.length; j++) {
          g[j]();
        }
      } finally {
        ea = e;
        X = f;
      }
    };
  };
  return Qi;
}
var Wi;
var th;
function Xi() {
  if (!th) {
    th = 1;
    Wi = Vi()(typeof window !== "undefined" ? window : null);
  }
  return Wi;
}
var Yi = ji();
function Zi(j, a, b) {
  var k = [];
  var c = false;
  var d = -1;
  function l() {
    for (d = 0; d < k.length; d += 2) {
      try {
        j(k[d], Yi(k[d + 1]), g);
      } catch (c) {
        b.error(c);
      }
    }
    d = -1;
  }
  function g() {
    if (!c) {
      c = true;
      a(function () {
        c = false;
        l();
      });
    }
  }
  g.sync = l;
  function h(a, b) {
    if (b != null && b.view == null && typeof b != "function") {
      throw new TypeError("m.mount expects a component, not a vnode.");
    }
    var c = k.indexOf(a);
    if (c >= 0) {
      k.splice(c, 2);
      if (c <= d) {
        d -= 2;
      }
      j(a, []);
    }
    if (b != null) {
      k.push(a, b);
      j(a, Yi(b), g);
    }
  }
  return {
    mount: h,
    redraw: g
  };
}
var $i = Xi();
var ih = Zi($i, typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : null, typeof console !== "undefined" ? console : null);
var nh;
var aj;
function bj() {
  if (!aj) {
    aj = 1;
    nh = function (e) {
      if (Object.prototype.toString.call(e) !== "[object Object]") {
        return "";
      }
      var f = [];
      for (var a in e) {
        b(a, e[a]);
      }
      return f.join("&");
      function b(d, a) {
        if (Array.isArray(a)) {
          for (var c = 0; c < a.length; c++) {
            b(d + "[" + c + "]", a[c]);
          }
        } else if (Object.prototype.toString.call(a) === "[object Object]") {
          for (var c in a) {
            b(d + "[" + c + "]", a[c]);
          }
        } else {
          f.push(encodeURIComponent(d) + (a != null && a !== "" ? "=" + encodeURIComponent(a) : ""));
        }
      }
    };
  }
  return nh;
}
var cj;
var dj;
function ej() {
  if (dj) {
    return cj;
  }
  dj = 1;
  var e = Nc;
  cj = Object.assign || function (a, b) {
    for (var c in b) {
      if (e.call(b, c)) {
        a[c] = b[c];
      }
    }
  };
  return cj;
}
var fj;
var gj;
function hj() {
  if (gj) {
    return fj;
  }
  gj = 1;
  var r = bj();
  var a = ej();
  fj = function (b, s) {
    if (/:([^\/\.-]+)(\.{3})?:/.test(b)) {
      throw new SyntaxError("Template parameter names must be separated by either a '/', '-', or '.'.");
    }
    if (s == null) {
      return b;
    }
    var c = b.indexOf("?");
    var d = b.indexOf("#");
    var e = d < 0 ? b.length : d;
    var f = c < 0 ? e : c;
    var g = b.slice(0, f);
    var h = {};
    a(h, s);
    var i = g.replace(/:([^\/\.-]+)(\.{3})?/g, function (d, a, b) {
      delete h[a];
      if (s[a] == null) {
        return d;
      } else if (b) {
        return s[a];
      } else {
        return encodeURIComponent(String(s[a]));
      }
    });
    var j = i.indexOf("?");
    var k = i.indexOf("#");
    var l = k < 0 ? i.length : k;
    var m = j < 0 ? l : j;
    var n = i.slice(0, m);
    if (c >= 0) {
      n += b.slice(c, e);
    }
    if (j >= 0) {
      n += (c < 0 ? "?" : "&") + i.slice(j, l);
    }
    var o = r(h);
    if (o) {
      n += (c < 0 && j < 0 ? "?" : "&") + o;
    }
    if (d >= 0) {
      n += b.slice(d);
    }
    if (k >= 0) {
      n += (d < 0 ? "" : "&") + i.slice(k);
    }
    return n;
  };
  return fj;
}
var ij = hj();
var jj = Nc;
function sh(r, k, a) {
  var i = 0;
  function c(b) {
    return new k(b);
  }
  c.prototype = k.prototype;
  c.__proto__ = k;
  function b(e) {
    return function (l, m) {
      if (typeof l != "string") {
        m = l;
        l = l.url;
      } else if (m == null) {
        m = {};
      }
      var b = new k(function (d, a) {
        e(ij(l, m.params), m, function (b) {
          if (typeof m.type == "function") {
            if (Array.isArray(b)) {
              for (var e = 0; e < b.length; e++) {
                b[e] = new m.type(b[e]);
              }
            } else {
              b = new m.type(b);
            }
          }
          d(b);
        }, a);
      });
      if (m.background === true) {
        return b;
      }
      var g = 0;
      function n() {
        if (--g === 0 && typeof a == "function") {
          a();
        }
      }
      return i(b);
      function i(d) {
        var a = d.then;
        d.constructor = c;
        d.then = function () {
          g++;
          var b = a.apply(d, arguments);
          b.then(n, function (b) {
            n();
            if (g === 0) {
              throw b;
            }
          });
          return i(b);
        };
        return d;
      }
    };
  }
  function s(d, a) {
    for (var b in d.headers) {
      if (jj.call(d.headers, b) && b.toLowerCase() === a) {
        return true;
      }
    }
    return false;
  }
  return {
    request: b(function (t, b, a, c) {
      var d = b.method != null ? b.method.toUpperCase() : "GET";
      var e = b.body;
      var f = (b.serialize == null || b.serialize === JSON.serialize) && !(e instanceof r.FormData) && !(e instanceof r.URLSearchParams);
      var i = b.responseType || (typeof b.extract == "function" ? "" : "json");
      var j = new r.XMLHttpRequest();
      var u = false;
      var g = false;
      var h = j;
      var n;
      var v = j.abort;
      j.abort = function () {
        u = true;
        v.call(this);
      };
      j.open(d, t, b.async !== false, typeof b.user == "string" ? b.user : undefined, typeof b.password == "string" ? b.password : undefined);
      if (f && e != null && !s(b, "content-type")) {
        j.setRequestHeader("Content-Type", "application/json; charset=utf-8");
      }
      if (typeof b.deserialize != "function" && !s(b, "accept")) {
        j.setRequestHeader("Accept", "application/json, text/*");
      }
      if (b.withCredentials) {
        j.withCredentials = b.withCredentials;
      }
      if (b.timeout) {
        j.timeout = b.timeout;
      }
      j.responseType = i;
      for (var p in b.headers) {
        if (jj.call(b.headers, p)) {
          j.setRequestHeader(p, b.headers[p]);
        }
      }
      j.onreadystatechange = function (d) {
        if (!u && d.target.readyState === 4) {
          try {
            var e = d.target.status >= 200 && d.target.status < 300 || d.target.status === 304 || /^file:\/\//i.test(t);
            var k = d.target.response;
            var l;
            if (i === "json") {
              if (!d.target.responseType && typeof b.extract != "function") {
                try {
                  k = JSON.parse(d.target.responseText);
                } catch {
                  k = null;
                }
              }
            } else if ((!i || i === "text") && k == null) {
              k = d.target.responseText;
            }
            if (typeof b.extract == "function") {
              k = b.extract(d.target, b);
              e = true;
            } else if (typeof b.deserialize == "function") {
              k = b.deserialize(k);
            }
            if (e) {
              a(k);
            } else {
              function a() {
                try {
                  l = d.target.responseText;
                } catch {
                  l = k;
                }
                var a = new Error(l);
                a.code = d.target.status;
                a.response = k;
                c(a);
              }
              if (j.status === 0) {
                setTimeout(function () {
                  if (!g) {
                    a();
                  }
                });
              } else {
                a();
              }
            }
          } catch (b) {
            c(b);
          }
        }
      };
      j.ontimeout = function (d) {
        g = true;
        var a = new Error("Request timed out");
        a.code = d.target.status;
        c(a);
      };
      if (typeof b.config == "function") {
        j = b.config(j, b, t) || j;
        if (j !== h) {
          n = j.abort;
          j.abort = function () {
            u = true;
            n.call(this);
          };
        }
      }
      if (e == null) {
        j.send();
      } else if (typeof b.serialize == "function") {
        j.send(b.serialize(e));
      } else if (e instanceof r.FormData || e instanceof r.URLSearchParams) {
        j.send(e);
      } else {
        j.send(JSON.stringify(e));
      }
    }),
    jsonp: b(function (a, b, c, d) {
      var e = b.callbackName || "_mithril_" + Math.round(Math.random() * 10000000000000000) + "_" + i++;
      var f = r.document.createElement("script");
      r[e] = function (a) {
        delete r[e];
        f.parentNode.removeChild(f);
        c(a);
      };
      f.onerror = function () {
        delete r[e];
        f.parentNode.removeChild(f);
        d(new Error("JSONP request failed"));
      };
      f.src = a + (a.indexOf("?") < 0 ? "?" : "&") + encodeURIComponent(b.callbackKey || "callback") + "=" + encodeURIComponent(e);
      r.document.documentElement.appendChild(f);
    })
  };
}
var kj = Ki;
var rh = ih;
var oh = sh(typeof window !== "undefined" ? window : null, kj, rh.redraw);
var ah;
var lh;
function lj() {
  if (lh) {
    return ah;
  }
  lh = 1;
  function b(b) {
    try {
      return decodeURIComponent(b);
    } catch {
      return b;
    }
  }
  ah = function (a) {
    if (a === "" || a == null) {
      return {};
    }
    if (a.charAt(0) === "?") {
      a = a.slice(1);
    }
    for (var q = a.split("&"), c = {}, d = {}, e = 0; e < q.length; e++) {
      var r = q[e].split("=");
      var s = b(r[0]);
      var t = r.length === 2 ? b(r[1]) : "";
      if (t === "true") {
        t = true;
      } else if (t === "false") {
        t = false;
      }
      var u = s.split(/\]\[?|\[/);
      var v = d;
      if (s.indexOf("[") > -1) {
        u.pop();
      }
      for (var w = 0; w < u.length; w++) {
        var x = u[w];
        var y = u[w + 1];
        var z = y == "" || !isNaN(parseInt(y, 10));
        if (x === "") {
          var s = u.slice(0, w).join();
          if (c[s] == null) {
            c[s] = Array.isArray(v) ? v.length : 0;
          }
          x = c[s]++;
        } else if (x === "__proto__") {
          break;
        }
        if (w === u.length - 1) {
          v[x] = t;
        } else {
          var A = Object.getOwnPropertyDescriptor(v, x);
          if (A != null) {
            A = A.value;
          }
          if (A == null) {
            v[x] = A = z ? [] : {};
          }
          v = A;
        }
      }
    }
    return d;
  };
  return ah;
}
var mj;
var nj;
function oj() {
  if (nj) {
    return mj;
  }
  nj = 1;
  var h = lj();
  mj = function (a) {
    var b = a.indexOf("?");
    var c = a.indexOf("#");
    var d = c < 0 ? a.length : c;
    var e = b < 0 ? d : b;
    var f = a.slice(0, e).replace(/\/{2,}/g, "/");
    if (f) {
      if (f[0] !== "/") {
        f = "/" + f;
      }
      if (f.length > 1 && f[f.length - 1] === "/") {
        f = f.slice(0, -1);
      }
    } else {
      f = "/";
    }
    return {
      path: f,
      params: b < 0 ? {} : h(a.slice(b + 1, d))
    };
  };
  return mj;
}
var pj;
var qj;
function rj() {
  if (qj) {
    return pj;
  }
  qj = 1;
  var g = oj();
  pj = function (a) {
    var h = g(a);
    var c = Object.keys(h.params);
    var d = [];
    var e = new RegExp("^" + h.path.replace(/:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g, function (e, a, b) {
      if (a == null) {
        return "\\" + e;
      } else {
        d.push({
          k: a,
          r: b === "..."
        });
        if (b === "...") {
          return "(.*)";
        } else if (b === ".") {
          return "([^/]+)\\.";
        } else {
          return "([^/]+)" + (b || "");
        }
      }
    }) + "$");
    return function (f) {
      for (var a = 0; a < c.length; a++) {
        if (h.params[c[a]] !== f.params[c[a]]) {
          return false;
        }
      }
      if (!d.length) {
        return e.test(f.path);
      }
      var i = e.exec(f.path);
      if (i == null) {
        return false;
      }
      for (var a = 0; a < d.length; a++) {
        f.params[d[a].k] = d[a].r ? i[a + 1] : decodeURIComponent(i[a + 1]);
      }
      return true;
    };
  };
  return pj;
}
var sj;
var ch;
function tj() {
  if (ch) {
    return sj;
  }
  ch = 1;
  var g = Nc;
  var a = new RegExp("^(?:key|oninit|oncreate|onbeforeupdate|onupdate|onbeforeremove|onremove)$");
  sj = function (b, c) {
    var d = {};
    if (c != null) {
      for (var e in b) {
        if (g.call(b, e) && !a.test(e) && c.indexOf(e) < 0) {
          d[e] = b[e];
        }
      }
    } else {
      for (var e in b) {
        if (g.call(b, e) && !a.test(e)) {
          d[e] = b[e];
        }
      }
    }
    return d;
  };
  return sj;
}
var uj;
var vj;
function wj() {
  if (vj) {
    return uj;
  }
  vj = 1;
  var k = ji();
  var l = Yc;
  var a = Ki;
  var m = hj();
  var o = oj();
  var b = rj();
  var e = ej();
  var d = tj();
  var c = {};
  function g(b) {
    try {
      return decodeURIComponent(b);
    } catch {
      return b;
    }
  }
  uj = function (h, f) {
    var i = h == null ? null : typeof h.setImmediate == "function" ? h.setImmediate : h.setTimeout;
    var j = a.resolve();
    var n = false;
    var E = false;
    var F = 0;
    var G;
    var H;
    var I = c;
    var J;
    var K;
    var L;
    var M;
    var N = {
      onbeforeupdate: function () {
        F = F ? 2 : 1;
        return !!F && c !== I;
      },
      onremove: function () {
        h.removeEventListener("popstate", A, false);
        h.removeEventListener("hashchange", z, false);
      },
      view: function () {
        if (!!F && c !== I) {
          var a = [k(J, K.key, K)];
          if (I) {
            a = I.render(a[0]);
          }
          return a;
        }
      }
    };
    var y = C.SKIP = {};
    function z() {
      n = false;
      var i = h.location.hash;
      if (C.prefix[0] !== "#") {
        i = h.location.search + i;
        if (C.prefix[0] !== "?") {
          i = h.location.pathname + i;
          if (i[0] !== "/") {
            i = "/" + i;
          }
        }
      }
      var k = i.concat().replace(/(?:%[a-f89][a-f0-9])+/gim, g).slice(C.prefix.length);
      var b = o(k);
      e(b.params, h.history.state);
      function c(b) {
        console.error(b);
        B(H, null, {
          replace: true
        });
      }
      d(0);
      function d(l) {
        for (; l < G.length; l++) {
          if (G[l].check(b)) {
            var m = G[l].component;
            var n = G[l].route;
            var o = m;
            var p = M = function (a) {
              if (p === M) {
                if (a === y) {
                  return d(l + 1);
                }
                J = a != null && (typeof a.view == "function" || typeof a == "function") ? a : "div";
                K = b.params;
                L = k;
                M = null;
                I = m.render ? m : null;
                if (F === 2) {
                  f.redraw();
                } else {
                  F = 2;
                  f.redraw.sync();
                }
              }
            };
            if (m.view || typeof m == "function") {
              m = {};
              p(o);
            } else if (m.onmatch) {
              j.then(function () {
                return m.onmatch(b.params, k, n);
              }).then(p, k === H ? null : c);
            } else {
              p("div");
            }
            return;
          }
        }
        if (k === H) {
          throw new Error("Could not resolve default route " + H + ".");
        }
        B(H, null, {
          replace: true
        });
      }
    }
    function A() {
      if (!n) {
        n = true;
        i(z);
      }
    }
    function B(d, g, b) {
      d = m(d, g);
      if (E) {
        A();
        var c = b ? b.state : null;
        var e = b ? b.title : null;
        if (b && b.replace) {
          h.history.replaceState(c, e, C.prefix + d);
        } else {
          h.history.pushState(c, e, C.prefix + d);
        }
      } else {
        h.location.href = C.prefix + d;
      }
    }
    function C(e, a, g) {
      if (!e) {
        throw new TypeError("DOM element being rendered to does not exist.");
      }
      G = Object.keys(g).map(function (c) {
        if (c[0] !== "/") {
          throw new SyntaxError("Routes must start with a '/'.");
        }
        if (/:([^\/\.-]+)(\.{3})?:/.test(c)) {
          throw new SyntaxError("Route parameter names must be separated with either '/', '.', or '-'.");
        }
        return {
          route: c,
          component: g[c],
          check: b(c)
        };
      });
      H = a;
      if (a != null) {
        var c = o(a);
        if (!G.some(function (b) {
          return b.check(c);
        })) {
          throw new ReferenceError("Default route doesn't match any known routes.");
        }
      }
      if (typeof h.history.pushState == "function") {
        h.addEventListener("popstate", A, false);
      } else if (C.prefix[0] === "#") {
        h.addEventListener("hashchange", z, false);
      }
      E = true;
      f.mount(e, N);
      z();
    }
    C.set = function (d, a, b) {
      if (M != null) {
        b = b || {};
        b.replace = true;
      }
      M = null;
      B(d, a, b);
    };
    C.get = function () {
      return L;
    };
    C.prefix = "#!";
    C.Link = {
      view: function (b) {
        var a = l(b.attrs.selector || "a", d(b.attrs, ["options", "params", "selector", "onclick"]), b.children);
        var c;
        var h;
        var i;
        if (a.attrs.disabled = Boolean(a.attrs.disabled)) {
          a.attrs.href = null;
          a.attrs["aria-disabled"] = "true";
        } else {
          c = b.attrs.options;
          h = b.attrs.onclick;
          i = m(a.attrs.href, b.attrs.params);
          a.attrs.href = C.prefix + i;
          a.attrs.onclick = function (d) {
            var a;
            if (typeof h == "function") {
              a = h.call(d.currentTarget, d);
            } else if (h != null && typeof h == "object") {
              if (typeof h.handleEvent == "function") {
                h.handleEvent(d);
              }
            }
            if (a !== false && !d.defaultPrevented && (d.button === 0 || d.which === 0 || d.which === 1) && (!d.currentTarget.target || d.currentTarget.target === "_self") && !d.ctrlKey && !d.metaKey && !d.shiftKey && !d.altKey) {
              d.preventDefault();
              d.redraw = false;
              C.set(i, null, c);
            }
          };
        }
        return a;
      }
    };
    C.param = function (b) {
      if (K && b != null) {
        return K[b];
      } else {
        return K;
      }
    };
    return C;
  };
  return uj;
}
var xj;
var hh;
function yj() {
  if (hh) {
    return xj;
  }
  hh = 1;
  var b = ih;
  xj = wj()(typeof window !== "undefined" ? window : null, b);
  return xj;
}
var zj = jc;
var fh = oh;
var Ai = ih;
function Aj() {
  return zj.apply(this, arguments);
}
Aj.m = zj;
Aj.trust = zj.trust;
Aj.fragment = zj.fragment;
Aj.Fragment = "[";
Aj.mount = Ai.mount;
Aj.route = yj();
Aj.render = Xi();
Aj.redraw = Ai.redraw;
Aj.request = fh.request;
Aj.jsonp = fh.jsonp;
Aj.parseQueryString = lj();
Aj.buildQueryString = bj();
Aj.parsePathname = oj();
Aj.buildPathname = hj();
Aj.vnode = ji();
Aj.PromisePolyfill = Ni();
Aj.censor = tj();
var Bj = Aj;
function pe(f, a, b, c, d) {
  this.debugLog = false;
  this.baseUrl = f;
  this.lobbySize = b;
  this.devPort = a;
  this.lobbySpread = c;
  this.rawIPs = !!d;
  this.server = undefined;
  this.gameIndex = undefined;
  this.callback = undefined;
  this.errorCallback = undefined;
}
pe.prototype.regionInfo = {
  0: {
    name: "Local",
    latitude: 0,
    longitude: 0
  },
  "us-east": {
    name: "Miami",
    latitude: 40.1393329,
    longitude: -75.8521818
  },
  "us-west": {
    name: "Silicon Valley",
    latitude: 47.6149942,
    longitude: -122.4759879
  },
  gb: {
    name: "London",
    latitude: 51.5283063,
    longitude: -0.382486
  },
  "eu-west": {
    name: "Frankfurt",
    latitude: 50.1211273,
    longitude: 8.496137
  },
  au: {
    name: "Sydney",
    latitude: -33.8479715,
    longitude: 150.651084
  },
  sg: {
    name: "Singapore",
    latitude: 1.3147268,
    longitude: 103.7065876
  }
};
pe.prototype.start = function (f, a, b, c) {
  this.callback = a;
  this.errorCallback = b;
  if (c) {
    return a();
  }
  const d = this.parseServerQuery(f);
  if (d && d.length > 0) {
    this.log("Found server in query.");
    this.password = d[3];
    this.connect(d[0], d[1], d[2]);
  } else {
    this.errorCallback("Unable to find server");
  }
};
pe.prototype.parseServerQuery = function (f) {
  const a = new URLSearchParams(location.search, true);
  const b = f || a.get("server");
  if (typeof b != "string") {
    return [];
  }
  const [c, d] = b.split(":");
  return [c, d, a.get("password")];
};
pe.prototype.findServer = function (d, e) {
  var b = this.servers[d];
  for (let c = 0; c < b.length; c++) {
    const d = b[c];
    if (d.name === e) {
      return d;
    }
  }
  console.warn("Could not find server in region " + d + " with serverName " + e + ".");
};
pe.prototype.seekServer = function (m, n, o) {
  if (o == null) {
    o = "random";
  }
  if (n == null) {
    n = false;
  }
  const p = ["random"];
  const d = this.lobbySize;
  const a = this.lobbySpread;
  const e = this.servers[m].flatMap(function (e) {
    let a = 0;
    return e.games.map(function (b) {
      const c = a++;
      return {
        region: e.region,
        index: e.index * e.games.length + c,
        gameIndex: c,
        gameCount: e.games.length,
        playerCount: b.playerCount,
        playerCapacity: b.playerCapacity,
        isPrivate: b.isPrivate
      };
    });
  }).filter(function (b) {
    return !b.isPrivate;
  }).filter(function (b) {
    if (n) {
      return b.playerCount == 0 && b.gameIndex >= b.gameCount / 2;
    } else {
      return true;
    }
  }).filter(function (b) {
    if (o == "random") {
      return true;
    } else {
      return p[b.index % p.length].key == o;
    }
  }).sort(function (c, a) {
    return a.playerCount - c.playerCount;
  }).filter(function (b) {
    return b.playerCount < d;
  });
  if (n) {
    e.reverse();
  }
  if (e.length == 0) {
    this.errorCallback("No open servers.");
    return;
  }
  const f = Math.min(a, e.length);
  var g = Math.floor(Math.random() * f);
  g = Math.min(g, e.length - 1);
  const h = e[g];
  const j = h.region;
  var g = Math.floor(h.index / h.gameCount);
  const k = h.index % h.gameCount;
  this.log("Found server.");
  return [j, g, k];
};
pe.prototype.connect = function (e, a, b) {
  if (this.connected) {
    return;
  }
  const c = this.findServer(e, a);
  if (c == null) {
    this.errorCallback("Failed to find server for region " + e + " and serverName " + a);
    return;
  }
  this.log("Connecting to server", c, "with game index", b);
  if (c.playerCount >= c.playerCapacity) {
    this.errorCallback("Server is already full.");
    return;
  }
  window.history.replaceState(document.title, document.title, this.generateHref(e, a, this.password));
  this.server = c;
  this.gameIndex = b;
  this.log("Calling callback with address", this.serverAddress(c), "on port", this.serverPort(c));
  this.callback(this.serverAddress(c), this.serverPort(c), b);
  if (Ne) {
    clearInterval(Ne);
  }
};
pe.prototype.switchServer = function (c, a) {
  this.switchingServers = true;
  window.location = this.generateHref(c, a, null);
};
pe.prototype.generateHref = function (e, a, b) {
  let c = window.location.href.split("?")[0];
  c += "?server=" + e + ":" + a;
  if (b) {
    c += "&password=" + encodeURIComponent(b);
  }
  return c;
};
pe.prototype.serverAddress = function (b) {
  if (b.region == 0) {
    return "localhost";
  } else {
    return b.key + "." + b.region + "." + this.baseUrl;
  }
};
pe.prototype.serverPort = function (b) {
  return b.port;
};
let Ne;
function we(d) {
  d = d.filter(b => b.playerCount !== b.playerCapacity);
  const e = Math.min(...d.map(b => b.ping || Infinity));
  const b = d.filter(b => b.ping === e);
  if (!b.length > 0) {
    return null;
  } else {
    return b.reduce((c, a) => c.playerCount > a.playerCount ? c : a);
  }
}
pe.prototype.processServers = function (i) {
  if (Ne) {
    clearInterval(Ne);
  }
  return new Promise(a => {
    const j = {};
    const b = c => {
      const i = j[c];
      const a = i[0];
      let b = this.serverAddress(a);
      const d = this.serverPort(a);
      if (d) {
        b += ":" + d;
      }
      const f = "https://" + b + "/ping";
      const g = new Date().getTime();
      return Promise.race([fetch(f).then(() => {
        const c = new Date().getTime() - g;
        i.forEach(a => {
          a.pings = a.pings ?? [];
          a.pings.push(c);
          if (a.pings.length > 10) {
            a.pings.shift();
          }
          a.ping = Math.floor(a.pings.reduce((c, a) => c + a, 0) / a.pings.length);
        });
      }).catch(() => {}), new Promise(b => setTimeout(() => b(), 100))]);
    };
    const c = async () => {
      await Promise.all(Object.keys(j).map(b));
      if (!window.blockRedraw) {
        Bj.redraw();
      }
    };
    i.forEach(b => {
      j[b.region] = j[b.region] || [];
      j[b.region].push(b);
    });
    for (const b in j) {
      j[b] = j[b].sort(function (c, a) {
        return a.playerCount - c.playerCount;
      });
    }
    this.servers = j;
    let d;
    const [e, g] = this.parseServerQuery();
    i.forEach(b => {
      if (e === b.region && g === b.name) {
        b.selected = true;
        d = b;
      }
    });
    c().then(c).then(() => {
      if (d) {
        return;
      }
      let a = we(i);
      a ||= i[0];
      if (a) {
        a.selected = true;
        window.history.replaceState(document.title, document.title, this.generateHref(a.region, a.name, this.password));
      }
      if (!window.blockRedraw) {
        Bj.redraw();
      }
    }).then(c).catch(b => {}).finally(a);
    Ne = setInterval(c, 5000);
  });
};
pe.prototype.ipToHex = function (b) {
  return b.split(".").map(b => ("00" + parseInt(b).toString(16)).substr(-2)).join("").toLowerCase();
};
pe.prototype.hashIP = function (b) {
  return gi(this.ipToHex(b));
};
pe.prototype.log = function () {
  if (this.debugLog) {
    return console.log.apply(undefined, arguments);
  }
  if (console.verbose) {
    return console.verbose.apply(undefined, arguments);
  }
};
pe.prototype.stripRegion = function (b) {
  if (b.startsWith("vultr:")) {
    b = b.slice(6);
  } else if (b.startsWith("do:")) {
    b = b.slice(3);
  }
  return b;
};
const Cj = function (c, a) {
  return c.concat(a);
};
const uh = function (c, a) {
  return a.map(c).reduce(Cj, []);
};
Array.prototype.flatMap = function (b) {
  return uh(b, this);
};
const dh = (e, a) => {
  const b = a.x - e.x;
  const c = a.y - e.y;
  return Math.sqrt(b * b + c * c);
};
const ph = (e, a) => {
  const b = a.x - e.x;
  const c = a.y - e.y;
  return gh(Math.atan2(c, b));
};
const fi = (e, a, b) => {
  const f = {
    x: 0,
    y: 0
  };
  b = mh(b);
  f.x = e.x - a * Math.cos(b);
  f.y = e.y - a * Math.sin(b);
  return f;
};
const mh = b => b * (Math.PI / 180);
const gh = b => b * (180 / Math.PI);
const Dj = b => isNaN(b.buttons) ? b.pressure !== 0 : b.buttons !== 0;
const yh = new Map();
const wh = b => {
  if (yh.has(b)) {
    clearTimeout(yh.get(b));
  }
  yh.set(b, setTimeout(b, 100));
};
const Ej = (g, a, b) => {
  const c = a.split(/[ ,]+/g);
  let d;
  for (let e = 0; e < c.length; e += 1) {
    d = c[e];
    if (g.addEventListener) {
      g.addEventListener(d, b, false);
    } else if (g.attachEvent) {
      g.attachEvent(d, b);
    }
  }
};
const Fj = (g, a, b) => {
  const c = a.split(/[ ,]+/g);
  let d;
  for (let e = 0; e < c.length; e += 1) {
    d = c[e];
    if (g.removeEventListener) {
      g.removeEventListener(d, b);
    } else if (g.detachEvent) {
      g.detachEvent(d, b);
    }
  }
};
const wi = b => {
  b.preventDefault();
  if (b.type.match(/^touch/)) {
    return b.changedTouches;
  } else {
    return b;
  }
};
const Gj = () => {
  const c = window.pagel !== undefined ? window.pagel : (document.documentElement || document.body.parentNode || document.body).scrollLeft;
  const a = window.pagec !== undefined ? window.pagec : (document.documentElement || document.body.parentNode || document.body).scrollTop;
  return {
    x: c,
    y: a
  };
};
const Hj = (c, a) => {
  if (a.top || a.right || a.bottom || a.left) {
    c.style.top = a.top;
    c.style.right = a.right;
    c.style.bottom = a.bottom;
    c.style.left = a.left;
  } else {
    c.style.left = a.x + "px";
    c.style.top = a.y + "px";
  }
};
const Ij = (e, a, b) => {
  const c = Kj(e);
  for (let d in c) {
    if (c.hasOwnProperty(d)) {
      if (typeof a == "string") {
        c[d] = a + " " + b;
      } else {
        let e = "";
        for (let c = 0, d = a.length; c < d; c += 1) {
          e += a[c] + " " + b + ", ";
        }
        c[d] = e.slice(0, -2);
      }
    }
  }
  return c;
};
const Jj = (d, a) => {
  const b = Kj(d);
  for (let c in b) {
    if (b.hasOwnProperty(c)) {
      b[c] = a;
    }
  }
  return b;
};
const Kj = d => {
  const a = {
    [d]: ""
  };
  ["webkit", "Moz", "o"].forEach(function (b) {
    a[b + d.charAt(0).toUpperCase() + d.slice(1)] = "";
  });
  return a;
};
const kh = (d, a) => {
  for (let b in a) {
    if (a.hasOwnProperty(b)) {
      d[b] = a[b];
    }
  }
  return d;
};
const Lj = (e, a) => {
  const b = {};
  for (let c in e) {
    if (e.hasOwnProperty(c) && a.hasOwnProperty(c)) {
      b[c] = a[c];
    } else if (e.hasOwnProperty(c)) {
      b[c] = e[c];
    }
  }
  return b;
};
const Mj = (e, a) => {
  if (e.length) {
    for (let b = 0, c = e.length; b < c; b += 1) {
      a(e[b]);
    }
  } else {
    a(e);
  }
};
const vh = (d, a, b) => ({
  x: Math.min(Math.max(d.x, a.x - b), a.x + b),
  y: Math.min(Math.max(d.y, a.y - b), a.y + b)
});
var Nj = ("ontouchstart" in window);
var xh = !!window.PointerEvent;
var bh = !!window.MSPointerEvent;
var Sh = {
  touch: {
    start: "touchstart",
    move: "touchmove",
    end: "touchend, touchcancel"
  },
  mouse: {
    start: "mousedown",
    move: "mousemove",
    end: "mouseup"
  },
  pointer: {
    start: "pointerdown",
    move: "pointermove",
    end: "pointerup, pointercancel"
  },
  MSPointer: {
    start: "MSPointerDown",
    move: "MSPointerMove",
    end: "MSPointerUp"
  }
};
var Th;
var Oj = {};
if (xh) {
  Th = Sh.pointer;
} else if (bh) {
  Th = Sh.MSPointer;
} else if (Nj) {
  Th = Sh.touch;
  Oj = Sh.mouse;
} else {
  Th = Sh.mouse;
}
function Pj() {}
Pj.prototype.on = function (g, a) {
  var b = this;
  var c = g.split(/[ ,]+/g);
  var d;
  b._handlers_ = b._handlers_ || {};
  for (var h = 0; h < c.length; h += 1) {
    d = c[h];
    b._handlers_[d] = b._handlers_[d] || [];
    b._handlers_[d].push(a);
  }
  return b;
};
Pj.prototype.off = function (d, a) {
  var b = this;
  b._handlers_ = b._handlers_ || {};
  if (d === undefined) {
    b._handlers_ = {};
  } else if (a === undefined) {
    b._handlers_[d] = null;
  } else if (b._handlers_[d] && b._handlers_[d].indexOf(a) >= 0) {
    b._handlers_[d].splice(b._handlers_[d].indexOf(a), 1);
  }
  return b;
};
Pj.prototype.trigger = function (g, h) {
  var b = this;
  var a = g.split(/[ ,]+/g);
  var c;
  b._handlers_ = b._handlers_ || {};
  for (var d = 0; d < a.length; d += 1) {
    c = a[d];
    if (b._handlers_[c] && b._handlers_[c].length) {
      b._handlers_[c].forEach(function (d) {
        d.call(b, {
          type: c,
          target: b
        }, h);
      });
    }
  }
};
Pj.prototype.config = function (c) {
  var a = this;
  a.options = a.defaults || {};
  if (c) {
    a.options = Lj(a.options, c);
  }
};
Pj.prototype.bindEvt = function (d, a) {
  var b = this;
  b._domHandlers_ = b._domHandlers_ || {};
  b._domHandlers_[a] = function () {
    if (typeof b["on" + a] == "function") {
      b["on" + a].apply(b, arguments);
    } else {
      console.warn("[WARNING] : Missing \"on" + a + "\" handler.");
    }
  };
  Ej(d, Th[a], b._domHandlers_[a]);
  if (Oj[a]) {
    Ej(d, Oj[a], b._domHandlers_[a]);
  }
  return b;
};
Pj.prototype.unbindEvt = function (d, a) {
  var b = this;
  b._domHandlers_ = b._domHandlers_ || {};
  Fj(d, Th[a], b._domHandlers_[a]);
  if (Oj[a]) {
    Fj(d, Oj[a], b._domHandlers_[a]);
  }
  delete b._domHandlers_[a];
  return this;
};
function Qj(c, a) {
  this.identifier = a.identifier;
  this.position = a.position;
  this.frontPosition = a.frontPosition;
  this.collection = c;
  this.defaults = {
    size: 100,
    threshold: 0.1,
    color: "white",
    fadeTime: 250,
    dataOnly: false,
    restJoystick: true,
    restOpacity: 0.5,
    mode: "dynamic",
    zone: document.body,
    lockX: false,
    lockY: false,
    shape: "circle"
  };
  this.config(a);
  if (this.options.mode === "dynamic") {
    this.options.restOpacity = 0;
  }
  this.id = Qj.id;
  Qj.id += 1;
  this.buildEl().stylize();
  this.instance = {
    el: this.ui.el,
    on: this.on.bind(this),
    off: this.off.bind(this),
    show: this.show.bind(this),
    hide: this.hide.bind(this),
    add: this.addToDom.bind(this),
    remove: this.removeFromDom.bind(this),
    destroy: this.destroy.bind(this),
    setPosition: this.setPosition.bind(this),
    resetDirection: this.resetDirection.bind(this),
    computeDirection: this.computeDirection.bind(this),
    trigger: this.trigger.bind(this),
    position: this.position,
    frontPosition: this.frontPosition,
    ui: this.ui,
    identifier: this.identifier,
    id: this.id,
    options: this.options
  };
  return this.instance;
}
Qj.prototype = new Pj();
Qj.constructor = Qj;
Qj.id = 0;
Qj.prototype.buildEl = function (b) {
  this.ui = {};
  if (this.options.dataOnly) {
    return this;
  } else {
    this.ui.el = document.createElement("div");
    this.ui.back = document.createElement("div");
    this.ui.front = document.createElement("div");
    this.ui.el.className = "nipple collection_" + this.collection.id;
    this.ui.back.className = "back";
    this.ui.front.className = "front";
    this.ui.el.setAttribute("id", "nipple_" + this.collection.id + "_" + this.id);
    this.ui.el.appendChild(this.ui.back);
    this.ui.el.appendChild(this.ui.front);
    return this;
  }
};
Qj.prototype.stylize = function () {
  if (this.options.dataOnly) {
    return this;
  }
  var e = this.options.fadeTime + "ms";
  var a = Jj("borderRadius", "50%");
  var b = Ij("transition 0.5s", "opacity", e);
  var c = {
    el: {
      position: "absolute",
      opacity: this.options.restOpacity,
      display: "block",
      zIndex: 999
    },
    back: {
      position: "absolute",
      display: "block",
      width: this.options.size + "px",
      height: this.options.size + "px",
      marginLeft: -this.options.size / 2 + "px",
      marginTop: -this.options.size / 2 + "px",
      background: this.options.color,
      opacity: ".5"
    },
    front: {
      width: this.options.size / 2 + "px",
      height: this.options.size / 2 + "px",
      position: "absolute",
      display: "block",
      marginLeft: -this.options.size / 4 + "px",
      marginTop: -this.options.size / 4 + "px",
      background: this.options.color,
      opacity: ".5",
      transform: "translate(0px, 0px)"
    }
  };
  kh(c.el, b);
  if (this.options.shape === "circle") {
    kh(c.back, a);
  }
  kh(c.front, a);
  this.applyStyles(c);
  return this;
};
Qj.prototype.applyStyles = function (d) {
  for (var a in this.ui) {
    if (this.ui.hasOwnProperty(a)) {
      for (var e in d[a]) {
        this.ui[a].style[e] = d[a][e];
      }
    }
  }
  return this;
};
Qj.prototype.addToDom = function () {
  if (this.options.dataOnly || document.body.contains(this.ui.el)) {
    return this;
  } else {
    this.options.zone.appendChild(this.ui.el);
    return this;
  }
};
Qj.prototype.removeFromDom = function () {
  if (this.options.dataOnly || !document.body.contains(this.ui.el)) {
    return this;
  } else {
    this.options.zone.removeChild(this.ui.el);
    return this;
  }
};
Qj.prototype.destroy = function () {
  clearTimeout(this.removeTimeout);
  clearTimeout(this.showTimeout);
  clearTimeout(this.restTimeout);
  this.trigger("destroyed", this.instance);
  this.removeFromDom();
  this.off();
};
Qj.prototype.show = function (c) {
  var a = this;
  if (!a.options.dataOnly) {
    clearTimeout(a.removeTimeout);
    clearTimeout(a.showTimeout);
    clearTimeout(a.restTimeout);
    a.addToDom();
    a.restCallback();
    setTimeout(function () {
      a.ui.el.style.opacity = 1;
    }, 0);
    a.showTimeout = setTimeout(function () {
      a.trigger("shown", a.instance);
      if (typeof c == "function") {
        c.call(this);
      }
    }, a.options.fadeTime);
  }
  return a;
};
Qj.prototype.hide = function (e) {
  var a = this;
  if (a.options.dataOnly) {
    return a;
  }
  a.ui.el.style.opacity = a.options.restOpacity;
  clearTimeout(a.removeTimeout);
  clearTimeout(a.showTimeout);
  clearTimeout(a.restTimeout);
  a.removeTimeout = setTimeout(function () {
    var b = a.options.mode === "dynamic" ? "none" : "block";
    a.ui.el.style.display = b;
    if (typeof e == "function") {
      e.call(a);
    }
    a.trigger("hidden", a.instance);
  }, a.options.fadeTime);
  if (a.options.restJoystick) {
    const b = a.options.restJoystick;
    const c = {
      x: b === true || b.x !== false ? 0 : a.instance.frontPosition.x,
      y: b === true || b.y !== false ? 0 : a.instance.frontPosition.y
    };
    a.setPosition(e, c);
  }
  return a;
};
Qj.prototype.setPosition = function (g, a) {
  var b = this;
  b.frontPosition = {
    x: a.x,
    y: a.y
  };
  var c = b.options.fadeTime + "ms";
  var d = {};
  d.front = Ij("transition", ["transform"], c);
  var e = {
    front: {}
  };
  e.front = {
    transform: "translate(" + b.frontPosition.x + "px," + b.frontPosition.y + "px)"
  };
  b.applyStyles(d);
  b.applyStyles(e);
  b.restTimeout = setTimeout(function () {
    if (typeof g == "function") {
      g.call(b);
    }
    b.restCallback();
  }, b.options.fadeTime);
};
Qj.prototype.restCallback = function () {
  var c = this;
  var a = {};
  a.front = Ij("transition", "none", "");
  c.applyStyles(a);
  c.trigger("rested", c.instance);
};
Qj.prototype.resetDirection = function () {
  this.direction = {
    x: false,
    y: false,
    angle: false
  };
};
Qj.prototype.computeDirection = function (k) {
  var a = k.angle.radian;
  var b = Math.PI / 4;
  var c = Math.PI / 2;
  var d;
  var l;
  var m;
  if (a > b && a < b * 3 && !k.lockX) {
    d = "up";
  } else if (a > -b && a <= b && !k.lockY) {
    d = "left";
  } else if (a > -b * 3 && a <= -b && !k.lockX) {
    d = "down";
  } else if (!k.lockY) {
    d = "right";
  }
  if (!k.lockY) {
    if (a > -c && a < c) {
      l = "left";
    } else {
      l = "right";
    }
  }
  if (!k.lockX) {
    if (a > 0) {
      m = "up";
    } else {
      m = "down";
    }
  }
  if (k.force > this.options.threshold) {
    var n = {};
    var h;
    for (h in this.direction) {
      if (this.direction.hasOwnProperty(h)) {
        n[h] = this.direction[h];
      }
    }
    var o = {};
    this.direction = {
      x: l,
      y: m,
      angle: d
    };
    k.direction = this.direction;
    for (h in n) {
      if (n[h] === this.direction[h]) {
        o[h] = true;
      }
    }
    if (o.x && o.y && o.angle) {
      return k;
    }
    if (!o.x || !o.y) {
      this.trigger("plain", k);
    }
    if (!o.x) {
      this.trigger("plain:" + l, k);
    }
    if (!o.y) {
      this.trigger("plain:" + m, k);
    }
    if (!o.angle) {
      this.trigger("dir dir:" + d, k);
    }
  } else {
    this.resetDirection();
  }
  return k;
};
function Ve(e, a) {
  var b = this;
  b.nipples = [];
  b.idles = [];
  b.actives = [];
  b.ids = [];
  b.pressureIntervals = {};
  b.manager = e;
  b.id = Ve.id;
  Ve.id += 1;
  b.defaults = {
    zone: document.body,
    multitouch: false,
    maxNumberOfNipples: 10,
    mode: "dynamic",
    position: {
      top: 0,
      left: 0
    },
    catchDistance: 200,
    size: 100,
    threshold: 0.1,
    color: "white",
    fadeTime: 250,
    dataOnly: false,
    restJoystick: true,
    restOpacity: 0.5,
    lockX: false,
    lockY: false,
    shape: "circle",
    dynamicPage: false,
    follow: false
  };
  b.config(a);
  if (b.options.mode === "static" || b.options.mode === "semi") {
    b.options.multitouch = false;
  }
  if (!b.options.multitouch) {
    b.options.maxNumberOfNipples = 1;
  }
  const c = getComputedStyle(b.options.zone.parentElement);
  if (c && c.display === "flex") {
    b.parentIsFlex = true;
  }
  b.updateBox();
  b.prepareNipples();
  b.bindings();
  b.begin();
  return b.nipples;
}
Ve.prototype = new Pj();
Ve.constructor = Ve;
Ve.id = 0;
Ve.prototype.prepareNipples = function () {
  var c = this;
  var e = c.nipples;
  e.on = c.on.bind(c);
  e.off = c.off.bind(c);
  e.options = c.options;
  e.destroy = c.destroy.bind(c);
  e.ids = c.ids;
  e.id = c.id;
  e.processOnMove = c.processOnMove.bind(c);
  e.processOnEnd = c.processOnEnd.bind(c);
  e.get = function (b) {
    if (b === undefined) {
      return e[0];
    }
    for (var a = 0, f = e.length; a < f; a += 1) {
      if (e[a].identifier === b) {
        return e[a];
      }
    }
    return false;
  };
};
Ve.prototype.bindings = function () {
  var b = this;
  b.bindEvt(b.options.zone, "start");
  b.options.zone.style.touchAction = "none";
  b.options.zone.style.msTouchAction = "none";
};
Ve.prototype.begin = function () {
  var d = this;
  var a = d.options;
  if (a.mode === "static") {
    var b = d.createNipple(a.position, d.manager.getIdentifier());
    b.add();
    d.idles.push(b);
  }
};
Ve.prototype.createNipple = function (k, l) {
  var b = this;
  var c = b.manager.scroll;
  var d = {};
  var m = b.options;
  var f = {
    x: b.parentIsFlex ? c.x : c.x + b.box.left,
    y: b.parentIsFlex ? c.y : c.y + b.box.top
  };
  if (k.x && k.y) {
    d = {
      x: k.x - f.x,
      y: k.y - f.y
    };
  } else if (k.top || k.right || k.bottom || k.left) {
    var g = document.createElement("DIV");
    g.style.display = "hidden";
    g.style.top = k.top;
    g.style.right = k.right;
    g.style.bottom = k.bottom;
    g.style.left = k.left;
    g.style.position = "absolute";
    m.zone.appendChild(g);
    var h = g.getBoundingClientRect();
    m.zone.removeChild(g);
    d = k;
    k = {
      x: h.left + c.x,
      y: h.top + c.y
    };
  }
  var i = new Qj(b, {
    color: m.color,
    size: m.size,
    threshold: m.threshold,
    fadeTime: m.fadeTime,
    dataOnly: m.dataOnly,
    restJoystick: m.restJoystick,
    restOpacity: m.restOpacity,
    mode: m.mode,
    identifier: l,
    position: k,
    zone: m.zone,
    frontPosition: {
      x: 0,
      y: 0
    },
    shape: m.shape
  });
  if (!m.dataOnly) {
    Hj(i.ui.el, d);
    Hj(i.ui.front, i.frontPosition);
  }
  b.nipples.push(i);
  b.trigger("added " + i.identifier + ":added", i);
  b.manager.trigger("added " + i.identifier + ":added", i);
  b.bindNipple(i);
  return i;
};
Ve.prototype.updateBox = function () {
  var b = this;
  b.box = b.options.zone.getBoundingClientRect();
};
Ve.prototype.bindNipple = function (e) {
  var f = this;
  var b;
  function a(c, a) {
    b = c.type + " " + a.id + ":" + c.type;
    f.trigger(b, a);
  }
  e.on("destroyed", f.onDestroyed.bind(f));
  e.on("shown hidden rested dir plain", a);
  e.on("dir:up dir:right dir:down dir:left", a);
  e.on("plain:up plain:right plain:down plain:left", a);
};
Ve.prototype.pressureFn = function (f, a, b) {
  var g = this;
  var d = 0;
  clearInterval(g.pressureIntervals[b]);
  g.pressureIntervals[b] = setInterval(function () {
    var b = f.force || f.pressure || f.webkitForce || 0;
    if (b !== d) {
      a.trigger("pressure", b);
      g.trigger("pressure " + a.identifier + ":pressure", b);
      d = b;
    }
  }.bind(g), 100);
};
Ve.prototype.onstart = function (f) {
  var g = this;
  var b = g.options;
  var h = f;
  f = wi(f);
  g.updateBox();
  function c(a) {
    if (g.actives.length < b.maxNumberOfNipples) {
      g.processOnStart(a);
    } else if (h.type.match(/^touch/)) {
      Object.keys(g.manager.ids).forEach(function (b) {
        if (Object.values(h.touches).findIndex(function (c) {
          return c.identifier === b;
        }) < 0) {
          var a = [f[0]];
          a.identifier = b;
          g.processOnEnd(a);
        }
      });
      if (g.actives.length < b.maxNumberOfNipples) {
        g.processOnStart(a);
      }
    }
  }
  Mj(f, c);
  g.manager.bindDocument();
  return false;
};
Ve.prototype.processOnStart = function (k) {
  var a = this;
  var b = a.options;
  var c;
  var l = a.manager.getIdentifier(k);
  var e = k.force || k.pressure || k.webkitForce || 0;
  var f = {
    x: k.pageX,
    y: k.pageY
  };
  var g = a.getOrCreate(l, f);
  if (g.identifier !== l) {
    a.manager.removeIdentifier(g.identifier);
  }
  g.identifier = l;
  function h(b) {
    b.trigger("start", b);
    a.trigger("start " + b.id + ":start", b);
    b.show();
    if (e > 0) {
      a.pressureFn(k, b, b.identifier);
    }
    a.processOnMove(k);
  }
  if ((c = a.idles.indexOf(g)) >= 0) {
    a.idles.splice(c, 1);
  }
  a.actives.push(g);
  a.ids.push(g.identifier);
  if (b.mode !== "semi") {
    h(g);
  } else {
    var i = dh(f, g.position);
    if (i <= b.catchDistance) {
      h(g);
    } else {
      g.destroy();
      a.processOnStart(k);
      return;
    }
  }
  return g;
};
Ve.prototype.getOrCreate = function (f, a) {
  var b = this;
  var c = b.options;
  var d;
  if (/(semi|static)/.test(c.mode)) {
    d = b.idles[0];
    if (d) {
      b.idles.splice(0, 1);
      return d;
    } else if (c.mode === "semi") {
      return b.createNipple(a, f);
    } else {
      console.warn("Coudln't find the needed nipple.");
      return false;
    }
  } else {
    d = b.createNipple(a, f);
    return d;
  }
};
Ve.prototype.processOnMove = function (t) {
  var u = this;
  var a = u.options;
  var b = u.manager.getIdentifier(t);
  var d = u.nipples.get(b);
  var e = u.manager.scroll;
  if (!Dj(t)) {
    this.processOnEnd(t);
    return;
  }
  if (!d) {
    console.error("Found zombie joystick with ID " + b);
    u.manager.removeIdentifier(b);
    return;
  }
  if (a.dynamicPage) {
    var c = d.el.getBoundingClientRect();
    d.position = {
      x: e.x + c.left,
      y: e.y + c.top
    };
  }
  d.identifier = b;
  var f = d.options.size / 2;
  var g = {
    x: t.pageX,
    y: t.pageY
  };
  if (a.lockX) {
    g.y = d.position.y;
  }
  if (a.lockY) {
    g.x = d.position.x;
  }
  var h = dh(g, d.position);
  var v = ph(g, d.position);
  var k = mh(v);
  var l = h / f;
  var m = {
    distance: h,
    position: g
  };
  var n;
  var w;
  if (d.options.shape === "circle") {
    n = Math.min(h, f);
    w = fi(d.position, n, v);
  } else {
    w = vh(g, d.position, f);
    n = dh(w, d.position);
  }
  if (a.follow) {
    if (h > f) {
      let b = g.x - w.x;
      let a = g.y - w.y;
      d.position.x += b;
      d.position.y += a;
      d.el.style.top = d.position.y - (u.box.top + e.y) + "px";
      d.el.style.left = d.position.x - (u.box.left + e.x) + "px";
      h = dh(g, d.position);
    }
  } else {
    g = w;
    h = n;
  }
  var x = g.x - d.position.x;
  var q = g.y - d.position.y;
  d.frontPosition = {
    x: x,
    y: q
  };
  if (!a.dataOnly) {
    d.ui.front.style.transform = "translate(" + x + "px," + q + "px)";
  }
  var r = {
    identifier: d.identifier,
    position: g,
    force: l,
    pressure: t.force || t.pressure || t.webkitForce || 0,
    distance: h,
    angle: {
      radian: k,
      degree: v
    },
    vector: {
      x: x / f,
      y: -q / f
    },
    raw: m,
    instance: d,
    lockX: a.lockX,
    lockY: a.lockY
  };
  r = d.computeDirection(r);
  r.angle = {
    radian: mh(180 - v),
    degree: 180 - v
  };
  d.trigger("move", r);
  u.trigger("move " + d.id + ":move", r);
};
Ve.prototype.processOnEnd = function (g) {
  var a = this;
  var b = a.options;
  var c = a.manager.getIdentifier(g);
  var d = a.nipples.get(c);
  var e = a.manager.removeIdentifier(d.identifier);
  if (d) {
    if (!b.dataOnly) {
      d.hide(function () {
        if (b.mode === "dynamic") {
          d.trigger("removed", d);
          a.trigger("removed " + d.id + ":removed", d);
          a.manager.trigger("removed " + d.id + ":removed", d);
          d.destroy();
        }
      });
    }
    clearInterval(a.pressureIntervals[d.identifier]);
    d.resetDirection();
    d.trigger("end", d);
    a.trigger("end " + d.id + ":end", d);
    if (a.ids.indexOf(d.identifier) >= 0) {
      a.ids.splice(a.ids.indexOf(d.identifier), 1);
    }
    if (a.actives.indexOf(d) >= 0) {
      a.actives.splice(a.actives.indexOf(d), 1);
    }
    if (/(semi|static)/.test(b.mode)) {
      a.idles.push(d);
    } else if (a.nipples.indexOf(d) >= 0) {
      a.nipples.splice(a.nipples.indexOf(d), 1);
    }
    a.manager.unbindDocument();
    if (/(semi|static)/.test(b.mode)) {
      a.manager.ids[e.id] = e.identifier;
    }
  }
};
Ve.prototype.onDestroyed = function (d, a) {
  var b = this;
  if (b.nipples.indexOf(a) >= 0) {
    b.nipples.splice(b.nipples.indexOf(a), 1);
  }
  if (b.actives.indexOf(a) >= 0) {
    b.actives.splice(b.actives.indexOf(a), 1);
  }
  if (b.idles.indexOf(a) >= 0) {
    b.idles.splice(b.idles.indexOf(a), 1);
  }
  if (b.ids.indexOf(a.identifier) >= 0) {
    b.ids.splice(b.ids.indexOf(a.identifier), 1);
  }
  b.manager.removeIdentifier(a.identifier);
  b.manager.unbindDocument();
};
Ve.prototype.destroy = function () {
  var c = this;
  c.unbindEvt(c.options.zone, "start");
  c.nipples.forEach(function (b) {
    b.destroy();
  });
  for (var a in c.pressureIntervals) {
    if (c.pressureIntervals.hasOwnProperty(a)) {
      clearInterval(c.pressureIntervals[a]);
    }
  }
  c.trigger("destroyed", c.nipples);
  c.manager.unbindDocument();
  c.off();
};
function he(e) {
  var f = this;
  f.ids = {};
  f.index = 0;
  f.collections = [];
  f.scroll = Gj();
  f.config(e);
  f.prepareCollections();
  function a() {
    var b;
    f.collections.forEach(function (a) {
      a.forEach(function (a) {
        b = a.el.getBoundingClientRect();
        a.position = {
          x: f.scroll.x + b.left,
          y: f.scroll.y + b.top
        };
      });
    });
  }
  Ej(window, "resize", function () {
    wh(a);
  });
  function b() {
    f.scroll = Gj();
  }
  Ej(window, "scroll", function () {
    wh(b);
  });
  return f.collections;
}
he.prototype = new Pj();
he.constructor = he;
he.prototype.prepareCollections = function () {
  var d = this;
  d.collections.create = d.create.bind(d);
  d.collections.on = d.on.bind(d);
  d.collections.off = d.off.bind(d);
  d.collections.destroy = d.destroy.bind(d);
  d.collections.get = function (e) {
    var b;
    d.collections.every(function (c) {
      b = c.get(e);
      return !b;
    });
    return b;
  };
};
he.prototype.create = function (b) {
  return this.createCollection(b);
};
he.prototype.createCollection = function (d) {
  var a = this;
  var b = new Ve(a, d);
  a.bindCollection(b);
  a.collections.push(b);
  return b;
};
he.prototype.bindCollection = function (e) {
  var f = this;
  var b;
  function a(c, a) {
    b = c.type + " " + a.id + ":" + c.type;
    f.trigger(b, a);
  }
  e.on("destroyed", f.onDestroyed.bind(f));
  e.on("shown hidden rested dir plain", a);
  e.on("dir:up dir:right dir:down dir:left", a);
  e.on("plain:up plain:right plain:down plain:left", a);
};
he.prototype.bindDocument = function () {
  var b = this;
  if (!b.binded) {
    b.bindEvt(document, "move").bindEvt(document, "end");
    b.binded = true;
  }
};
he.prototype.unbindDocument = function (c) {
  var a = this;
  if (!Object.keys(a.ids).length || c === true) {
    a.unbindEvt(document, "move").unbindEvt(document, "end");
    a.binded = false;
  }
};
he.prototype.getIdentifier = function (c) {
  var a;
  if (c) {
    a = c.identifier === undefined ? c.pointerId : c.identifier;
    if (a === undefined) {
      a = this.latest || 0;
    }
  } else {
    a = this.index;
  }
  if (this.ids[a] === undefined) {
    this.ids[a] = this.index;
    this.index += 1;
  }
  this.latest = a;
  return this.ids[a];
};
he.prototype.removeIdentifier = function (d) {
  var a = {};
  for (var b in this.ids) {
    if (this.ids[b] === d) {
      a.id = b;
      a.identifier = this.ids[b];
      delete this.ids[b];
      break;
    }
  }
  return a;
};
he.prototype.onmove = function (c) {
  var a = this;
  a.onAny("move", c);
  return false;
};
he.prototype.onend = function (c) {
  var a = this;
  a.onAny("end", c);
  return false;
};
he.prototype.oncancel = function (c) {
  var a = this;
  a.onAny("end", c);
  return false;
};
he.prototype.onAny = function (h, a) {
  var i = this;
  var c;
  var j = "processOn" + h.charAt(0).toUpperCase() + h.slice(1);
  a = wi(a);
  function e(d, a, b) {
    if (b.ids.indexOf(a) >= 0) {
      b[j](d);
      d._found_ = true;
    }
  }
  function f(b) {
    c = i.getIdentifier(b);
    Mj(i.collections, e.bind(null, b, c));
    if (!b._found_) {
      i.removeIdentifier(c);
    }
  }
  Mj(a, f);
  return false;
};
he.prototype.destroy = function () {
  var b = this;
  b.unbindDocument(true);
  b.ids = {};
  b.index = 0;
  b.collections.forEach(function (b) {
    b.destroy();
  });
  b.off();
};
he.prototype.onDestroyed = function (d, a) {
  var b = this;
  if (b.collections.indexOf(a) < 0) {
    return false;
  }
  b.collections.splice(b.collections.indexOf(a), 1);
};
const ae = new he();
const de = {
  create: function (b) {
    return ae.create(b);
  },
  factory: ae
};
let Rj = false;
const Sj = f => {
  if (Rj) {
    return;
  }
  Rj = true;
  const a = document.getElementById("touch-controls-left");
  const b = de.create({
    zone: a
  });
  b.on("start", f.onStartMoving);
  b.on("end", f.onStopMoving);
  b.on("move", f.onRotateMoving);
  const c = document.getElementById("touch-controls-right");
  const d = de.create({
    zone: c
  });
  d.on("start", f.onStartAttacking);
  d.on("end", f.onStopAttacking);
  d.on("move", f.onRotateAttacking);
  a.style.display = "block";
  c.style.display = "block";
};
const Tj = {
  enable: Sj
};
window.loadedScript = true;
const Ih = location.hostname !== "localhost" && location.hostname !== "127.0.0.1" && !location.hostname.startsWith("192.168.");
const Mh = location.hostname === "sandbox-dev.moomoo.io" || location.hostname === "sandbox.moomoo.io";
const Eh = location.hostname === "dev.moomoo.io" || location.hostname === "dev2.moomoo.io";
const Uj = new uc();
let Ph;
let Vj;
const ui = location.hostname === "localhost" || location.hostname === "127.0.0.1";
const di = false;
const ki = ui || di;
if (Mh) {
  Ph = "https://api-sandbox.moomoo.io";
  Vj = "moomoo.io";
} else if (Eh) {
  Ph = "https://api-dev.moomoo.io";
  Vj = "moomoo.io";
} else {
  Ph = "https://api.moomoo.io";
  Vj = "moomoo.io";
}
const Ch = !ki;
const Wj = new pe(Vj, 443, Cg.maxPlayers, 5, Ch);
Wj.debugLog = false;
const Ah = {
  animationTime: 0,
  land: null,
  lava: null,
  x: Cg.volcanoLocationX,
  y: Cg.volcanoLocationY
};
function qe() {
  let b = false;
  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
      b = true;
    }
  })(navigator.userAgent || navigator.vendor || window.opera);
  return b;
}
const Me = qe();
let Dh = false;
let Xj = false;
function vi() {
  if (!!qh && !Xj) {
    Xj = true;
    if (Ih || ki) {
      if (window.turnstileToken) {
        Oh(window.turnstileToken);
      } else {
        window.grecaptcha.ready(() => {
          window.grecaptcha.execute("6LfahtgjAAAAAF8SkpjyeYMcxMdxIaQeh-VoPATP", {
            action: "homepage"
          }).then(function (b) {
            Oh("re:" + b);
          }).catch(console.error);
        });
      }
    } else {
      Oh();
    }
  }
}
let Yj = false;
function Oh(f) {
  Wj.start(Wh, function (a, b, c) {
    let d = "wss://" + a;
    if (f) {
      d += "?token=" + encodeURIComponent(f);
    }
    if (ui) {
      d = "wss://localhost:3000";
    }
    Eg.connect(d, function (b) {
      if (Yj) {
        Yj = false;
        return;
      }
      $n();
      if (b) {
        Zk(b);
      } else {
        Dh = true;
        bf();
      }
    }, {
      A: Yk,
      B: Zk,
      C: Ei,
      D: Jf,
      E: kn,
      a: Nn,
      G: Em,
      H: Lf,
      I: Yf,
      J: hn,
      K: Qm,
      L: qf,
      M: gn,
      N: Zf,
      O: ln,
      P: tm,
      Q: vm,
      R: mi,
      S: Qf,
      T: Dm,
      U: Af,
      V: vl,
      X: Wf,
      Y: Gf,
      Z: Pn,
      g: Qh,
      1: jh,
      2: el,
      3: gl,
      4: Zh,
      5: hf,
      6: Bl,
      7: rf,
      8: If,
      9: Je,
      0: Yn
    });
  }, function (b) {
    console.error("Vultr error:", b);
    alert("Error:\n" + b);
    Zk("disconnected");
  }, ui);
}
function Zj() {
  return Eg.connected;
}
function $j() {
  const b = prompt("party key", Wh);
  if (b) {
    window.onbeforeunload = undefined;
    window.location.href = "/?server=" + b;
  }
}
const _j = new dc(Cg);
const Rh = Math.PI;
const _h = Rh * 2;
Math.lerpAngle = function (e, f, g) {
  if (Math.abs(f - e) > Rh) {
    if (e > f) {
      f += _h;
    } else {
      e += _h;
    }
  }
  const c = f + (e - f) * g;
  if (c >= 0 && c <= _h) {
    return c;
  } else {
    return c % _h;
  }
};
CanvasRenderingContext2D.prototype.roundRect = function (f, a, b, c, d) {
  if (b < d * 2) {
    d = b / 2;
  }
  if (c < d * 2) {
    d = c / 2;
  }
  if (d < 0) {
    d = 0;
  }
  this.beginPath();
  this.moveTo(f + d, a);
  this.arcTo(f + b, a, f + b, a + c, d);
  this.arcTo(f + b, a + c, f, a + c, d);
  this.arcTo(f, a + c, f, a, d);
  this.arcTo(f, a, f + b, a, d);
  this.closePath();
  return this;
};
let ak;
if (typeof Storage !== "undefined") {
  ak = true;
}
function Ze(c, a) {
  if (ak) {
    localStorage.setItem(c, a);
  }
}
function bk(b) {
  if (ak) {
    return localStorage.getItem(b);
  } else {
    return null;
  }
}
let Di = bk("moofoll");
function ck() {
  if (!Di) {
    Di = true;
    Ze("moofoll", 1);
  }
}
let xi;
let Bh;
let dk = 1;
let $e;
let ek;
let be;
let fk = Date.now();
var gk;
let hk;
const He = [];
const Ee = [];
let ye = [];
const J = [];
const Oe = [];
const ik = new fc(zc, Oe, Ee, He, Wk, xc, Cg, cc);
const jk = new mc(He, Vg, Ee, xc, null, Cg, cc);
let kk;
let lk;
let E;
let mk = 1;
let y = 0;
let nk = 0;
let ok = 0;
let pk;
let qk;
let Re;
let _e = 0;
const rk = Cg.maxScreenWidth;
const sk = Cg.maxScreenHeight;
let se;
let re;
let tk = false;
document.getElementById("ad-container");
const uk = document.getElementById("mainMenu");
const vk = document.getElementById("enterGame");
const Oi = document.getElementById("promoImg");
document.getElementById("partyButton");
const wk = document.getElementById("joinPartyButton");
const xk = document.getElementById("settingsButton");
const yk = xk.getElementsByTagName("span")[0];
const zk = document.getElementById("allianceButton");
const Ak = document.getElementById("storeButton");
const Bk = document.getElementById("chatButton");
const Ck = document.getElementById("gameCanvas");
const Dk = Ck.getContext("2d");
var Ek = document.getElementById("serverBrowser");
const M = document.getElementById("nativeResolution");
const zh = document.getElementById("showPing");
document.getElementById("playMusic");
const Fk = document.getElementById("pingDisplay");
const Gk = document.getElementById("shutdownDisplay");
const Hk = document.getElementById("menuCardHolder");
const Ik = document.getElementById("guideCard");
const Jk = document.getElementById("loadingText");
const Kk = document.getElementById("gameUI");
const Lk = document.getElementById("actionBar");
const Mk = document.getElementById("scoreDisplay");
const Nk = document.getElementById("foodDisplay");
const Hh = document.getElementById("woodDisplay");
const Fh = document.getElementById("stoneDisplay");
const Vh = document.getElementById("killCounter");
const Uh = document.getElementById("leaderboardData");
const Lh = document.getElementById("nameInput");
const Ok = document.getElementById("itemInfoHolder");
const Pk = document.getElementById("ageText");
const Le = document.getElementById("ageBarBody");
const Qk = document.getElementById("upgradeHolder");
const Rk = document.getElementById("upgradeCounter");
const Sk = document.getElementById("allianceMenu");
const ri = document.getElementById("allianceHolder");
const Te = document.getElementById("allianceManager");
const oi = document.getElementById("mapDisplay");
const ai = document.getElementById("diedText");
const me = document.getElementById("skinColorHolder");
const Tk = oi.getContext("2d");
oi.width = 300;
oi.height = 300;
const Nh = document.getElementById("storeMenu");
const ce = document.getElementById("storeHolder");
const We = document.getElementById("noticationDisplay");
const Uk = Bc.hats;
const Vk = Bc.accessories;
var Wk = new C(Wg, J, cc, Cg);
const Xk = "#525252";
const ue = "#3d3f42";
const ei = 5.5;
Cg.DAY_INTERVAL / 24;
Cg.DAY_INTERVAL / 2;
function Yk(b) {
  ye = b.teams;
}
let Xe = true;
var qh = false;
if (!ki || ui) {
  qh = true;
}
window.onblur = function () {
  Xe = false;
};
window.onfocus = function () {
  Xe = true;
  if (kk && kk.alive) {
    Pl();
  }
};
window.captchaCallbackHook = function () {
  qh = true;
};
if (window.captchaCallbackComplete) {
  window.captchaCallbackHook();
}
window.addEventListener("keydown", function (b) {
  if (b.keyCode == 32 && b.target == document.body) {
    b.preventDefault();
  }
});
Ck.oncontextmenu = function () {
  return false;
};
["touch-controls-left", "touch-controls-right", "touch-controls-fullscreen", "storeMenu"].forEach(b => {
  if (document.getElementById(b)) {
    document.getElementById(b).oncontextmenu = function (b) {
      b.preventDefault();
    };
  }
});
function Zk(b) {
  Dh = false;
  Eg.close();
  $k(b);
}
function $k(c, a) {
  uk.style.display = "block";
  Kk.style.display = "none";
  Hk.style.display = "none";
  ai.style.display = "none";
  Jk.innerHTML = c + (a ? "<a href='javascript:window.location.href=window.location.href' class='ytLink'>reload</a>" : "");
}
function _k() {
  Fk.hidden = true;
  uk.style.display = "block";
  Hk.style.display = "block";
  ul();
  al();
  Bm();
  Hk.style.display = "block";
  let b = bk("moo_name") || "";
  if (!b.length && FRVR.profile) {
    b = FRVR.profile.name();
    if (b) {
      b += Math.floor(Math.random() * 90) + 9;
    }
  }
  Lh.value = b || "";
}
function al() {
  vk.onclick = cc.checkTrusted(function () {
    if (Zj()) {
      bf();
    } else {
      vi();
    }
  });
  cc.hookTouchEvents(vk);
  if (Oi) {
    Oi.onclick = cc.checkTrusted(function () {
      io("https://talkai.info/ru/chat/");
    });
    cc.hookTouchEvents(Oi);
  }
  if (wk) {
    wk.onclick = cc.checkTrusted(function () {
      setTimeout(function () {
        $j();
      }, 10);
    });
    cc.hookTouchEvents(wk);
  }
  xk.onclick = cc.checkTrusted(function () {
    xl();
  });
  cc.hookTouchEvents(xk);
  zk.onclick = cc.checkTrusted(function () {
    ef();
  });
  cc.hookTouchEvents(zk);
  Ak.onclick = cc.checkTrusted(function () {
    ql();
  });
  cc.hookTouchEvents(Ak);
  Bk.onclick = cc.checkTrusted(function () {
    zl();
  });
  cc.hookTouchEvents(Bk);
  oi.onclick = cc.checkTrusted(function () {
    Mi();
  });
  cc.hookTouchEvents(oi);
}
let Wh;
const Xh = {
  view: () => {
    if (!Wj.servers) {
      return;
    }
    let f = 0;
    const c = Object.keys(Wj.servers).map(k => {
      const b = Wj.regionInfo[k].name;
      let c = 0;
      const a = Wj.servers[k].map(d => {
        var a;
        c += d.playerCount;
        const l = d.selected;
        let f = b + " " + d.name + " [" + Math.min(d.playerCount, d.playerCapacity) + "/" + d.playerCapacity + "]";
        const m = d.name;
        const h = l ? "selected" : "";
        if (d.ping && ((a = d.pings) == null ? undefined : a.length) >= 2) {
          f += " [" + Math.floor(d.ping) + "ms]";
        } else if (!l) {
          f += " [?]";
        }
        let i = {
          value: k + ":" + m
        };
        if (h) {
          Wh = k + ":" + m;
          i.selected = true;
        }
        return Bj("option", i, f);
      });
      f += c;
      return [Bj("option[disabled]", b + " - " + c + " players"), a, Bj("option[disabled]")];
    });
    return Bj("select", {
      value: Wh,
      onfocus: () => {
        window.blockRedraw = true;
      },
      onblur: () => {
        window.blockRedraw = false;
      },
      onchange: dl
    }, [c, Bj("option[disabled]", "All Servers - " + f + " players")]);
  }
};
Bj.mount(Ek, Xh);
var bi;
var Gh;
if (location.hostname == "sandbox.moomoo.io") {
  bi = "Back to MooMoo";
  Gh = "//moomoo.io/";
} else {
  bi = "Try the sandbox";
  Gh = "//sandbox.moomoo.io/";
}
document.getElementById("altServer").innerHTML = "<a href='" + Gh + "'>" + bi + "<i class='material-icons' style='font-size:10px;vertical-align:middle'>arrow_forward_ios</i></a>";
const bl = Ph + "/servers?v=1.22";
const cl = async () => fetch(bl).then(b => b.json()).then(async b => Wj.processServers(b)).catch(b => {
  console.error("Failed to load server data with status code:", b);
});
const Yh = () => cl().then(_k).catch(b => {
  console.error("Failed to load.");
});
window.frvrSdkInitPromise.then(() => window.FRVR.bootstrapper.complete()).then(() => Yh());
const dl = d => {
  window.blockRedraw = false;
  if (FRVR.channelCharacteristics.allowNavigation) {
    const [a, b] = d.target.value.split(":");
    Wj.switchServer(a, b);
  } else if (Dh) {
    Dh = false;
    Xj = false;
    Yj = true;
    Sf = true;
    Eg.close();
  }
};
document.getElementById("pre-content-container");
function $h() {
  FRVR.ads.show("interstitial", bf);
}
window.showPreAd = $h;
function Kh(d, a, b) {
  if (kk && d) {
    cc.removeAllChildren(Ok);
    Ok.classList.add("visible");
    cc.generateElement({
      id: "itemInfoName",
      text: cc.capitalizeFirst(d.name),
      parent: Ok
    });
    cc.generateElement({
      id: "itemInfoDesc",
      text: d.desc,
      parent: Ok
    });
    if (!b) {
      if (a) {
        cc.generateElement({
          class: "itemInfoReq",
          text: d.type ? "secondary" : "primary",
          parent: Ok
        });
      } else {
        for (let a = 0; a < d.req.length; a += 2) {
          cc.generateElement({
            class: "itemInfoReq",
            html: d.req[a] + "<span class='itemInfoReqVal'> x" + d.req[a + 1] + "</span>",
            parent: Ok
          });
        }
        const a = Mh ? d.group.sandboxLimit || Math.max(d.group.limit * 3, 99) : d.group.limit;
        if (d.group.limit) {
          cc.generateElement({
            class: "itemInfoLmt",
            text: (kk.itemCounts[d.group.id] || 0) + "/" + a,
            parent: Ok
          });
        }
      }
    }
  } else {
    Ok.classList.remove("visible");
  }
}
let Jh = [];
let Se = [];
function el(c, a) {
  Jh.push({
    sid: c,
    name: a
  });
  fl();
}
function fl() {
  if (Jh[0]) {
    const b = Jh[0];
    cc.removeAllChildren(We);
    We.style.display = "block";
    cc.generateElement({
      class: "notificationText",
      text: b.name,
      parent: We
    });
    cc.generateElement({
      class: "notifButton",
      html: "<i class='material-icons' style='font-size:28px;color:#cc5151;'>&#xE14C;</i>",
      parent: We,
      onclick: function () {
        hl(0);
      },
      hookTouch: true
    });
    cc.generateElement({
      class: "notifButton",
      html: "<i class='material-icons' style='font-size:28px;color:#8ecc51;'>&#xE876;</i>",
      parent: We,
      onclick: function () {
        hl(1);
      },
      hookTouch: true
    });
  } else {
    We.style.display = "none";
  }
}
function Qh(b) {
  ye.push(b);
  if (Sk.style.display == "block") {
    nf();
  }
}
function gl(c, a) {
  if (kk) {
    kk.team = c;
    kk.isOwner = a;
    if (Sk.style.display == "block") {
      nf();
    }
  }
}
function Zh(b) {
  Se = b;
  if (Sk.style.display == "block") {
    nf();
  }
}
function jh(c) {
  for (let a = ye.length - 1; a >= 0; a--) {
    if (ye[a].sid == c) {
      ye.splice(a, 1);
    }
  }
  if (Sk.style.display == "block") {
    nf();
  }
}
function ef() {
  Pl();
  if (Sk.style.display != "block") {
    nf();
  } else {
    tf();
  }
}
function tf() {
  if (Sk.style.display == "block") {
    Sk.style.display = "none";
  }
}
function nf() {
  if (kk && kk.alive) {
    Al();
    Nh.style.display = "none";
    Sk.style.display = "block";
    cc.removeAllChildren(ri);
    if (kk.team) {
      for (var b = 0; b < Se.length; b += 2) {
        (function (c) {
          const a = cc.generateElement({
            class: "allianceItem",
            style: "color:" + (Se[c] == kk.sid ? "#fff" : "rgba(255,255,255,0.6)"),
            text: Se[c + 1],
            parent: ri
          });
          if (kk.isOwner && Se[c] != kk.sid) {
            cc.generateElement({
              class: "joinAlBtn",
              text: "Kick",
              onclick: function () {
                ti(Se[c]);
              },
              hookTouch: true,
              parent: a
            });
          }
        })(b);
      }
    } else if (ye.length) {
      for (var b = 0; b < ye.length; ++b) {
        (function (c) {
          const a = cc.generateElement({
            class: "allianceItem",
            style: "color:" + (ye[c].sid == kk.team ? "#fff" : "rgba(255,255,255,0.6)"),
            text: ye[c].sid,
            parent: ri
          });
          cc.generateElement({
            class: "joinAlBtn",
            text: "Join",
            onclick: function () {
              il(c);
            },
            hookTouch: true,
            parent: a
          });
        })(b);
      }
    } else {
      cc.generateElement({
        class: "allianceItem",
        text: "",
        parent: ri
      });
    }
    cc.removeAllChildren(Te);
    if (kk.team) {
      cc.generateElement({
        class: "allianceButtonM",
        style: "width: 360px",
        text: kk.isOwner ? "Delete Tribe" : "Leave Tribe",
        onclick: function () {
          kl();
        },
        hookTouch: true,
        parent: Te
      });
    } else {
      cc.generateElement({
        tag: "input",
        type: "text",
        id: "allianceInput",
        maxLength: 7,
        placeholder: "unique name",
        onchange: b => {
          b.target.value = (b.target.value || "").slice(0, 7);
        },
        onkeypress: b => {
          if (b.key === "Enter") {
            b.preventDefault();
            jl();
            return false;
          }
        },
        parent: Te
      });
      cc.generateElement({
        tag: "div",
        class: "allianceButtonM",
        style: "width: 140px;",
        text: "Create",
        onclick: function () {
          jl();
        },
        hookTouch: true,
        parent: Te
      });
    }
  }
}
function hl(b) {
  Eg.send("P", Jh[0].sid, b);
  Jh.splice(0, 1);
  fl();
}
function ti(b) {
  Eg.send("Q", b);
}
function il(b) {
  Eg.send("b", ye[b].sid);
}
function jl() {
  Eg.send("L", document.getElementById("allianceInput").value);
}
function kl() {
  Jh = [];
  fl();
  Eg.send("N");
}
let ll;
let ml;
let pi;
const nl = [];
let je;
function ol() {
  this.init = function (c, a) {
    this.scale = 0;
    this.x = c;
    this.y = a;
    this.active = true;
  };
  this.update = function (c, a) {
    if (this.active) {
      this.scale += a * 0.05;
      if (this.scale >= Cg.mapPingScale) {
        this.active = false;
      } else {
        c.globalAlpha = 1 - Math.max(0, this.scale / Cg.mapPingScale);
        c.beginPath();
        c.arc(this.x / Cg.mapScale * oi.width, this.y / Cg.mapScale * oi.width, this.scale, 0, Math.PI * 2);
        c.stroke();
      }
    }
  };
}
function Je(c, a) {
  for (let b = 0; b < nl.length; ++b) {
    if (!nl[b].active) {
      je = nl[b];
      break;
    }
  }
  if (!je) {
    je = new ol();
    nl.push(je);
  }
  je.init(c, a);
}
function sf() {
  pi ||= {};
  pi.x = kk.x;
  pi.y = kk.y;
}
function rf(b) {
  ml = b;
}
function of(c) {
  if (kk && kk.alive) {
    Tk.clearRect(0, 0, oi.width, oi.height);
    Tk.strokeStyle = "#fff";
    Tk.lineWidth = 1;
    for (var a = 0; a < nl.length; ++a) {
      je = nl[a];
      je.update(Tk, c);
    }
    Tk.globalAlpha = 1;
    Tk.fillStyle = "#fff";
    dn(kk.x / Cg.mapScale * oi.width, kk.y / Cg.mapScale * oi.height, 7, Tk, true);
    Tk.fillStyle = "rgba(255,255,255,0.35)";
    if (kk.team && ml) {
      for (var a = 0; a < ml.length;) {
        dn(ml[a] / Cg.mapScale * oi.width, ml[a + 1] / Cg.mapScale * oi.height, 7, Tk, true);
        a += 2;
      }
    }
    if (ll) {
      Tk.fillStyle = "#fc5553";
      Tk.font = "25px Hammersmith One";
      Tk.textBaseline = "middle";
      Tk.textAlign = "center";
      Tk.fillText("💀", ll.x / Cg.mapScale * oi.width, ll.y / Cg.mapScale * oi.height);
    }
    if (pi) {
      Tk.fillStyle = "#fff";
      Tk.font = "25px Hammersmith One";
      Tk.textBaseline = "middle";
      Tk.textAlign = "center";
      Tk.fillText("💀", pi.x / Cg.mapScale * oi.width, pi.y / Cg.mapScale * oi.height);
    }
  }
}
let af = 0;
function pl(b) {
  if (af != b) {
    af = b;
    rl();
  }
}
function ql() {
  if (Nh.style.display != "block") {
    Nh.style.display = "block";
    Sk.style.display = "none";
    Al();
    rl();
  } else {
    cf();
  }
}
function cf() {
  if (Nh.style.display == "block") {
    Nh.style.display = "none";
    Kh();
  }
}
function hf(d, a, b) {
  if (b) {
    if (d) {
      kk.tailIndex = a;
    } else {
      kk.tails[a] = 1;
    }
  } else if (d) {
    kk.skinIndex = a;
  } else {
    kk.skins[a] = 1;
  }
  if (Nh.style.display == "block") {
    rl();
  }
}
function rl() {
  if (kk) {
    cc.removeAllChildren(ce);
    const e = af;
    const a = e ? Vk : Uk;
    for (let b = 0; b < a.length; ++b) {
      if (!a[b].dontSell) {
        (function (b) {
          const c = cc.generateElement({
            id: "storeDisplay" + b,
            class: "storeItem",
            onmouseout: function () {
              Kh();
            },
            onmouseover: function () {
              Kh(a[b], false, true);
            },
            parent: ce
          });
          cc.hookTouchEvents(c, true);
          cc.generateElement({
            tag: "img",
            class: "hatPreview",
            src: "./img/" + (e ? "accessories/access_" : "hats/hat_") + a[b].id + (a[b].topSprite ? "_p" : "") + ".png",
            parent: c
          });
          cc.generateElement({
            tag: "span",
            text: a[b].name,
            parent: c
          });
          if (e ? !kk.tails[a[b].id] : !kk.skins[a[b].id]) {
            cc.generateElement({
              class: "joinAlBtn",
              style: "margin-top: 5px",
              text: "Buy",
              onclick: function () {
                sl(a[b].id, e);
              },
              hookTouch: true,
              parent: c
            });
            cc.generateElement({
              tag: "span",
              class: "itemPrice",
              text: a[b].price,
              parent: c
            });
          } else if ((e ? kk.tailIndex : kk.skinIndex) == a[b].id) {
            cc.generateElement({
              class: "joinAlBtn",
              style: "margin-top: 5px",
              text: "Unequip",
              onclick: function () {
                ff(0, e);
              },
              hookTouch: true,
              parent: c
            });
          } else {
            cc.generateElement({
              class: "joinAlBtn",
              style: "margin-top: 5px",
              text: "Equip",
              onclick: function () {
                ff(a[b].id, e);
              },
              hookTouch: true,
              parent: c
            });
          }
        })(b);
      }
    }
  }
}
function ff(c, a) {
  Eg.send("c", 0, c, a);
}
function sl(c, a) {
  Eg.send("c", 1, c, a);
}
function tl() {
  Nh.style.display = "none";
  Sk.style.display = "none";
  Al();
}
function ul() {
  const c = bk("native_resolution");
  uf(c ? c == "true" : typeof cordova !== "undefined");
  Bh = bk("show_ping") == "true";
  Fk.hidden = !Bh || !tk;
  bk("moo_moosic");
  setInterval(function () {
    if (window.cordova) {
      document.getElementById("downloadButtonContainer").classList.add("cordova");
      document.getElementById("mobileDownloadButtonContainer").classList.add("cordova");
    }
  }, 1000);
  df();
  cc.removeAllChildren(Lk);
  for (var a = 0; a < xc.weapons.length + xc.list.length; ++a) {
    (function (b) {
      cc.generateElement({
        id: "actionBarItem" + b,
        class: "actionBarItem",
        style: "display:none",
        onmouseout: function () {
          Kh();
        },
        parent: Lk
      });
    })(a);
  }
  for (var a = 0; a < xc.list.length + xc.weapons.length; ++a) {
    (function (g) {
      const a = document.createElement("canvas");
      a.width = a.height = 66;
      const b = a.getContext("2d");
      b.translate(a.width / 2, a.height / 2);
      b.imageSmoothingEnabled = false;
      b.webkitImageSmoothingEnabled = false;
      b.mozImageSmoothingEnabled = false;
      if (xc.weapons[g]) {
        b.rotate(Math.PI / 4 + Math.PI);
        var c = new Image();
        Zm[xc.weapons[g].src] = c;
        c.onload = function () {
          this.isLoaded = true;
          const c = 1 / (this.height / this.width);
          const d = xc.weapons[g].iPad || 1;
          b.drawImage(this, -(a.width * d * Cg.iconPad * c) / 2, -(a.height * d * Cg.iconPad) / 2, a.width * d * c * Cg.iconPad, a.height * d * Cg.iconPad);
          b.fillStyle = "rgba(0, 0, 70, 0.1)";
          b.globalCompositeOperation = "source-atop";
          b.fillRect(-a.width / 2, -a.height / 2, a.width, a.height);
          document.getElementById("actionBarItem" + g).style.backgroundImage = "url(" + a.toDataURL() + ")";
        };
        c.src = "./img/weapons/" + xc.weapons[g].src + ".png";
        var h = document.getElementById("actionBarItem" + g);
        h.onmouseover = cc.checkTrusted(function () {
          Kh(xc.weapons[g], true);
        });
        h.onclick = cc.checkTrusted(function () {
          om(g, true);
        });
        cc.hookTouchEvents(h);
      } else {
        var c = Ff(xc.list[g - xc.weapons.length], true);
        const d = Math.min(a.width - Cg.iconPadding, c.width);
        b.globalAlpha = 1;
        b.drawImage(c, -d / 2, -d / 2, d, d);
        b.fillStyle = "rgba(0, 0, 70, 0.1)";
        b.globalCompositeOperation = "source-atop";
        b.fillRect(-d / 2, -d / 2, d, d);
        document.getElementById("actionBarItem" + g).style.backgroundImage = "url(" + a.toDataURL() + ")";
        var h = document.getElementById("actionBarItem" + g);
        h.onmouseover = cc.checkTrusted(function () {
          Kh(xc.list[g - xc.weapons.length]);
        });
        h.onclick = cc.checkTrusted(function () {
          om(g - xc.weapons.length);
        });
        cc.hookTouchEvents(h);
      }
    })(a);
  }
  Lh.onchange = b => {
    b.target.value = (b.target.value || "").slice(0, 15);
  };
  Lh.onkeypress = b => {
    if (b.key === "Enter") {
      b.preventDefault();
      vk.onclick(b);
      return false;
    }
  };
  M.checked = xi;
  M.onchange = cc.checkTrusted(function (b) {
    uf(b.target.checked);
  });
  zh.checked = Bh;
  zh.onchange = cc.checkTrusted(function (b) {
    Bh = zh.checked;
    Fk.hidden = !Bh;
    Ze("show_ping", Bh ? "true" : "false");
  });
}
function vl(d, a) {
  if (d) {
    if (a) {
      kk.weapons = d;
    } else {
      kk.items = d;
    }
  }
  for (var b = 0; b < xc.list.length; ++b) {
    const c = xc.weapons.length + b;
    document.getElementById("actionBarItem" + c).style.display = kk.items.indexOf(xc.list[b].id) >= 0 ? "inline-block" : "none";
  }
  for (var b = 0; b < xc.weapons.length; ++b) {
    document.getElementById("actionBarItem" + b).style.display = kk.weapons[xc.weapons[b].type] == xc.weapons[b].id ? "inline-block" : "none";
  }
}
function uf(b) {
  xi = b;
  dk = b && window.devicePixelRatio || 1;
  M.checked = b;
  Ze("native_resolution", b.toString());
  Ri();
}
function wl() {
  if (gf) {
    Ik.classList.add("touch");
  } else {
    Ik.classList.remove("touch");
  }
}
function xl() {
  if (Ik.classList.contains("showing")) {
    Ik.classList.remove("showing");
    yk.innerText = "Settings";
  } else {
    Ik.classList.add("showing");
    yk.innerText = "Close";
  }
}
function df() {
  let b = "";
  for (let a = 0; a < Cg.skinColors.length; ++a) {
    me.innerHTML = b;
  }
}
function pf(b) {
  _e = b;
  df();
}
const yl = document.getElementById("chatBox");
const mf = document.getElementById("chatHolder");
function zl() {
  if (gf) {
    setTimeout(function () {
      const b = prompt("chat message");
      if (b) {
        Si(b);
      }
    }, 1);
  } else if (mf.style.display == "block") {
    if (yl.value) {
      Si(yl.value);
    }
    Al();
  } else {
    Nh.style.display = "none";
    Sk.style.display = "none";
    mf.style.display = "block";
    yl.focus();
    Pl();
  }
  yl.value = "";
}
function Si(b) {
  Eg.send("6", b.slice(0, 30));
}
function Al() {
  yl.value = "";
  mf.style.display = "none";
}
function Bl(d, a) {
  const b = Tn(d);
  if (b) {
    b.chatMessage = a;
    b.chatCountdown = Cg.chatCountdown;
  }
}
window.addEventListener("resize", cc.checkTrusted(Ri));
function Ri() {
  se = window.innerWidth;
  re = window.innerHeight;
  const b = Math.max(se / rk, re / sk) * dk;
  Ck.width = se * dk;
  Ck.height = re * dk;
  Ck.style.width = se + "px";
  Ck.style.height = re + "px";
  Dk.setTransform(b, 0, 0, b, (se * dk - rk * b) / 2, (re * dk - sk * b) / 2);
}
Ri();
let gf;
Cl(false);
function Cl(b) {
  gf = b;
  wl();
}
window.setUsingTouch = Cl;
let ii = document.getElementById("leaderboardButton");
let Dl = document.getElementById("leaderboard");
ii.addEventListener("touchstart", () => {
  Dl.classList.add("is-showing");
});
const yf = () => {
  Dl.classList.remove("is-showing");
};
document.body.addEventListener("touchend", yf);
document.body.addEventListener("touchleave", yf);
document.body.addEventListener("touchcancel", yf);
if (!Me) {
  let e = function (b) {
    b.preventDefault();
    b.stopPropagation();
    Cl(false);
    nk = b.clientX;
    ok = b.clientY;
  };
  let a = function (b) {
    Cl(false);
    if (hk != 1) {
      hk = 1;
      lm();
    }
  };
  let b = function (b) {
    Cl(false);
    if (hk != 0) {
      hk = 0;
      lm();
    }
  };
  var El = e;
  var Fl = a;
  var Gl = b;
  const c = document.getElementById("touch-controls-fullscreen");
  c.style.display = "block";
  c.addEventListener("mousemove", e, false);
  c.addEventListener("mousedown", a, false);
  c.addEventListener("mouseup", b, false);
}
let Hl = false;
let Il;
function Jl() {
  let e = 0;
  let f = 0;
  let d;
  if (gf) {
    if (!Hl) {
      return;
    }
    d = Il;
  }
  for (const a in Ol) {
    const b = Ol[a];
    e += !!gk[a] * b[0];
    f += !!gk[a] * b[1];
  }
  if (e != 0 || f != 0) {
    d = Math.atan2(f, e);
  }
  if (d !== undefined) {
    return cc.fixTo(d, 2);
  }
}
let Kl;
let wf = {
  tick: 0,
  delay: 0,
  time: [],
  manage: []
};
let Ti = 0;
let Ll = 0;
let Ml = "none";
function Nl() {
  if (kk && kk.alive) {
    if (Jn && N && kk.health > 0) {
      Ml = "aim";
      return rn(Jn);
    } else if (K && kk.health > 0 && !jb) {
      Ml = "random";
      Ll += 1 / 0.4;
      return Ll;
    } else if (m) {
      Ml = "spin360";
      return rn(Jn) + Math.PI;
    } else if (!kk.lockDir && !gf && kk.health > 0) {
      Ml = "mouse";
      Kl = Math.atan2(ok - re / 2, nk - se / 2);
      return cc.fixTo(Kl, 2);
    }
    ;
    return 0;
  }
  ;
}
;
var gk = {};
var Ol = {
  87: [0, -1],
  38: [0, -1],
  83: [0, 1],
  40: [0, 1],
  65: [-1, 0],
  37: [-1, 0],
  68: [1, 0],
  39: [1, 0]
};
function Pl() {
  gk = {};
  Eg.send("e");
}
function Ii(b) {
  return document.getElementById(b);
}
setInterval(() => {
  if (Jn && i) {
    if (Jn && Kn(Jn, kk) < 210 && Kn(Jn, kk) > 200) {
      Ql();
    } else if (Jn && Kn(Jn, kk) <= 200) {
      qn(40);
      om(kk.items[2]);
      Eg.send("a", rn(Jn) + pn(180));
    } else if (Jn && Kn(Jn, kk) >= 210) {
      om(kk.items[2]);
      qn(40);
      Eg.send("a", rn(Jn) + pn(0));
    }
  }
}, 50);
function Ql() {
  i = false;
  qn(40);
  Eg.send("a", null);
  setTimeout(() => {
    i = false;
    Rl;
  }, 200);
}
function Rl() {
  Eg.send("a", rn(Jn) + pn(0));
  N = true;
  qn(53);
  setTimeout(() => {
    qn(7);
    mn(kk.weapons[0], true);
    Eg.send("K", 1);
  }, 100);
  setTimeout(() => {
    Eg.send("a", null);
    N = false;
    qn(6);
    mn(kk.weapons[0], true);
    Eg.send("K", 1);
  }, 200);
}
var Sl = false;
setInterval(() => {
  if (Sl) {
    if (Jn && Kn(Jn, kk) < 328 && Kn(Jn, kk) > 325) {
      Tl();
      Sl = false;
    } else if (Jn && Kn(Jn, kk) <= 325) {
      qn(40);
      om(kk.items[1]);
      Eg.send("a", rn(Jn) + pn(180));
    } else if (Jn && Kn(Jn, kk) >= 328) {
      qn(40);
      om(kk.items[2]);
      Eg.send("a", rn(Jn) + pn(0));
    }
  }
}, 80);
function Tl() {
  qn(6);
  Eg.send("a", null);
  setTimeout(() => {
    qn(53);
    Ul();
  }, 100);
}
function Ul() {
  Eg.send("6", "AT:Midori257");
  qn(53);
  nn(4, rn(Jn));
  mn(kk.weapons[1], true);
  N = true;
  Eg.send("d", 1);
  Eg.send("a", rn(Jn));
  setTimeout(() => {
    qn(7);
    mn(kk.weapons[0], true);
  }, 70);
  setTimeout(() => {
    Eg.send("a", null);
    qn(6);
    mn(kk.weapons[0], true);
    Eg.send("d", 0);
    N = false;
  }, 200);
}
setInterval(() => {
  if (ob) {
    if (Jn && Kn(Jn, kk) < 328 && Kn(Jn, kk) > 325) {
      Tl();
      ob = false;
    } else if (Jn && Kn(Jn, kk) <= 325) {
      qn(40);
      Eg.send("a", rn(Jn) + pn(180));
    } else if (Jn && Kn(Jn, kk) >= 328) {
      qn(40);
      Eg.send("a", rn(Jn) + pn(0));
    }
  }
}, 80);
function Vl() {
  return Sk.style.display != "block" && mf.style.display != "block";
}
function Wl(c) {
  const a = c.which || c.keyCode || 0;
  if (a == 27) {
    tl();
  } else if (kk && kk.alive && Vl()) {
    if (!gk[a]) {
      gk[a] = 1;
      if (a == 69) {
        xf();
      } else if (a == 84) {
        cm();
      } else if (a == 67) {
        sf();
      } else if (a == 88) {
        nm();
      } else if (kk.weapons[a - 49] != null) {
        om(kk.weapons[a - 49], true);
      } else if (kk.items[a - 49 - kk.weapons.length] != null) {
        om(kk.items[a - 49 - kk.weapons.length]);
      } else if (a == 81) {
        om(kk.items[0]);
      } else if (a == 82) {
        Mi();
      } else if (Ol[a]) {
        mm();
      } else if (a == 32) {
        hk = 1;
        lm();
      }
    }
  }
  if (a == 77 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Jb = !Jb;
  }
  if (a == 90 && document.activeElement.id.toLowerCase() !== "chatbox") {
    dm();
  }
  if (a == 76 && document.activeElement.id.toLowerCase() !== "chatbox") {
    em();
  }
  if (a == 192 && document.activeElement.id.toLowerCase() !== "chatbox") {
    bb = !bb;
    Eg.send("6", "" + bb);
  }
  if (a == 66 && document.activeElement.id.toLowerCase() !== "chatbox") {
    bm();
  }
  if (a == 71 && document.activeElement.id.toLowerCase() !== "chatbox") {
    i = !i;
    Eg.send("6", "1frame: " + i);
  }
  if (a == 82 && document.activeElement.id.toLowerCase() !== "chatbox") {
    qb = !qb;
  }
  if (a == 16 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Cn();
  }
  if (a == 74 && document.activeElement.id.toLowerCase() !== "chatbox") {
    ob = !ob;
    Eg.send("6", "one1tick: " + ob);
  }
  if (a == 190 && document.activeElement.id.toLowerCase() !== "chatbox") {
    hd = !hd;
    Eg.send("6", "" + hd);
  }
  if (a == 112 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Sl = !Sl;
    Eg.send("6", "RzTick: " + Sl);
  }
}
let Xl = 0;
let kf = Date.now();
var Yl = [];
var Zl;
var $l = [];
var _l = 0;
function am() {
  window.requestAnimationFrame(() => {
    const c = performance.now();
    while (Yl.length > 0 && Yl[0] <= c - 1000) {
      Yl.shift();
    }
    Yl.push(c);
    Zl = Yl.length;
    am();
    $l.push(Zl);
    if ($l.length > 100) {
      $l.shift();
    }
    const a = $l.reduce((c, a) => c + a, 0);
    if (Date.now() - kf > 100) {
      Xl = (a / $l.length).toFixed();
    }
  });
}
am();
function bm() {
  qn(6);
  fm(Kn(Jn, kk) < 250 ? 21 : 11, 1);
  Tb.push(b => fm(6, true));
}
function cm() {
  if (Jn) {
    N = true;
    qn(53, 0);
    nn(4, rn(Jn));
    Eg.send("a", rn(Jn));
    Eg.send("K", 1);
    mn(kk.weapons[1], true);
    setTimeout(() => {
      mn(kk.weapons[0], true);
      qn(7, 0);
    }, 90);
    setTimeout(() => {
      Eg.send("a", null);
      Eg.send("K", 1);
      mn(kk.weapons[0], true);
      qn(6, 0);
      N = false;
    }, 200);
  }
}
function dm() {
  qn(40);
  fm(Kn(Jn, kk) < 250 ? 21 : 11, 1);
  Tb.push(b => fm(6, true));
}
function em() {
  if (kk.age >= 9 && kk.secondaryIndex == 9) {
    N = true;
    qn(53);
    Eg.send("d", 1);
    od();
    setTimeout(() => {
      qn(12);
      Eg.send("H", 12);
      fm(11, 1);
      Tb.push(b => fm(6, true));
    }, 100);
    setTimeout(() => {
      fm(18, 1);
      Tb.push(b => fm(6, true));
      qn(20);
      Eg.send("H", 15);
    }, 250);
    setTimeout(() => {
      N = false;
      Cn();
      nd();
      Eg.send("d", 0);
    }, 400);
  } else {
    N = true;
    qn(53);
    Eg.send("d", 1);
    od();
    setTimeout(() => {
      N = false;
      Cn();
      Eg.send("d", 0);
    }, 100);
  }
}
function fm(d, a) {
  let b = go(Vk, d);
  if (kk.tails[d] || b.price == 0) {
    if (kk.tailIndex != d) {
      Eg.send("c", 0, d, 1);
    }
  } else if (h) {
    if (b) {
      if (kk.points >= b.price) {
        Eg.send("c", 1, d, 1);
        Eg.send("c", 0, d, 1);
      } else if (kk.tailIndex != 0) {
        Eg.send("c", 0, 0, 1);
      }
    } else if (kk.tailIndex != 0) {
      Eg.send("c", 0, 0, 1);
    }
  } else if (kk.tailIndex != 0) {
    Eg.send("c", 0, 0, 1);
  }
}
function gm(c, a) {
  Eg.send("c", 1, c, a);
}
function hm(c, a) {
  gm(c, a);
  fm(c, a);
}
function im() {
  if (Jn) {
    w = true;
    qb = false;
    qn(7);
    nd();
    Eg.send("D", rn(Jn));
    N = true;
    Eg.send("d", 1);
    setTimeout(() => {
      Eg.send("D", null);
      od();
      qn(Jn.skinIndex == 6 || Jn.skinIndex == 6 && kk.weaponVariant < 2 ? 53 : 26);
    }, 100);
    setTimeout(() => {
      N = false;
      w = false;
      qn(6);
      nd();
      Eg.send("d", 0);
      gb = true;
    }, 220);
  }
}
function jm(c) {
  return new Promise(a => setTimeout(a, c));
}
window.addEventListener("keydown", cc.checkTrusted(Wl));
function km(c) {
  if (kk && kk.alive) {
    const a = c.which || c.keyCode || 0;
    if (a == 13) {
      if (Sk.style.display === "block") {
        return;
      }
      zl();
    } else if (Vl() && gk[a]) {
      gk[a] = 0;
      if (Ol[a]) {
        mm();
      } else if (a == 32) {
        hk = 0;
        lm();
      }
    }
  }
}
window.addEventListener("keyup", cc.checkTrusted(km));
function lm() {
  if (kk && kk.alive) {
    Eg.send("d", hk, kk.buildIndex >= 0 ? Nl() : null);
  }
}
let vf;
function mm() {
  const b = Jl();
  if (vf == null || b == null || Math.abs(b - vf) > 0.3) {
    Eg.send("a", b);
    vf = b;
  }
}
function nm() {
  kk.lockDir = kk.lockDir ? 0 : 1;
  Eg.send("K", 0);
}
function Mi() {
  Eg.send("S", 1);
}
function xf() {
  Eg.send("K", 1);
}
function om(c, a) {
  Eg.send("G", c, a);
}
window.io = Eg;
function bf() {
  Eg.send("M", {
    name: Lh.value,
    moofoll: Di,
    skin: Math.floor(Math.random() * 12)
  });
}
function pm() {
  var b = document.getElementById("ot-sdk-btn-floating");
  if (b) {
    b.style.display = "none";
  }
}
function qm() {
  var b = document.getElementById("ot-sdk-btn-floating");
  if (b) {
    b.style.display = "block";
  }
}
let Sf = true;
let Tf = false;
function Ei(b) {
  Jk.style.display = "none";
  Hk.style.display = "block";
  uk.style.display = "none";
  gk = {};
  lk = b;
  hk = 0;
  tk = true;
  if (Sf) {
    Sf = false;
    J.length = 0;
  }
  if (Me) {
    Tj.enable({
      onStartMoving: () => {
        cf();
        tf();
        Cl(true);
        Hl = true;
      },
      onStopMoving: () => {
        Hl = false;
        mm();
      },
      onRotateMoving: (c, a) => {
        if (a.force >= 0.25) {
          Il = -a.angle.radian;
          mm();
          if (!Tf) {
            Kl = -a.angle.radian;
          }
        }
      },
      onStartAttacking: () => {
        cf();
        tf();
        Cl(true);
        Tf = true;
        if (kk.buildIndex < 0) {
          hk = 1;
          lm();
        }
      },
      onStopAttacking: () => {
        if (kk.buildIndex >= 0) {
          hk = 1;
          lm();
        }
        hk = 0;
        lm();
        Tf = false;
      },
      onRotateAttacking: (c, a) => {
        if (a.force >= 0.25) {
          Kl = -a.angle.radian;
        }
      }
    });
  }
}
function rm() {
  const d = Math.floor(Math.random() * 556);
  const a = Math.floor(Math.random() * 556);
  const b = Math.floor(Math.random() * 556);
  return "rgba(" + d + ", " + a + ", " + b + ", " + 1 + ")";
}
function If(e, a, b, c) {
  if (!lb) {
    if (c === -1) {
      Uj.showText(e, a, 1, 0.1, 0, b, "#ee5551");
    } else {
      Uj.showText(e, a, 46, 0.08, 620, Math.abs(b), b >= 0 ? "#fff" : "#fff");
    }
  } else if (c === -1) {
    Uj.showText(e, a, 1, 0.1, 0, b, "#ee5551");
  } else {
    Uj.showText(e, a, 44, 0.18, 600, Math.abs(b), b >= 0 ? "#fff" : "#fff");
  }
}
let sm = false;
let Mf = 99999;
function tm() {
  tk = false;
  qm();
  try {
    factorem.refreshAds([2], true);
  } catch {}
  Kk.style.display = "none";
  tl();
  ll = {
    x: kk.x,
    y: kk.y
  };
  setTimeout(function () {
    Hk.style.display = "block";
    uk.style.display = "block";
    ai.style.display = "none";
  }, Cg.deathFadeout);
  cl();
}
function mi(b) {
  if (kk) {
    Wk.removeAllItems(b);
  }
}
function Ef(g, a, b, c) {
  let d = {
    x: b == 0 ? g.x : b == 1 ? g.x1 : b == 2 ? g.nextx : b == 3 && g.x3,
    y: b == 0 ? g.y : b == 1 ? g.y1 : b == 2 ? g.nexty : b == 3 && g.y3
  };
  let e = {
    x: c == 0 ? a.x : c == 1 ? a.x1 : c == 2 ? a.nextx : c == 3 && a.x3,
    y: c == 0 ? a.y : c == 1 ? a.y1 : c == 2 ? a.nexty : c == 3 && a.y3
  };
  return Math.atan2(d.y - e.y, d.x - e.x);
}
function Pf(e, a, b, c) {
  return Math.atan2(c - a, b - e);
}
var um = false;
function vm(b) {
  try {
    if (a.trap && d < 70 && kk.sid != a.owner.sid && !oo(a.owner.sid)) {
      qn(6);
    }
  } catch (b) {} finally {
    var a = Vn(b);
    var c = Ef(a, kk, 0, 2);
    var d = Kn(a, kk, 0, 2);
    Wk.disableBySid(b);
    if (E !== kk && Jn && E !== oo) {
      Je(E.x2, E.y2, true);
    }
  }
  try {
    if (Ab && sb) {
      nn(Kn(Jn, kk) < 170 ? 2 : null, c);
      K = true;
      Ab = false;
      Eg.send("d", 0);
      qn(6);
      setTimeout(() => {
        K = false;
      }, 200);
    } else if (Jn && Kn(Jn, kk) < 170 && Eg.sendCount < 100 && !w) {
      let f = xc.list[kk.items[2]];
      let a = xc.list[15];
      let b = Pb(Jn.x2, Jn.y2, kk.x2, kk.y2);
      let g = p(Jn.x2, Jn.y2, kk.x2, kk.y2);
      let c = false;
      for (let a = 0; a < 90 - f.scale; a += 5) {
        let b = f.scale + pn(a);
        nn(2, g + b);
        break;
      }
    }
  } catch (b) {} finally {
    if (E !== kk && Jn && E !== oo) {
      Je(E.x2, E.y2, true);
    }
    Wk.disableBySid(b);
  }
}
document.getElementById("diedText").remove();
function wm(d, a) {
  let b = d - a.health;
  if (b > 0) {
    if (a.gotTime) {
      if (n - a.gotTime <= 1) {
        a.clownCounter++;
      } else {
        a.clownCounter = Math.max(0, a.clownCounter - 2);
      }
    }
    a.gotTime = 0;
  } else {
    a.gotTime = n;
  }
}
const Cf = {
  wood: 0,
  stone: 0,
  food: 0,
  points: 0,
  kills: 0
};
setInterval(ym, 4);
const xm = b => {
  if (b >= 1000) {
    return (b / 1000).toFixed(2) + "k";
  } else {
    return b.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
  }
  ;
};
function ym() {
  Cf.points += (kk.points - Cf.points) / 8;
  Mk.innerText = xm(Math.round(Cf.points));
  Nk.innerText = kk.food;
  Hh.innerText = kk.wood;
  Fh.innerText = kk.stone;
  Vh.innerText = kk.kills;
}
const zm = {};
const Am = ["crown", "skull"];
function Bm() {
  for (let c = 0; c < Am.length; ++c) {
    const a = new Image();
    a.onload = function () {
      this.isLoaded = true;
    };
    a.src = "./img/icons/" + Am[c] + ".png";
    zm[Am[c]] = a;
  }
}
const Cm = [];
function Af(e, a) {
  kk.upgradePoints = e;
  kk.upgrAge = a;
  if (e > 0) {
    Cm.length = 0;
    cc.removeAllChildren(Qk);
    for (var b = 0; b < xc.weapons.length; ++b) {
      if (xc.weapons[b].age == a && (xc.weapons[b].pre == null || kk.weapons.indexOf(xc.weapons[b].pre) >= 0)) {
        var f = cc.generateElement({
          id: "upgradeItem" + b,
          class: "actionBarItem",
          onmouseout: function () {
            Kh();
          },
          parent: Qk
        });
        f.style.backgroundImage = document.getElementById("actionBarItem" + b).style.backgroundImage;
        Cm.push(b);
      }
    }
    for (var b = 0; b < xc.list.length; ++b) {
      if (xc.list[b].age == a && (xc.list[b].pre == null || kk.items.indexOf(xc.list[b].pre) >= 0)) {
        const c = xc.weapons.length + b;
        var f = cc.generateElement({
          id: "upgradeItem" + c,
          class: "actionBarItem",
          onmouseout: function () {
            Kh();
          },
          parent: Qk
        });
        f.style.backgroundImage = document.getElementById("actionBarItem" + c).style.backgroundImage;
        Cm.push(c);
      }
    }
    for (var b = 0; b < Cm.length; b++) {
      (function (c) {
        const a = document.getElementById("upgradeItem" + c);
        a.onmouseover = function () {
          if (xc.weapons[c]) {
            Kh(xc.weapons[c], true);
          } else {
            Kh(xc.list[c - xc.weapons.length]);
          }
        };
        a.onclick = cc.checkTrusted(function () {
          Eg.send("H", c);
        });
        cc.hookTouchEvents(a);
      })(Cm[b]);
    }
    if (Cm.length) {
      Qk.style.display = "block";
      Rk.style.display = "block";
      Rk.innerHTML = "";
    } else {
      Qk.style.display = "none";
      Rk.style.display = "none";
      Kh();
    }
  } else {
    Qk.style.display = "none";
    Rk.style.display = "none";
    Kh();
  }
}
function Dm(d, a, b) {
  if (d != null) {
    kk.XP = d;
  }
  if (a != null) {
    kk.maxXP = a;
  }
  if (b != null) {
    kk.age = b;
  }
}
function Em(d) {
  cc.removeAllChildren(Uh);
  let a = 1;
  for (let b = 0; b < d.length; b += 3) {
    (function (a) {
      cc.generateElement({
        class: "leaderHolder",
        parent: Uh,
        children: [cc.generateElement({
          class: "leaderboardItem",
          style: "color:" + (d[a] == "#fff"),
          text: d[a + 1] != "" ? d[a + 1] : "NaN",
          font: "21px Cursive"
        }), cc.generateElement({
          class: "leaderScore",
          text: cc.kFormat(d[a + 2]) || "NaN"
        })]
      });
    })(b);
    a++;
  }
}
let Fm = null;
function Df() {
  {
    if (kk && (!be || ek - be >= 1000 / Cg.clientSendRate)) {
      be = ek;
      const b = Nl();
      if (Fm !== b) {
        Fm = b;
        Eg.send("D", b);
      }
    }
    if (Mf < 120) {
      Mf += $e * 0.1;
      ai.style.fontSize = Math.min(Math.round(Mf), 120) + "px";
    }
    if (kk) {
      const d = cc.getDistance(pk, qk, kk.x, kk.y);
      const a = cc.getDirection(kk.x, kk.y, pk, qk);
      const b = Math.min(d * (Sb ? 0.0042 : Number.MAX_VALUE) * $e, d);
      if (d > 0.05) {
        pk += b * Math.cos(a);
        qk += b * Math.sin(a);
      } else {
        pk = kk.x;
        qk = kk.y;
      }
    } else {
      pk = Cg.mapScale / 2;
      qk = Cg.mapScale / 2;
    }
    const a = ek - 1000 / Cg.serverUpdateRate;
    var g;
    for (var h = 0; h < Ee.length + He.length; ++h) {
      E = Ee[h] || He[h - Ee.length];
      if (E && E.visible) {
        if (E.forcePos) {
          E.x = E.x2;
          E.y = E.y2;
          E.dir = E.d2;
        } else {
          const f = E.t2 - E.t1;
          const b = (a - E.t1) / f;
          const c = 170;
          E.dt += $e;
          const d = Math.min(1.7, E.dt / c);
          var g = E.x2 - E.x1;
          E.x = E.x1 + g * d;
          g = E.y2 - E.y1;
          E.y = E.y1 + g * d;
          E.dir = Math.lerpAngle(E.d2, E.d1, Math.min(4.2, b));
        }
      }
    }
    const j = pk - rk / 2;
    const l = qk - sk / 2;
    if (Cg.snowBiomeTop - l <= 0 && Cg.mapScale - Cg.snowBiomeTop - l >= sk) {
      Dk.fillStyle = "#b6db66";
      Dk.fillRect(0, 0, rk, sk);
    } else if (Cg.mapScale - Cg.snowBiomeTop - l <= 0) {
      Dk.fillStyle = "#dbc666";
      Dk.fillRect(0, 0, rk, sk);
    } else if (Cg.snowBiomeTop - l >= sk) {
      Dk.fillStyle = "#fff";
      Dk.fillRect(0, 0, rk, sk);
    } else if (Cg.snowBiomeTop - l >= 0) {
      Dk.fillStyle = "#fff";
      Dk.fillRect(0, 0, rk, Cg.snowBiomeTop - l);
      Dk.fillStyle = "#b6db66";
      Dk.fillRect(0, Cg.snowBiomeTop - l, rk, sk - (Cg.snowBiomeTop - l));
    } else {
      Dk.fillStyle = "#b6db66";
      Dk.fillRect(0, 0, rk, Cg.mapScale - Cg.snowBiomeTop - l);
      Dk.fillStyle = "#dbc666";
      Dk.fillRect(0, Cg.mapScale - Cg.snowBiomeTop - l, rk, sk - (Cg.mapScale - Cg.snowBiomeTop - l));
    }
    if (!Sf) {
      mk += y * Cg.waveSpeed * $e;
      if (mk >= Cg.waveMax) {
        mk = Cg.waveMax;
        y = -1;
      } else if (mk <= 1) {
        mk = y = 1;
      }
      Dk.globalAlpha = 1;
      Dk.fillStyle = "#dbc666";
      Jm(j, l, Dk, Cg.riverPadding);
      Dk.fillStyle = "#91b2db";
      Jm(j, l, Dk, (mk - 1) * 250);
    }
    Dk.lineWidth = 4;
    Dk.strokeStyle = "#000";
    Dk.globalAlpha = 0.06;
    Dk.beginPath();
    for (var i = -pk; i < rk; i += sk / (lb ? 18 : 0)) {
      if (i > 0) {
        Dk.moveTo(i, 0);
        Dk.lineTo(i, sk);
      }
    }
    for (let b = -qk; b < sk; b += sk / (lb ? 18 : 0)) {
      Dk.stroke();
      Dk.globalAlpha = 1;
      Dk.strokeStyle = Xk;
      Mm(-1, j, l);
      Dk.globalAlpha = 1;
      Dk.lineWidth = ei;
      Gm(0, j, l);
      Rm(j, l, 0);
      Dk.globalAlpha = 1;
    }
    for (var h = 0; h < He.length; ++h) {
      E = He[h];
      if (E.active && E.visible) {
        E.animate($e);
        Dk.save();
        Dk.translate(E.x - j, E.y - l);
        Dk.rotate(E.dir + E.dirPlus - Math.PI / 2);
        Kf(E, Dk);
        Dk.restore();
      }
    }
    Mm(0, j, l);
    Gm(1, j, l);
    Mm(1, j, l);
    fo(Dk, j, l, J);
    Rm(j, l, 1);
    Mm(2, j, l);
    Mm(3, j, l);
    Dk.fillStyle = "#000";
    Dk.globalAlpha = 0.09;
    if (j <= 0) {
      Dk.fillRect(0, 0, -j, sk);
    }
    if (Cg.mapScale - j <= rk) {
      var k = Math.max(0, -l);
      Dk.fillRect(Cg.mapScale - j, k, rk - (Cg.mapScale - j), sk - k);
    }
    if (l <= 0) {
      Dk.fillRect(-j, 0, rk + j, -l);
    }
    if (Cg.mapScale - l <= sk) {
      var n = Math.max(0, -j);
      let b = 0;
      if (Cg.mapScale - j <= rk) {
        b = rk - (Cg.mapScale - j);
      }
      Dk.fillRect(n, Cg.mapScale - l, rk - n - b, sk - (Cg.mapScale - l));
    }
    Dk.globalAlpha = 1;
    Dk.fillStyle = "rgba(0, 0, 70, 0.35)";
    Dk.fillRect(0, 0, rk, sk);
    Dk.strokeStyle = ue;
    for (var h = 0; h < Ee.length + He.length; ++h) {
      E = Ee[h] || He[h - Ee.length];
      if (E.visible && (E.skinIndex != 10 || E == kk || E.team && E.team == kk.team)) {
        const e = (E.team ? "" + E.team + "ϡ " : "") + (E.name || "");
        if (e != "") {
          Dk.font = 28 + "px Hammersmith One";
          Dk.fillStyle = E == Jn ? "red" : "#fff";
          Dk.textBaseline = "middle";
          Dk.textAlign = "center";
          Dk.lineWidth = 8.6;
          Dk.lineJoin = "round";
          Dk.strokeText(e, E.x - j, E.y - l - E.scale - Cg.nameY);
          Dk.fillText(e, E.x - j, E.y - l - E.scale - Cg.nameY);
          if (E.isLeader && zm.crown.isLoaded) {
            var o = Cg.crownIconScale;
            var n = E.x - j - o / 2 - Dk.measureText(e).width / 2 - Cg.crownPad;
            Dk.drawImage(zm.crown, n, E.y - l - E.scale - Cg.nameY - o / 2 - 5, o, o);
          }
          if (E.iconIndex == 1 && zm.skull.isLoaded) {
            var o = Cg.crownIconScale;
            var n = E.x - j - o / 2 + Dk.measureText(e).width / 2 + Cg.crownPad;
            Dk.drawImage(zm.skull, n, E.y - l - E.scale - Cg.nameY - o / 2 - 5, o, o);
          }
        }
        let a = new Image();
        if (Jn && E == Jn && kk.alive) {
          if (qb) {
            a.src = "https://cdn-icons-png.flaticon.com/512/13687/13687190.png";
            Dk.save();
            Dk.translate(E.x - j, E.y - l);
            Dk.beginPath();
            Dk.drawImage(a, -40, -40, 80, 80);
            Dk.restore();
          }
        }
        if (Jn && E == kk && !lb && U) {
          const k = "#8b00ff";
          Dk.save();
          const a = Dk.canvas.getContext("2d");
          a.strokeStyle = k;
          a.lineWidth = 1;
          a.lineJoin = "round";
          a.beginPath();
          a.moveTo(kk.x - j, kk.y - l);
          a.lineTo(Jn.x2 - j, Jn.y2 - l);
          a.stroke();
          a.closePath();
          Dk.restore();
          Dk.fillStyle = "#8b00ff";
          Dk.font = "bold 12px A90";
          const b = Jn.name;
          const c = Dk.measureText(b).width;
          const d = (kk.x2 + Jn.x2 - j * 2) / 2;
          const e = (kk.y2 + Jn.y2 - l * 2) / 2;
          Dk.save();
          Dk.translate(d, e);
          const f = Jn.x2 - kk.x2;
          const g = Jn.y2 - kk.y2;
          const h = Math.atan2(g, f);
          Dk.rotate(h - Math.PI / 2);
          Dk.rotate(-Math.PI / 2);
          Dk.rotate(-Math.PI / 2);
          Dk.rotate(-Math.PI / 2);
          Dk.fill();
          Dk.restore();
        }
        if (kk.alive && W) {
          for (let b = 0; b < P.length; b++) {
            Dk.beginPath();
            Dk.strokeStyle = "#3d3f42";
            Dk.arc(P[b][0] - j, P[b][1] - l, P[b][2] / 2, 0, Math.PI * 2);
            Dk.stroke();
          }
        }
        if (E == kk && !lb && V) {
          let b = "[fps:" + Zl + ",packets:" + Eg.sendCount + ",ms:" + window.pingTime + "]";
          Dk.textAlign = "center";
          Dk.fillStyle = "#fff";
          Dk.lineJoin = "round";
          Dk.font = "19px vwaf";
          Dk.strokeStyle = "#3d3f42";
          Dk.lineWidth = 5;
          Dk.strokeText(b, E.x - j - 475, E.y - l + E.scale + Cg.nameY + -750);
          Dk.fillText(b, E.x - j - 475, E.y - l + E.scale + Cg.nameY + -750);
        }
        if (E == kk && !lb && Y) {
          let f = 1440;
          let a = 1080;
          Dk.fillStyle = "rgba(0, 0, 70, 0.35)";
          Dk.fillRect(0, 0, f, a);
          Dk.beginPath();
          let b = f / 2;
          let c = a / 2;
          let d = Dk.createRadialGradient(b, c, 0, b, c, f);
          for (let b = 0; b <= 1; b++) {
            d.addColorStop(b, "rgba(0, 0, 0, " + b + ")");
          }
          Dk.fillStyle = d;
          Dk.rect(0, 0, f, a);
          Dk.fill();
          Dk.stroke();
        }
        if (E == kk) {
          Cg.reloadBarWidth;
          Dk.fillStyle = ue;
          Dk.roundRect(E.x - j - Cg.healthBarPad, E.y - l + E.scale + Cg.nameY + 33, Cg.healthBarWidth + Cg.healthBarPad * 2, 15, 8);
          Dk.fill();
          Dk.fillStyle = Y ? "#808000" : "#8b00ff";
          Dk.roundRect(E.x - j, E.y - l + E.scale + Cg.nameY + Cg.healthBarPad + 33, Cg.healthBarWidth * 2 / 2 * Om[E.sid], 15 - Cg.healthBarPad * 2, -12);
          Dk.fill();
        }
        if (E == kk) {
          Cg.reloadBarWidth;
          Dk.fillStyle = ue;
          Dk.roundRect(E.x - j - Cg.healthBarWidth - Cg.healthBarPad, E.y - l + E.scale + Cg.nameY + 33, Cg.healthBarWidth + Cg.healthBarPad * 2, 15, 8);
          Dk.fill();
          Dk.fillStyle = Y ? "#808000" : "#8b00ff";
          Dk.roundRect(E.x - j - Cg.healthBarWidth, E.y - l + E.scale + Cg.nameY + Cg.healthBarPad + 33, Cg.healthBarWidth * 2 / 2 * Nm[E.sid], 15 - Cg.healthBarPad * 2, -12);
          Dk.fill();
        }
        if (!lb) {
          u.innerHTML = "\n                            " + s + "\n                            <hr>\n                            Enemy Turrets: " + q + "<br>\n                            Enemy Mood: " + t + "<br>\n                            Enemy distnace: " + f + "<br>\n                            Enemy x:" + c + "<br>\n                            Enemy y:" + e + "<br>\n                            Enemy heal:" + d + "<br>\n                            ";
        }
        if (E == kk && bb) {
          Dk.lineWidth = 3;
          Dk.strokeStyle = "#3d3f42";
          Dk.globalAlpha = 1;
          Dk.beginPath();
          let b = {
            x: kk.x2 - j,
            y: kk.y2 - l
          };
          Dk.moveTo(kk.x - j, kk.y - l);
          Dk.lineTo(b.x, b.y);
          Dk.stroke();
        }
        if (E == kk) {
          Cg.healthBarWidth;
          Dk.fillStyle = ue;
          Dk.roundRect(E.x - j - Cg.healthBarWidth - Cg.healthBarPad, E.y - l + E.scale + 62 + Cg.nameY, Cg.healthBarWidth * 2 + Cg.healthBarPad * 2, 14, 7);
          Dk.fill();
          Dk.fillStyle = "green";
          Dk.roundRect(E.x - j - Cg.healthBarWidth, E.y - l + E.scale + 62 + Cg.nameY + Cg.healthBarPad, Cg.healthBarWidth * 2 * (E.XP / E.maxXP), 14 - Cg.healthBarPad * 2, 7);
          Dk.fill();
        }
        Cg.healthBarWidth;
        Dk.fillStyle = ue;
        Dk.roundRect(E.x - j - Cg.healthBarWidth - Cg.healthBarPad, E.y - l + E.scale + 45 + Cg.nameY, Cg.healthBarWidth * 2 + Cg.healthBarPad * 2, 17, 8);
        Dk.fill();
        Dk.fillStyle = E == kk || E.team && E.team == kk.team ? "green" : "red";
        Dk.roundRect(E.x - j - Cg.healthBarWidth, E.y - l + E.scale + 45 + Cg.nameY + Cg.healthBarPad, Cg.healthBarWidth * 2 * (E.health / E.maxHealth), 17 - Cg.healthBarPad * 2, 7);
        Dk.fill();
      }
    }
    Uj.update($e, Dk, j, l);
    for (var h = 0; h < Ee.length; ++h) {
      E = Ee[h];
      if (E.visible && E.chatCountdown > 0) {
        E.chatCountdown -= $e;
        if (E.chatCountdown <= 0) {
          E.chatCountdown = 0;
        }
        const d = 1000;
        const a = Math.max(0, E.chatCountdown - d);
        const b = Math.min(1, a / d);
        Dk.globalAlpha = b;
        Dk.font = lb ? "20px Hammersmith One" : "20px Cursive";
        const c = Dk.measureText(E.chatMessage);
        Dk.textBaseline = "middle";
        Dk.textAlign = "center";
        var n = E.x - j;
        var k = E.y - E.scale - l - 60;
        const e = 47;
        const f = c.width + 17;
        Dk.fillStyle = "rgba(0, 0, 0,4.3)";
        Dk.lineWidth = 2;
        Dk.roundRect(n - f / 2, k - e / 2, f, e, 50);
        Dk.fill();
        Dk.fillStyle = "#fff";
        Dk.fillText(E.chatMessage, n, k);
        Dk.globalAlpha = 1;
      }
    }
  }
  of($e);
}
function Gm(e, a, b) {
  for (let c = 0; c < Oe.length; ++c) {
    E = Oe[c];
    if (E.active && E.layer == e) {
      E.update($e);
      if (E.active && jn(E.x - a, E.y - b, E.scale)) {
        Dk.save();
        Dk.translate(E.x - a, E.y - b);
        Dk.rotate(E.dir);
        Hm(0, 0, E, Dk);
        Dk.restore();
      }
    }
  }
}
const Of = {};
function Hm(g, a, b, c, d) {
  if (b.src) {
    const d = xc.projectiles[b.indx].src;
    let e = Of[d];
    if (!e) {
      e = new Image();
      e.onload = function () {
        this.isLoaded = true;
      };
      e.src = "./img/weapons/" + d + ".png";
      Of[d] = e;
    }
    if (e.isLoaded) {
      c.drawImage(e, g - b.scale / 2, a - b.scale / 2, b.scale, b.scale);
    }
  } else if (b.indx == 1) {
    c.fillStyle = "#939393";
    dn(g, a, b.scale, c);
  }
}
function Im() {
  const f = pk - rk / 2;
  const a = qk - sk / 2;
  Ah.animationTime += $e;
  Ah.animationTime %= Cg.volcanoAnimationDuration;
  const b = Cg.volcanoAnimationDuration / 2;
  const c = 1.7 + Math.abs(b - Ah.animationTime) / b * 0.3;
  const d = Cg.innerVolcanoScale * c;
  Dk.drawImage(Ah.land, Ah.x - Cg.volcanoScale - f, Ah.y - Cg.volcanoScale - a, Cg.volcanoScale * 2, Cg.volcanoScale * 2);
  Dk.drawImage(Ah.lava, Ah.x - d - f, Ah.y - d - a, d * 2, d * 2);
}
function Jm(g, a, b, c) {
  const d = Cg.riverWidth + c;
  const e = Cg.mapScale / 2 - a - d / 2;
  if (e < sk && e + d > 0) {
    b.fillRect(0, e, rk, d);
  }
}
var Rf;
var Km;
let Lm = {
  x: null,
  Y: null
};
function Mm(g, h, b) {
  let a;
  let c;
  let i;
  for (let d = 0; d < J.length; ++d) {
    E = J[d];
    if (E.active) {
      c = E.x + E.xWiggle - h;
      i = E.y + E.yWiggle - b;
      if (g == 0) {
        E.update($e);
      }
      if (E.layer == g && jn(c, i, E.scale + (E.blocker || 0))) {
        Dk.globalAlpha = E.hideFromEnemy ? 0.6 : Math.max(0, Math.min(1, (13005 - Math.abs(Lm.x - E.x)) / 100, (700 - Math.abs(Lm.y - E.y)) / 100));
        if (E.isItem) {
          a = Ff(E);
          Dk.save();
          Dk.translate(c, i);
          Dk.rotate(E.dir);
          Dk.drawImage(a, -(a.width / 2), -(a.height / 2));
          if (E.blocker) {
            Dk.strokeStyle = "#db6e6e";
            Dk.globalAlpha = 0.3;
            Dk.lineWidth = 6;
            dn(0, 0, E.blocker, Dk, false, true);
          }
          Dk.restore();
        } else if (E.type === 4) {
          Im();
        } else {
          a = _m(E);
          Dk.drawImage(a, c - a.width / 2, i - a.height / 2);
        }
      }
    }
  }
  if (g === 3) {
    Wk.objects.forEach(c => {
      if (kk && Kn(c, kk) < 250 && c.active && c.isItem) {
        let a = c.scale;
        let d = a * 0.1;
        let e = a / 1.5;
        let f = Math.PI * 2 / (c.maxHealth / c.healthMov);
        Dk.save();
        Dk.beginPath();
        Dk.lineCap = "round";
        Dk.strokeStyle = "#3d3f42";
        Dk.lineWidth = d * 2.95;
        Dk.arc(c.x + c.xWiggle - h, c.y + c.yWiggle - b, e, 0, f);
        Dk.stroke();
        Dk.closePath();
        Dk.beginPath();
        Dk.lineCap = "round";
        Dk.lineWidth = d;
        Dk.strokeStyle = c.teamObj(kk) ? "#8ecc51" : "#ee5151";
        Dk.arc(c.x + c.xWiggle - h, c.y + c.yWiggle - b, e, 0, f);
        Dk.stroke();
        Dk.closePath();
        Dk.restore();
        Dk.font = "18px Hammersmith One";
        Dk.fillStyle = c.idColor;
        Dk.textBaseline = "middle";
        Dk.textAlign = "center";
        Dk.lineWidth = c.nameScale ? 11 : 8;
        Dk.lineJoin = "round";
        Dk.strokeText(c.sid, c.x + c.xWiggle - h, c.y + c.yWiggle - b);
        Dk.fillText(c.sid, c.x + c.xWiggle - h, c.y + c.yWiggle - b);
      }
    });
  }
  Dk.strokeStyle = ue;
  Dk.strokeStyle = "";
}
window.reloadedColor = "#ffc4f4";
window.middleReloadedColor = "#ff4640";
window.notReloadedColor = "#f2ea0a";
var Nm = [];
var Om = [];
function Pm(j, k, l) {
  j /= 360;
  k /= 100;
  l /= 100;
  let m;
  let n;
  let o;
  if (k === 0) {
    m = n = o = l;
  } else {
    const a = (d, a, b) => {
      if (b < 0) {
        b += 1;
      }
      if (b > 1) {
        b -= 1;
      }
      if (b < 1 / 6) {
        return d + (a - d) * 6 * b;
      }
      if (b < 1 / 2) {
        return a;
      }
      if (b < 2 / 3) {
        return d + (a - d) * (2 / 3 - b) * 6;
      }
      return d;
    };
    const b = l < 0.5 ? l * (1 + k) : l + k - l * k;
    const c = l * 2 - b;
    m = a(c, b, j + 1 / 3);
    n = a(c, b, j);
    o = a(c, b, j - 1 / 3);
  }
  const i = c => {
    const a = Math.round(c * 255).toString(16);
    if (a.length === 1) {
      return "0" + a;
    } else {
      return a;
    }
  };
  const g = "#" + i(m) + i(n) + i(o);
  return g;
}
function Qm(d, a, f) {
  if (E = Tn(d)) {
    E.startAnim(a, f);
    if (f == 10 || f == 14) {
      E.sr = 1;
      Om[d] = -111 / xc.weapons[E.secondary].speed;
    } else if (d == E.primary) {
      Nm[d] = -111 / xc.weapons[E.primary].speed;
    } else {
      setTimeout(() => {
        Nm[d] = 0;
      });
    }
  }
  if (a) {
    let g = xc.weapons[f].dmg * (xc.weapons[f].sDmg || 1) * (kk.skin?.bDmg || 1) * a.val;
    let a = kk.variants[f];
    console.log(Wk);
    let c = Nf;
    Nf = [];
    let d = f < 9 ? E.primaryVariant : E.secondaryVariant;
    setTimeout(() => {
      let a = xc.weapons[f].dmg * (E.skinIndex == 40 ? 3.3 : 1) * Cg.weaponVariants[d].val;
      c.forEach(a => {
        if (a.isItem) {
          a.health -= g;
          let b = Pm(Math.floor(Math.random() * 360), 82, 63);
          Uj.showText(a.x, a.y, 20, 0.18, 350, g, b);
        }
      });
      c = [];
    }, 1000 / 9);
  }
}
function Rm(d, a, b) {
  Dk.globalAlpha = 1;
  Dk.fillStyle = "#91b2db";
  for (let c = 0; c < Ee.length; ++c) {
    E = Ee[c];
    if (E.zIndex == b) {
      E.animate($e);
      if (E.visible) {
        E.skinRot += $e * 0.002;
        Re = (E == kk ? Nl() : E.dir) + E.dirPlus;
        Dk.save();
        Dk.translate(E.x - d, E.y - a);
        Dk.rotate(Re);
        Tm(E, Dk);
        Dk.restore();
      }
    }
  }
}
var _f = {};
function Sm(d, a, b) {
  if (a.weaponVariant == 3) {
    if (d.id == 0) {
      return "https://i.imgur.com/oRXUfW8.png";
    } else if (d.id == 1) {
      return "https://i.imgur.com/kr8H9g7.png";
    } else if (d.id == 2) {
      return "https://i.imgur.com/UZ2HcQw.png";
    } else if (d.id == 3) {
      return "https://i.imgur.com/vxLZW0S.png";
    } else if (d.id == 4) {
      return "https://i.imgur.com/vxLZW0S.png";
    } else if (d.id == 5) {
      return "https://i.imgur.com/UY7SV7j.png";
    } else if (d.id == 6) {
      return "https://i.imgur.com/6ayjbIz.png";
    } else if (d.id == 7) {
      return "https://i.imgur.com/CDAmjux.png";
    } else if (d.id == 8) {
      return "https://i.imgur.com/aEs3FSU.png";
    } else if (d.id == 9) {
      return "https://i.imgur.com/Oneg3oF.png";
    } else if (d.id == 10) {
      return "https://i.imgur.com/tmUzurk.png";
    } else if (d.id == 11) {
      return "https://i.imgur.com/SNFV2dc.png";
    } else if (d.id == 12) {
      return "https://i.imgur.com/EVesBtw.png";
    } else if (d.id == 13) {
      return "https://i.imgur.com/z4CyaXk.png";
    } else if (d.id == 15) {
      return "https://i.imgur.com/jPE54IT.png";
    } else {
      return ".././img/weapons/" + b + ".png";
    }
  } else if (a.weaponVariant == 2) {
    if (d.id == 0) {
      return "https://i.imgur.com/WPWU8zC.png";
    } else if (d.id == 1) {
      return "https://i.imgur.com/OU5os0h.png";
    } else if (d.id == 2) {
      return "https://i.imgur.com/aAJyHBB.png";
    } else if (d.id == 3) {
      return "https://i.imgur.com/4ZxIJQM.png";
    } else if (d.id == 4) {
      return "https://i.imgur.com/4ZxIJQM.png";
    } else if (d.id == 5) {
      return "https://i.imgur.com/HSWcyku.png";
    } else if (d.id == 6) {
      return "https://i.imgur.com/phXTNsa.png";
    } else if (d.id == 7) {
      return "https://i.imgur.com/ROTb7Ks.png";
    } else if (d.id == 8) {
      return "https://i.imgur.com/RnkmWgs.png";
    } else if (d.id == 9) {
      return "https://i.imgur.com/qu7HHT5.png";
    } else if (d.id == 10) {
      return "https://i.imgur.com/Fg93gj3.png";
    } else if (d.id == 11) {
      return "https://i.imgur.com/hSqLP3t.png";
    } else if (d.id == 12) {
      return "https://i.imgur.com/TRqDlgX.png";
    } else if (d.id == 13) {
      return "https://i.imgur.com/DVjCdwI.png";
    } else if (d.id == 15) {
      return "https://i.imgur.com/jwH99zm.png";
    } else {
      return ".././img/weapons/" + b + ".png";
    }
  } else if (a.weaponVariant == 1) {
    if (d.id == 3) {
      return "https://i.imgur.com/QKBc2ou.png";
    } else if (d.id == 4) {
      return "https://i.imgur.com/QKBc2ou.png";
    } else if (d.id == 5) {
      return "https://i.imgur.com/jKDdyvc.png";
    } else if (d.id == 6) {
      return "https://i.imgur.com/ivLPh10.png";
    } else if (d.id == 8) {
      return "https://i.imgur.com/DTd8Xl6.png";
    } else if (d.id == 15) {
      return "https://i.imgur.com/mAW9JAW.png";
    } else {
      return ".././img/weapons/" + b + ".png";
    }
  } else {
    return ".././img/weapons/" + b + ".png";
  }
}
function Tm(f, a) {
  a = a || Dk;
  a.lineWidth = ei + 1;
  a.lineJoin = "miter";
  const g = Math.PI / 4 * (xc.weapons[f.weaponIndex].armS || 1);
  const c = f.buildIndex < 0 && xc.weapons[f.weaponIndex].hndS || 1;
  const d = f.buildIndex < 0 && xc.weapons[f.weaponIndex].hndD || 1;
  if (f.tailIndex > 0) {
    Ym(f.tailIndex, a, f);
  }
  if (f.buildIndex < 0 && !xc.weapons[f.weaponIndex].aboveHand) {
    zf(xc.weapons[f.weaponIndex], Cg.weaponVariants[f.weaponVariant].src, f.scale, 0, a);
    if (xc.weapons[f.weaponIndex].projectile != null && !xc.weapons[f.weaponIndex].hideProjectile) {
      Hm(f.scale, 0, xc.projectiles[xc.weapons[f.weaponIndex].projectile], Dk);
    }
  }
  a.fillStyle = Cg.skinColors[f.skinColor];
  dn(f.scale * Math.cos(g), f.scale, 14);
  dn(f.scale * d * Math.cos(-g * c), f.scale * d * Math.sin(-g * c), 14);
  if (f.buildIndex < 0 && xc.weapons[f.weaponIndex].aboveHand) {
    zf(xc.weapons[f.weaponIndex], Cg.weaponVariants[f.weaponVariant].src, f.scale, 0, a);
    if (xc.weapons[f.weaponIndex].projectile != null && !xc.weapons[f.weaponIndex].hideProjectile) {
      Hm(f.scale, 0, xc.projectiles[xc.weapons[f.weaponIndex].projectile], Dk);
    }
  }
  if (f.buildIndex >= 0) {
    const b = Ff(xc.list[f.buildIndex]);
    a.drawImage(b, f.scale * (Math.PI / 2) - xc.list[f.buildIndex].holdOffset, -b.width / 2);
  }
  dn(0, 0, f.scale, a);
  if (f.skinIndex > 0) {
    a.rotate(Math.PI / 2);
    Wm(f.skinIndex, a, null, f);
  }
}
const Um = {};
const Bf = {};
let Vm;
function Wm(f, a, b, c) {
  Vm = Um[f];
  if (!Vm) {
    const a = new Image();
    a.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    a.src = "./img/hats/hat_" + f + ".png";
    Um[f] = a;
    Vm = a;
  }
  let d = b || Bf[f];
  if (!d) {
    for (let a = 0; a < Uk.length; ++a) {
      if (Uk[a].id == f) {
        d = Uk[a];
        break;
      }
    }
    Bf[f] = d;
  }
  if (Vm.isLoaded) {
    a.drawImage(Vm, -d.scale / 2, -d.scale / 2, d.scale, d.scale);
  }
  if (!b && d.topSprite) {
    a.save();
    a.rotate(c.skinRot);
    Wm(f + "_top", a, d, c);
    a.restore();
  }
}
const De = {};
const Xm = {};
function Ym(e, a, b) {
  Vm = De[e];
  if (!Vm) {
    const a = new Image();
    a.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    a.src = "./img/accessories/access_" + e + ".png";
    De[e] = a;
    Vm = a;
  }
  let c = Xm[e];
  if (!c) {
    for (let a = 0; a < Vk.length; ++a) {
      if (Vk[a].id == e) {
        c = Vk[a];
        break;
      }
    }
    Xm[e] = c;
  }
  if (Vm.isLoaded) {
    a.save();
    a.translate(-20 - (c.xOff || 0), 0);
    if (c.spin) {
      a.rotate(b.skinRot);
    }
    a.drawImage(Vm, -(c.scale / 2), -(c.scale / 2), c.scale, c.scale);
    a.restore();
  }
}
var Zm = {};
function zf(h, a, b, c, d) {
  const e = h.src + (a || "");
  let f = _f[e];
  if (!f) {
    f = new Image();
    f.onload = function () {
      this.isLoaded = true;
    };
    f.src = Sm(h, d, e);
    _f[e] = f;
  }
  if (f.isLoaded) {
    d.drawImage(f, b + h.xOff - h.length / 2, c + h.yOff - h.width / 2, h.length, h.width);
  }
}
const $m = {};
function _m(h) {
  const f = h.y >= Cg.mapScale - Cg.snowBiomeTop ? 2 : h.y <= Cg.snowBiomeTop ? 1 : 0;
  const a = h.type + "_" + h.scale + "_" + f;
  let b = $m[a];
  if (!b) {
    const c = document.createElement("canvas");
    c.width = c.height = h.scale * 2.1 + ei;
    const e = c.getContext("2d");
    e.translate(c.width / 2, c.height / 2);
    e.rotate(cc.randFloat(0, Math.PI / 180));
    e.strokeStyle = Xk;
    e.lineWidth = ei + 1;
    if (h.type == 0) {
      let b;
      for (var i = 0; i < 2; ++i) {
        b = E.scale * (i ? 0.5 : 1);
        Vf(e, E.sid % 2 === 0 ? 5 : 7, b, b * 0.7);
        e.fillStyle = f ? i ? "#fff" : "#e3f1f4" : i ? "#b4db62" : "#9ebf57";
        e.fill();
        if (!i) {
          e.stroke();
        }
      }
    } else if (h.type == 1) {
      if (f == 2) {
        e.fillStyle = "#606060";
        Vf(e, 6, h.scale * 0.3, h.scale * 0.71);
        e.stroke();
        e.fillStyle = "#89a54c";
        dn(0, 0, h.scale * 0.55, e);
        e.fillStyle = "#a5c65b";
        dn(0, 0, h.scale * 0.3, e, true);
      } else {
        en(e, 6, E.scale, E.scale * 0.7);
        e.fillStyle = f ? "#e3f1f4" : "#89a54c";
        e.fill();
        e.stroke();
        e.fillStyle = f ? "#6a64af" : "#c15555";
        let b;
        const a = 4;
        const c = _h / a;
        for (var i = 0; i < a; ++i) {
          b = cc.randInt(E.scale / 3.5, E.scale / 2.3);
          dn(b * Math.cos(c * i), b * Math.sin(c * i), cc.randInt(10, 12), e);
        }
      }
    } else if (h.type == 2 || h.type == 3) {
      e.fillStyle = h.type == 2 ? f == 2 ? "#938d77" : "#939393" : "#e0c655";
      Vf(e, 3, h.scale, h.scale);
      e.fill();
      e.stroke();
      e.fillStyle = h.type == 2 ? f == 2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
      Vf(e, 3, h.scale * 0.55, h.scale * 0.65);
      e.fill();
    }
    b = c;
    $m[a] = b;
  }
  return b;
}
function an(g, a, b) {
  const h = g.lineWidth + 1 || 0;
  b /= 2;
  g.beginPath();
  let d = Math.PI * 2 / a;
  for (let c = 0; c < a; c++) {
    g.lineTo(b + (b - h / 2) * Math.cos(d * c), b + (b - h / 2) * Math.sin(d * c));
  }
  g.closePath();
}
function Hf() {
  const g = Cg.volcanoScale * 2;
  const a = document.createElement("canvas");
  a.width = g;
  a.height = g;
  const b = a.getContext("2d");
  b.strokeStyle = "#3e3e3e";
  b.lineWidth = ei * 2;
  b.fillStyle = "#7f7f7f";
  an(b, 10, g);
  b.fill();
  b.stroke();
  Ah.land = a;
  const c = document.createElement("canvas");
  const d = Cg.innerVolcanoScale * 2;
  c.width = d;
  c.height = d;
  const e = c.getContext("2d");
  e.strokeStyle = Xk;
  e.lineWidth = ei * 1.6;
  e.fillStyle = "#f54e16";
  e.strokeStyle = "#f56f16";
  an(e, 10, d);
  e.fill();
  e.stroke();
  Ah.lava = c;
}
Hf();
const bn = [];
function Ff(k, a) {
  let b = bn[k.id];
  if (!b || a) {
    const c = document.createElement("canvas");
    c.width = c.height = k.scale * 3 + ei + (xc.list[k.id].spritePadding || 0);
    const f = c.getContext("2d");
    f.translate(c.width / 2, c.height / 2);
    f.rotate(a ? 0 : Math.PI / 2);
    f.strokeStyle = Xk;
    f.stroke();
    f.lineWidth = 6.6;
    if (k.name == "apple") {
      f.fillStyle = "#c15555";
      dn(0, 0, k.scale, f);
      f.fillStyle = "#89a54c";
      const a = -(Math.PI / 2);
      cn(k.scale * Math.cos(a), k.scale * Math.sin(a), 25, a + Math.PI / 2, f);
    } else if (k.name == "cookie") {
      f.fillStyle = "#cca861";
      dn(0, 0, k.scale, f);
      f.fillStyle = "#937c4b";
      for (var i = 4, l = _h / i, m, n = 0; n < i; ++n) {
        m = cc.randInt(k.scale / 2.5, k.scale / 1.7);
        dn(m * Math.cos(l * n), m * Math.sin(l * n), cc.randInt(4, 5), f, true);
      }
    } else if (k.name == "cheese") {
      f.fillStyle = "#f4f3ac";
      dn(0, 0, k.scale, f);
      f.fillStyle = "#c3c28b";
      for (var i = 4, l = _h / i, m, n = 0; n < i; ++n) {
        m = cc.randInt(k.scale / 2.5, k.scale / 1.7);
        dn(m * Math.cos(l * n), m * Math.sin(l * n), cc.randInt(4, 5), f, true);
      }
    } else if (k.name == "wood wall" || k.name == "stone wall" || k.name == "castle wall") {
      f.fillStyle = k.name == "castle wall" ? "#83898e" : k.name == "wood wall" ? "#a5974c" : "#939393";
      const a = k.name == "castle wall" ? 4 : 3;
      Vf(f, a, k.scale * 1.1, k.scale * 1.1);
      f.fill();
      f.stroke();
      f.fillStyle = k.name == "castle wall" ? "#9da4aa" : k.name == "wood wall" ? "#c9b758" : "#bcbcbc";
      Vf(f, a, k.scale * 0.65, k.scale * 0.65);
      f.fill();
    } else if (k.name == "spikes" || k.name == "greater spikes" || k.name == "poison spikes" || k.name == "spinning spikes") {
      f.fillStyle = k.name == "poison spikes" ? "#7b935d" : "#939393";
      var o = k.scale * 0.6;
      Vf(f, k.name == "spikes" ? 5 : 6, k.scale, o);
      f.fill();
      f.stroke();
      f.fillStyle = "#a5974c";
      dn(0, 0, o, f);
      f.fillStyle = "#c9b758";
      dn(0, 0, o / 2, f, true);
    } else if (k.name == "windmill" || k.name == "faster windmill" || k.name == "power mill") {
      f.fillStyle = "#a5974c";
      dn(0, 0, k.scale, f);
      f.fillStyle = "#c9b758";
      Ie(0, 0, k.scale * 1.3, 25, 4, f);
      f.fillStyle = "#a5974c";
      dn(0, 0, k.scale * 0.45, f);
    } else if (k.name == "mine") {
      f.fillStyle = "#939393";
      Vf(f, 3, k.scale, k.scale);
      f.fill();
      f.stroke();
      f.fillStyle = "#bcbcbc";
      Vf(f, 3, k.scale * 0.55, k.scale * 0.65);
      f.fill();
    } else if (k.name == "sapling") {
      for (var n = 0; n < 2; ++n) {
        var o = k.scale * (n ? 0.5 : 1);
        Vf(f, 7, o, o * 0.7);
        f.fillStyle = n ? "#b4db62" : "#9ebf57";
        f.fill();
        if (!n) {
          f.stroke();
        }
      }
    } else if (k.name == "pit trap") {
      f.fillStyle = "#a5974c";
      Vf(f, 3, k.scale * 1.1, k.scale * 1.1);
      f.fill();
      f.stroke();
      f.fillStyle = Xk;
      Vf(f, 3, k.scale * 0.65, k.scale * 0.65);
      f.fill();
    } else if (k.name == "boost pad") {
      f.fillStyle = "#7e7f82";
      Q(0, 0, k.scale * 2, k.scale * 2, f);
      f.fill();
      f.stroke();
      f.fillStyle = "#dbd97d";
      fn(k.scale * 1, f);
    } else if (k.name == "turret") {
      f.fillStyle = "#a5974c";
      dn(0, 0, k.scale, f);
      f.fill();
      f.stroke();
      f.fillStyle = "#939393";
      const a = 50;
      Q(0, -a / 2, k.scale * 0.9, a, f);
      dn(0, 0, k.scale * 0.6, f);
      f.fill();
      f.stroke();
    } else if (k.name == "platform") {
      f.fillStyle = "#cebd5f";
      const a = 4;
      const b = k.scale * 2;
      const c = b / a;
      let d = -(k.scale / 2);
      for (var n = 0; n < a; ++n) {
        Q(d - c / 2, 0, c, k.scale * 2, f);
        f.fill();
        f.stroke();
        d += b / a;
      }
    } else if (k.name == "healing pad") {
      f.fillStyle = "#7e7f82";
      Q(0, 0, k.scale * 2, k.scale * 2, f);
      f.fill();
      f.stroke();
      f.fillStyle = "#db6e6e";
      Ie(0, 0, k.scale * 0.65, 20, 4, f, true);
    } else if (k.name == "spawn pad") {
      f.fillStyle = "#7e7f82";
      Q(0, 0, k.scale * 2, k.scale * 2, f);
      f.fill();
      f.stroke();
      f.fillStyle = "#71aad6";
      dn(0, 0, k.scale * 0.6, f);
    } else if (k.name == "blocker") {
      f.fillStyle = "#7e7f82";
      dn(0, 0, k.scale, f);
      f.fill();
      f.stroke();
      f.rotate(Math.PI / 4);
      f.fillStyle = "#db6e6e";
      Ie(0, 0, k.scale * 0.65, 20, 4, f, true);
    } else if (k.name == "teleporter") {
      f.fillStyle = "#7e7f82";
      dn(0, 0, k.scale, f);
      f.fill();
      f.stroke();
      f.rotate(Math.PI / 4);
      f.fillStyle = "#d76edb";
      dn(0, 0, k.scale * 0.5, f, true);
    }
    b = c;
    if (!a) {
      bn[k.id] = b;
    }
  }
  return b;
}
function cn(i, a, b, c, d) {
  const e = i + b * Math.cos(c);
  const f = a + b * Math.sin(c);
  const g = b * 0.4;
  d.moveTo(i, a);
  d.beginPath();
  d.quadraticCurveTo((i + e) / 2 + g * Math.cos(c + Math.PI / 2), (a + f) / 2 + g * Math.sin(c + Math.PI / 2), e, f);
  d.quadraticCurveTo((i + e) / 2 - g * Math.cos(c + Math.PI / 2), (a + f) / 2 - g * Math.sin(c + Math.PI / 2), i, a);
  d.closePath();
  d.fill();
  d.stroke();
}
function dn(g, a, b, c, h, e) {
  c = c || Dk;
  c.beginPath();
  c.arc(g, a, b, 0, Math.PI * 2);
  if (!e) {
    c.fill();
  }
  if (!h) {
    c.stroke();
  }
}
function Vf(i, a, b, c) {
  let d = Math.PI / 2 * 3;
  let j;
  let k;
  const l = Math.PI / a;
  i.beginPath();
  i.moveTo(0, -b);
  for (let e = 0; e < a; e++) {
    j = Math.cos(d) * b;
    k = Math.sin(d) * b;
    i.lineTo(j, k);
    d += l;
    j = Math.cos(d) * c;
    k = Math.sin(d) * c;
    i.lineTo(j, k);
    d += l;
  }
  i.lineTo(0, -b);
  i.closePath();
}
function Q(g, a, b, c, d, e) {
  d.fillRect(g - b / 2, a - c / 2, b, c);
  if (!e) {
    d.strokeRect(g - b / 2, a - c / 2, b, c);
  }
}
function Ie(h, a, b, c, d, i, f) {
  i.save();
  i.translate(h, a);
  d = Math.ceil(d / 2);
  for (let e = 0; e < d; e++) {
    Q(0, 0, b * 2, c, i, f);
    i.rotate(Math.PI / d);
  }
  i.restore();
}
function en(h, a, b, c) {
  let d = Math.PI / 2 * 3;
  const i = Math.PI / a;
  let f;
  h.beginPath();
  h.moveTo(0, -c);
  for (let e = 0; e < a; e++) {
    f = cc.randInt(b + 0.9, b * 1.2);
    h.quadraticCurveTo(Math.cos(d + i) * f, Math.sin(d + i) * f, Math.cos(d + i * 2) * c, Math.sin(d + i * 2) * c);
    d += i * 2;
  }
  h.lineTo(0, -c);
  h.closePath();
}
function fn(d, a) {
  a = a || Dk;
  const e = d * (Math.sqrt(3) / 2);
  a.beginPath();
  a.moveTo(0, -e / 2);
  a.lineTo(-d / 2, e / 2);
  a.lineTo(d / 2, e / 2);
  a.lineTo(0, -e / 2);
  a.fill();
  a.closePath();
}
function Uf() {
  const b = Cg.mapScale / 2;
  Wk.add(0, b, b + 200, 0, Cg.treeScales[3], 0);
  Wk.add(1, b, b - 480, 0, Cg.treeScales[3], 0);
  Wk.add(2, b + 300, b + 450, 0, Cg.treeScales[3], 0);
  Wk.add(3, b - 950, b - 130, 0, Cg.treeScales[2], 0);
  Wk.add(4, b - 750, b - 400, 0, Cg.treeScales[3], 0);
  Wk.add(5, b - 700, b + 400, 0, Cg.treeScales[2], 0);
  Wk.add(6, b + 800, b - 200, 0, Cg.treeScales[3], 0);
  Wk.add(7, b - 260, b + 340, 0, Cg.bushScales[3], 1);
  Wk.add(8, b + 760, b + 310, 0, Cg.bushScales[3], 1);
  Wk.add(9, b - 800, b + 100, 0, Cg.bushScales[3], 1);
  Wk.add(10, b - 800, b + 300, 0, xc.list[4].scale, xc.list[4].id, xc.list[10]);
  Wk.add(11, b + 650, b - 390, 0, xc.list[4].scale, xc.list[4].id, xc.list[10]);
  Wk.add(12, b - 400, b - 450, 0, Cg.rockScales[2], 2);
}
function Lf(c) {
  for (let a = 0; a < c.length;) {
    Wk.add(c[a], c[a + 1], c[a + 2], c[a + 3], c[a + 4], c[a + 5], xc.list[c[a + 6]], true, c[a + 7] >= 0 ? {
      sid: c[a + 7]
    } : null);
    a += 8;
  }
}
let Nf = [];
function qf(c, a) {
  E = _i(a);
  if (E) {
    E.xWiggle += Cg.gatherWiggle * Math.cos(c);
    E.yWiggle += Cg.gatherWiggle * Math.sin(c);
  }
  Nf.push(E);
}
function gn(c, a) {
  E = _i(c);
  if (E) {
    E.dir = a;
    E.xWiggle += Cg.gatherWiggle * Math.cos(a + Math.PI);
    E.yWiggle += Cg.gatherWiggle * Math.sin(a + Math.PI);
  }
}
function Wf(i, a, b, c, d, e, f, g) {
  if (Xe) {
    ik.addProjectile(i, a, b, c, d, e, null, null, f).sid = g;
    Xf(i, a, d, b, e);
  }
}
function Xf(i, a, b, c, d) {
  let e = Infinity;
  let h = -1;
  for (let f = 0; f < Ee.length; f++) {
    if ((E = Ee[f]) && E.visible && E.secondary && xc.weapons[E.secondary].projectile !== undefined && xc.projectiles[xc.weapons[E.secondary].projectile].speed == d && e > (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 80) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 80) ** 2) {
      h = E.sid;
      e = (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 80) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 80) ** 2;
    }
  }
  if (Math.sqrt(e) > 60) {
    if (d == 1.5) {
      for (let c = 0; c < Ee.length; c++) {
        if ((E = Ee[c]) && E.visible && e > (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 10) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 10) ** 2) {
          h = E.sid;
          e = (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 10) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 10) ** 2;
        }
      }
    } else {
      for (let c = 0; c < Ee.length; c++) {
        if ((E = Ee[c]) && E.visible && E.secondary && e > (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 80) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 80) ** 2) {
          h = E.sid;
          e = (E.x2 * 1.5 - E.x1 / 2 - i + Math.cos(b) * 80) ** 2 + (E.y2 * 1.5 - E.y1 / 2 - a + Math.sin(b) * 80) ** 2;
        }
      }
      E = Tn(h);
      setTimeout(() => {
        Om[h] = 0;
      });
    }
  } else {
    E = Tn(h);
    Om[E.sid] = -111 / xc.weapons[E.secondary].speed;
  }
}
function Gf(d, a) {
  for (let b = 0; b < Oe.length; ++b) {
    if (Oe[b].sid == d) {
      Oe[b].range = a;
    }
  }
}
function hn(b) {
  E = Un(b);
  if (E) {
    E.startAnim();
  }
}
function Yf(d) {
  for (var a = 0; a < He.length; ++a) {
    He[a].forcePos = !He[a].visible;
    He[a].visible = false;
  }
  if (d) {
    const b = Date.now();
    for (var a = 0; a < d.length;) {
      E = Un(d[a]);
      if (E) {
        E.index = d[a + 1];
        E.t1 = E.t2 === undefined ? b : E.t2;
        E.t2 = b;
        E.x1 = E.x;
        E.y1 = E.y;
        E.x2 = d[a + 2];
        E.y2 = d[a + 3];
        E.d1 = E.d2 === undefined ? d[a + 4] : E.d2;
        E.d2 = d[a + 4];
        E.health = d[a + 5];
        E.dt = 0;
        E.visible = true;
      } else {
        E = jk.spawn(d[a + 2], d[a + 3], d[a + 4], d[a + 1]);
        E.x2 = E.x;
        E.y2 = E.y;
        E.d2 = E.dir;
        E.health = d[a + 5];
        if (!jk.aiTypes[d[a + 1]].name) {
          E.name = Cg.cowNames[d[a + 6]];
        }
        E.forcePos = true;
        E.sid = d[a];
        E.visible = true;
      }
      a += 7;
    }
  }
}
const $f = {};
function Kf(e, a) {
  const f = e.index;
  let g = $f[f];
  if (!g) {
    const a = new Image();
    a.onload = function () {
      this.isLoaded = true;
      this.onload = null;
    };
    a.src = "./img/animals/" + e.src + ".png";
    g = a;
    $f[f] = g;
  }
  if (g.isLoaded) {
    const b = e.scale * 1.2 * (e.spriteMlt || 1);
    a.drawImage(g, -b, -b, b * 2, b * 2);
  }
}
function jn(d, a, b) {
  return d + b >= 0 && d - b <= rk && a + b >= 0 && a - b <= sk;
}
function Jf(d, a) {
  let b = Sn(d[0]);
  if (!b) {
    b = new ci(d[0], d[1], Cg, cc, ik, Wk, Ee, He, xc, Uk, Vk);
    Ee.push(b);
  }
  b.spawn(a ? Di : null);
  b.visible = false;
  b.x2 = undefined;
  b.y2 = undefined;
  b.setData(d);
  Nm[b.sid] = 1;
  b.pr = 1;
  Om[b.sid] = 1;
  b.sr = 1;
  b.tr = 1;
  if (a) {
    kk = b;
    pk = kk.x;
    qk = kk.y;
    vl();
    ym();
    Dm();
    Af(0);
    Kk.style.display = "block";
  }
}
function kn(c) {
  for (let a = 0; a < Ee.length; a++) {
    if (Ee[a].id == c) {
      Ee.splice(a, 1);
      break;
    }
  }
}
function Qf(c, a) {
  if (kk) {
    kk.itemCounts[c] = a;
  }
}
function Zf(d, a, b) {
  if (kk) {
    kk[d] = a;
    if (b) {
      ym();
    }
  }
}
function jf() {
  if (Z) {
    on(0, null);
    on(0, null);
  } else {
    on(0, null);
  }
}
function ln(c, a) {
  E = Tn(c);
  if (E) {
    E.health = a;
  }
  if (rb && Jn && kk.secondaryIndex == 11 && (t == "😡" || t == "😐" || t == "😰")) {
    if (Jn && kk.health <= 87) {
      od();
      qn(6);
      N = true;
      setTimeout(() => {
        nd();
        N = false;
        Cn();
      }, 400);
    }
  }
  if (yb) {
    if (kk.health < 100) {
      setTimeout(() => {
        jf();
      }, 50);
      if (kk.health < 60 && Jn && Kn(Jn, kk) < 280 && Jn.skinIndex == 7 && (Jn.weaponIndex == 3 || Jn.weaponIndex == 5 || Jn.weaponIndex == 15)) {
        qn(Jn.skinIndex == 53 ? 6 : 22);
        on(0, null);
        on(0, null);
        on(0, null);
        setTimeout(() => {
          if (kk.skinIndex == 22 && !jb && !w && !yn) {
            qn(6);
          }
        }, 250);
      }
    }
  }
  if (kb && Eg.sendCount < 100) {
    if (Jn && Jn.health <= 58.2 && kk.animTime != 0 && yn && Kn(Jn, kk) <= kk.WeaponRange * 1.7 && (kk.primaryIndex == 4 || kk.primaryIndex == 5)) {
      qn(53);
      nd();
      setTimeout(() => {
        qn(7);
        nd();
        fm(18, 1);
        Tb.push(b => fm(6, true));
      }, 70);
    }
  }
  if (zb && Eg.sendCount < 100) {
    if (Jn && Kn(Jn, kk) <= kk.WeaponRange * 1.6 && kk.skinIndex == 11 && kk.health < 100 && !w && !Ab && !jb && !yn) {
      N = true;
      qn(7);
      En(18);
      Eg.send("d", 1);
      mn(kk.weapons[0], true);
      setTimeout(() => {
        qn(53);
        fm(21, 1);
        Tb.push(b => fm(6, true));
      }, 100);
      setTimeout(() => {
        N = false;
        Eg.send("d", 0);
        qn(11);
        fm(21, 1);
        Tb.push(b => fm(6, true));
      }, 180);
    }
  }
  if (kb && Eg.sendCount < 100) {
    if (Jn && Kn(Jn, kk) <= kk.WeaponRange * 1.8 && (kk.skinIndex == 6 || kk.skinIndex == 12) && kk.skinIndex != 11 && kk.health == 100 && !Ab && !jb && !yn && !w) {
      qn(11);
      nd();
      setTimeout(() => {
        nd();
        fm(21, 1);
        Tb.push(b => fm(6, true));
      }, 70);
    }
  }
}
function mn(c, a) {
  Eg.send("G", c, a);
}
function nn(h, a) {
  try {
    var b = xc.list[kk.items[h]];
    var c = kk.scale + b.scale + (b.placeOffset || 0);
    var d = kk.x2 + c * Math.cos(a);
    var e = kk.y2 + c * Math.sin(a);
    var f = kk.weaponIndex;
    om(kk.items[h]);
    Eg.send("D", a);
    Eg.send("d", 1);
    om(f, true);
    Eg.send("D", null);
    P.push([d, e, c, h, a]);
    setTimeout(() => {
      P.shift();
    }, 45);
  } catch (b) {}
}
function on(h, a) {
  try {
    var b = xc.list[kk.items[h]];
    var c = kk.scale + b.scale + (b.placeOffset || 0);
    var d = kk.x2 + c * Math.cos(a);
    var e = kk.y2 + c * Math.sin(a);
    var f = kk.weaponIndex;
    om(kk.items[h]);
    Eg.send("D", a);
    Eg.send("d", 1);
    om(f, true);
    Eg.send("D", null);
    P.push([d, e, c, h, a]);
    setTimeout(() => {
      P.shift();
    }, 45);
  } catch (b) {}
}
function pn(b) {
  return b * (Math.PI / 180);
}
function qn(c) {
  let a = go(Uk, c);
  if (kk.skins[c] || a.price == 0) {
    if (kk.skinIndex != c) {
      Eg.send("c", 0, c, 0);
    }
  } else if (h) {
    if (a) {
      if (kk.points >= a.price) {
        Eg.send("c", 1, c, 0);
        Eg.send("c", 0, c, 0);
      } else if (kk.skinIndex != 0) {
        Eg.send("c", 0, 0, 0);
      }
    } else if (kk.skinIndex != 0) {
      Eg.send("c", 0, 0, 0);
    }
  } else if (kk.skinIndex != 0) {
    Eg.send("c", 0, 0, 0);
  }
}
function rn(c, a) {
  if (a !== undefined) {
    return Math.atan2(c.y - a.y, c.x - a.x);
  } else {
    return Math.atan2(c.y - kk.y, c.x - kk.x);
  }
}
function sn(g, a, b) {
  let c = false;
  let f = undefined;
  return {
    start(d) {
      if (d == g && document.activeElement.id.toLowerCase() !== "chatbox") {
        c = true;
        if (f === undefined) {
          f = setInterval(() => {
            a();
            if (!c) {
              clearInterval(f);
              f = undefined;
              console.log("claered");
            }
          }, b);
        }
      }
    },
    stop(a) {
      if (a == g && document.activeElement.id.toLowerCase() !== "chatbox") {
        c = false;
      }
    }
  };
}
document.addEventListener("keydown", b => {
  un.start(b.keyCode);
  tn.start(b.keyCode);
  vn.start(b.keyCode);
  wn.start(b.keyCode);
  xn.start(b.keyCode);
});
const tn = sn(81, () => {
  on(0, Nl());
}, 40);
const un = sn(86, () => {
  on(2, Nl());
}, 50);
const vn = sn(70, () => {
  on(4, Nl());
}, 50);
const wn = sn(78, () => {
  on(3, Nl());
}, 40);
const xn = sn(72, () => {
  on(5, Nl());
}, 40);
document.addEventListener("keyup", b => {
  un.stop(b.keyCode);
  vn.stop(b.keyCode);
  wn.stop(b.keyCode);
  xn.stop(b.keyCode);
  tn.stop(b.keyCode);
});
var yn = false;
let zn = document.getElementById("touch-controls-fullscreen");
function An(b) {
  if (b.button == 2) {
    try {
      qn(40);
      jb = true;
      Eg.send("K", 1);
    } catch (b) {} finally {
      om(kk.weapons[1] == 10 ? kk.weapons[1] : kk.weapons[0], true);
    }
  } else if (b.button == 0) {
    try {
      N = true;
      yn = true;
      qn(po ? 6 : 7, 0);
      Eg.send("K", 1);
    } catch (b) {} finally {
      nd();
    }
  } else {
    em();
  }
}
zn.addEventListener("mousedown", An, false);
function Bn(b) {
  if (b.button == 2) {
    jb = false;
    Eg.send("K", 1);
    Cn();
  } else if (b.button == 0) {
    N = false;
    yn = false;
    Eg.send("K", 1);
    Cn();
  }
}
zn.addEventListener("mouseup", Bn, false);
function Cn() {
  if (kk.y <= 2400) {
    qn(15, 0);
    setTimeout(() => {
      fm(Kn(Jn, kk) < 250 ? 19 : 11, 1);
      Tb.push(b => fm(6, true));
    }, 70);
  } else if (kk.y >= 6850 && kk.y <= 7550) {
    qn(31, 0);
    setTimeout(() => {
      fm(Kn(Jn, kk) < 250 ? 19 : 11, 1);
      Tb.push(b => fm(6, true));
    }, 70);
  } else if (Jn && Kn(Jn, kk) < 320) {
    qn(6);
    setTimeout(() => {
      fm(21, 1);
      Tb.push(b => fm(6, true));
    }, 70);
  } else if (L) {
    qn(22);
    setTimeout(() => {
      fm(Kn(Jn, kk) < 250 ? 19 : 11, 1);
      Tb.push(b => fm(6, true));
    }, 70);
  } else {
    qn(12, 0);
    setTimeout(() => {
      fm(11, 1);
      Tb.push(b => fm(6, true));
    }, 70);
  }
}
function Dn() {
  if (kk.y <= 2400) {
    s = "winter🧊";
  } else if (kk.y >= 6850 && kk.y <= 7550) {
    s = "water💧";
  } else {
    s = "summer🌅";
  }
}
function En(c) {
  let a = go(Vk, c);
  if (kk.tails[c] || a.price == 0) {
    if (kk.tailIndex != c) {
      Eg.send("c", 0, c, 1);
    }
  } else if (h) {
    if (a) {
      if (kk.points >= a.price) {
        Eg.send("c", 1, c, 1);
        Eg.send("c", 0, c, 1);
      } else if (kk.tailIndex != 0) {
        Eg.send("c", 0, 0, 1);
      }
    } else if (kk.tailIndex != 0) {
      Eg.send("c", 0, 0, 1);
    }
  } else if (kk.tailIndex != 0) {
    Eg.send("c", 0, 0, 1);
  }
}
var Fn = 0;
const Gn = [37, 38, 44, 35, 42, 28, 29, 30, 36, 51, 49, 43];
var Hn;
var In = 1;
var Jn;
function Kn(c, a) {
  return Math.sqrt(Math.pow(a.y - c.y2, 2) + Math.pow(a.x - c.x2, 2));
}
const Ln = (c, d) => {
  if (c.nextPos) {
    c = c.nextPos;
  }
  if (d.nextPos) {
    d = d.nextPos;
  }
  return Math.atan2(d.y - c.y, d.x - c.x);
};
function Mn() {
  const b = xc.list[kk.items[0]].healing;
  if (kk.health == 100 || yb && (kk.skinIndex == 45 || kk.skinIndex == 56)) {
    return 0;
  }
  return Math.ceil((100 - kk.health) / b);
}
function Nn(b) {
  Dn();
  if (fb && gb && Eg.sendCount < 110 && !Ab && !jb && !w && !yn) {
    if (Om[kk.sid] != 1) {
      od();
      qn(20);
    } else if (Om[kk.sid] == 1 && !yn) {
      gb = false;
      nd();
      Cn();
      return;
    }
  }
  if (fb && eb && Eg.sendCount < 110 && !Ab && !jb && !w) {
    if (Nm[kk.sid] != 1) {
      nd();
      qn(20);
    } else if (Nm[kk.sid] == 1) {
      eb = false;
      Cn();
      return;
    }
  }
  Jn = null;
  const a = Date.now();
  for (var h = 0; h < Ee.length; ++h) {
    Ee[h].forcePos = !Ee[h].visible;
    Ee[h].visible = false;
  }
  for (var h = 0; h < b.length;) {
    E = Tn(b[h]);
    if (E) {
      E.t1 = E.t2 === undefined ? a : E.t2;
      E.t2 = a;
      E.x1 = E.x;
      E.y1 = E.y;
      E.x2 = b[h + 1];
      E.y2 = b[h + 2];
      E.d1 = E.d2 === undefined ? b[h + 3] : E.d2;
      E.d2 = b[h + 3];
      E.dt = 0;
      E.buildIndex = b[h + 4];
      E.weaponIndex = b[h + 5];
      E.xVel - E.x2 - E.x20;
      E.yVel - E.y2 - E.y20;
      E.moveDir = Ln({
        x: b[h + 1],
        y: b[h + 2]
      }, {
        x: E.x2,
        y: E.y2
      });
      E.nextPos = {
        x: E.x2 + E.xVel,
        y: E.y2 + E.yVel
      };
      E.WeaponRange = xc.weapons[E.weaponIndex].range;
      E.viewRange = E.viewRange;
      E.weaponVariant = b[h + 6];
      E.team = b[h + 7];
      if ((E.team !== kk.team || !kk.team) && kk.sid !== E.sid && (!Jn || Kn(E, kk) < Kn(Jn, kk))) {
        Jn = E;
      }
      E.isLeader = b[h + 8];
      E.skinIndex = b[h + 9];
      E.tailIndex = b[h + 10];
      E.iconIndex = b[h + 11];
      E.primaryIndex = E.weapons[0];
      E.secondaryIndex = E.weapons[1];
      E.zIndex = b[h + 12];
      E.buildHealth = b[h + 89];
      E.visible = true;
      Rn(E);
    }
    h += 13;
  }
  if (Jn && qb && kk.tailIndex != 11 && (kk.skinIndex != 53 || kk.skinIndex != 22 || kk.skinIndex != 11) && Kn(Jn, kk) <= xc.weapons[kk.weapons[1] == 10 ? kk.weapons[1] : kk.weapons[0]].range * 1.64 && Nm[kk.sid] == 1 && Om[kk.sid] == 1 && !jb && !w && !yn) {
    if (kk.secondaryIndex == 10 || kk.secondaryIndex == 12 || kk.secondaryIndex == 13 || kk.secondaryIndex == 9) {
      qn(53);
      md();
      qb = false;
    } else {
      im();
      qb = false;
    }
  }
  hb = J.filter(b => b.trap && b.owner.sid != kk.sid && !oo(b.owner.sid) && b.active && Math.hypot(b.y - kk.y2, b.x - kk.x2) < 76).sort((c, a) => Math.hypot(c.y - kk.y2, c.x - kk.x2) - Math.hypot(a.y - kk.y2, a.x - kk.x2))[0];
  if (hb && sb && !w) {
    Ab = true;
  }
  i();
  Fn++;
  if (Fn == Gn.length) {
    Fn = 0;
  }
  if (k && g && bb && Jn && Kn(Jn, kk) < 500 && !Ab && !jb) {
    if (g) {
      let d = Math.atan2(Jn.y2 - g.y, Jn.x2 - g.x);
      let a = {
        x: Jn.x2 + Math.cos(d) * 60,
        y: Jn.y2 + Math.sin(d) * 60
      };
      if (k && Kn(a, kk) <= 20 && Jn && Kn(Jn, kk) < 500) {
        a = {
          x: Jn.x2 + Math.cos(d) * 52,
          y: Jn.y2 + Math.sin(d) * 52
        };
      }
      bb = true;
      let b = Math.atan2(a.y - kk.y2, a.x - kk.x2);
      Eg.send("a", b, 1);
    } else if (k && g && bb && Jn && Kn(Jn, kk) < 500) {
      Eg.send("a", null);
    }
  } else if (k && g && bb && Jn && Kn(Jn, kk) < 500) {
    Eg.send("a", null);
  }
  function i() {
    if (hb && sb && !yn && !w) {
      if (kk.animTime == 0) {
        Eg.send("d", 1);
        l();
        om(kk.weapons[1] == 10 ? kk.weapons[1] : kk.weapons[0], true);
        Eg.send("D", Math.atan2(hb.y - kk.y2, hb.x - kk.x2));
      } else {
        nn(Kn(Jn, kk) < 260 ? 2 : null, Math.atan2(hb.y - kk.y2, hb.x - kk.x2) + pn(226));
        nn(Kn(Jn, kk) < 260 ? 2 : null, Math.atan2(hb.y - kk.y2, hb.x - kk.x2) - pn(226));
        Eg.send("D", null);
        j();
      }
    }
  }
  if (Jn) {
    c = Math.floor(Jn.x);
    e = Math.floor(Jn.y);
    d = Math.floor(Jn.health);
    f = Math.floor(Kn(Jn, kk));
  }
  if (!Jn) {
    f = "NaN";
    t = "NaN";
    c = "NaN";
    e = "NaN";
    d = "NaN";
  }
  if (Jn) {
    if (Jn && Kn(Jn, kk) <= 250 && (Jn.skinIndex == 7 || Jn.skinIndex == 53)) {
      t = "😰";
    } else if (Jn && Kn(Jn, kk) <= 150 && kk.skinIndex == 6 && (Jn.skinIndex == 53 || Jn.skinIndex == 12 || Jn.skinIndex == 11) && Jn.weaponIndex == 15) {
      t = "😐";
    } else if (E == Jn && (E.chatMessage == "ez" || E.chatMessage == "EZ" || E.chatMessage == "eZ" || E.chatMessage == "Ez" || E.chatMessage == "ezz" || E.chatMessage == "ezzz" || E.chatMessage == "Ezzz")) {
      t = "😡";
    } else if (E == Jn && E.name == "RaZoshi") {
      t = "💀";
    } else {
      t = "😃";
    }
  }
  L = J.filter(b => b.name == "turret" && b.owner.sid != kk.sid && !w && !oo(b.owner.sid) && b.active && Math.hypot(b.y - kk.y2, b.x - kk.x2) < 700).sort((c, a) => Math.hypot(c.y - kk.y2, c.x - kk.x2) - Math.hypot(a.y - kk.y2, a.x - kk.x2))[0];
  if (L) {
    q = "have";
  } else {
    q = "NaN";
  }
  function j() {
    if (Jn && (Jn.weaponIndex == 4 || Jn.weaponIndex == 7 || Jn.weaponIndex == 6)) {
      qn(26);
    } else {
      qn(6);
    }
  }
  function l() {
    if (Jn && Jn.weaponIndex == 10 && (Jn.primaryIndex == 5 || Jn.primaryIndex == 4) && Kn(Jn, kk) <= 250) {
      qn(6);
    } else if (Jn && Jn.primaryIndex == 5 && Jn.weaponVariant > 2 && Kn(Jn, kk) > 170 && (Jn.skinIndex == 22 || Jn.skinIndex == 40)) {
      qn(6);
    } else if (Jn && Kn(Jn, kk) <= 70 && Jn.primaryIndex == 4) {
      qn(6);
    } else {
      qn(40, 0);
    }
  }
  k = J.filter(b => b.trap && Jn && (b.owner.sid == kk.sid || b.owner.sid == oo) && b.active && Math.hypot(b.y - Jn.y2, b.x - Jn.x2) <= 73).sort((c, a) => Math.hypot(c.y - Jn.y2, c.x - Jn.x2) - Math.hypot(a.y - Jn.y2, a.x - Jn.x2))[0];
  g = J.filter(b => b.dmg && Jn && (b.owner.sid == kk.sid || b.owner.sid == oo) && b.active && Math.hypot(b.y - Jn.y2, b.x - Jn.x2) <= 153).sort((c, a) => Math.hypot(c.y - Jn.y2, c.x - Jn.x2) - Math.hypot(a.y - Jn.y2, a.x - Jn.x2))[0];
  g = J.filter(b => b.dmg && Jn && (b.owner.sid == kk.sid || b.owner.sid == oo) && b.active && Math.hypot(b.y - Jn.y2, b.x - Jn.x2) <= 153).sort((c, a) => Math.hypot(c.y - Jn.y2, c.x - Jn.x2) - Math.hypot(a.y - Jn.y2, a.x - Jn.x2))[0];
  po = J.filter(b => b.dmg && b.owner.sid !== kk.sid && b.owner.sid !== oo && b.active && Math.hypot(b.y - kk.y2, b.x - kk.x2) <= 110).sort((c, a) => Math.hypot(c.y - kk.y2, c.x - kk.x2) - Math.hypot(a.y - kk.y2, a.x - kk.x2))[0];
  if (z > 359) {
    z = 0;
  } else {
    z++;
    B = "hsla(" + z + ", 100%, 50%, 30)";
  }
  if (kk.x != Mb || kk.y != Nb) {
    if (Jb == 1) {
      if (Math.sqrt(Math.pow(kk.y - Lb, 2) + Math.pow(kk.x - Kb, 2)) >= 100) {
        on(3, Math.atan2(Nb - kk.y, Mb - kk.x) + pn(70));
        on(3, Math.atan2(Nb - kk.y, Mb - kk.x) - pn(70));
        on(3, Math.atan2(Nb - kk.y, Mb - kk.x) - pn(0));
        Kb = kk.x;
        Lb = kk.y;
      }
    }
    Mb = kk.x;
    Nb = kk.y;
  }
  var m = 85;
  const n = c => {
    let a = {
      x: kk.nextPos.x + Math.cos(c) * m,
      y: kk.nextPos.y + Math.sin(c) * m
    };
    Kn = Pb(kk.nextPos.x, kk.nextPos.y, a.x, a.y);
    return Kn <= 50;
  };
  if (cb && !jb && !w && Eg.sendCount <= 100 && !Ab && Jn) {
    if (Kn(Jn, kk) < 300 && Kn(Jn, kk) > 160) {
      nn(4, rn(Jn));
    } else if (Kn(Jn, kk) < 160) {
      nn(4, rn(Jn));
      nn(2, rn(Jn) + pn(70));
    }
  }
  let o = false;
  o = J.filter(b => b.dmg && kk.animTime <= 10 && (b.owner.sid == kk.sid || b.owner.sid == oo) && b.active && Math.hypot(b.y - Jn.y2, b.x - Jn.x2) <= 95).sort((c, a) => Math.hypot(c.y - Jn.y2, c.x - Jn.x2) - Math.hypot(a.y - Jn.y2, a.x - Jn.x2))[0];
  if (Jn && o && zb && Eg.sendCount < 100 && !jb) {
    if (Jn && Kn(Jn, kk) <= kk.WeaponRange * 1.7 && !k) {
      On();
    } else if (Jn && Kn(Jn, kk) <= 95 && k) {
      On();
    }
  }
}
function On() {
  if (Jn) {
    if (Eg.sendCount < 100) {
      try {
        nd();
        qn(7);
        Eg.send("d", 1);
        Eg.send("D", rn(Jn));
        N = true;
        setTimeout(() => {
          fm(Kn(Jn, kk) < 250 ? 19 : 0, 1);
          Tb.push(b => fm(6, true));
          Eg.send("D", null);
          Eg.send("d", 0);
          N = false;
          qn(Jn.health - 19 <= 0 || bb ? 53 : 6);
        }, 100);
        setTimeout(() => {
          if (kk.skinIndex == 53 || kk.skinIndex == 53) {
            qn(6);
          }
        }, 200);
      } catch (b) {} finally {
        nd();
      }
    } else {
      try {
        qn(7);
        Eg.send("d", 1);
        N = true;
        setTimeout(() => {
          fm(Kn(Jn, kk) < 250 ? 19 : 0, 1);
          Tb.push(b => fm(6, true));
          Eg.send("d", 0);
          N = false;
          Cn();
        }, 100);
      } catch (b) {} finally {
        nd();
      }
    }
  }
}
function Qn(c) {
  if (kk.team) {
    return re.find(a => a === c);
  } else {
    return null;
  }
}
function Rn(b) {
  if (b.weaponIndex < 9) {
    if (b.weaponIndex == b.primary) {
      if (b.buildIndex == -1) {
        b.pr = Nm[b.sid];
        b.sr = Om[b.sid];
        Nm[b.sid] = Math.min(1, Nm[b.sid] + 111 / xc.weapons[b.primary].speed);
      } else {
        b.pr = Nm[b.sid];
      }
    } else {
      b.primary = b.weaponIndex;
    }
  } else if (b.weaponIndex > 8) {
    if (b.weaponIndex == b.secondary) {
      if (b.buildIndex == -1) {
        b.sr = Om[b.sid];
        b.pr = Nm[b.sid];
        Om[b.sid] = Math.min(1, Om[b.sid] + 111 / xc.weapons[b.secondary].speed);
      } else {
        b.sr = Om[b.sid];
      }
    } else {
      b.secondary = b.weaponIndex;
    }
  } else {
    b.sr = Om[b.sid];
    b.pr = Nm[b.sid];
  }
}
function Sn(c) {
  for (let a = 0; a < Ee.length; ++a) {
    if (Ee[a].id == c) {
      return Ee[a];
    }
  }
  return null;
}
function Tn(c) {
  for (let a = 0; a < Ee.length; ++a) {
    if (Ee[a].sid == c) {
      return Ee[a];
    }
  }
  return null;
}
function Un(c) {
  for (let a = 0; a < He.length; ++a) {
    if (He[a].sid == c) {
      return He[a];
    }
  }
  return null;
}
function _i(c) {
  for (let a = 0; a < J.length; ++a) {
    if (J[a].sid == c) {
      return J[a];
    }
  }
  return null;
}
function Vn(b) {
  return Wn(J, b);
}
function Wn(c, d) {
  return c.find(b => b.sid === d);
}
let Xn = -1;
function Yn() {
  if (!lb) {
    const b = Date.now() - Xn;
    window.pingTime = b;
    Fk.innerText = "";
  }
}
let Zn;
function $n() {
  if (Zn) {
    clearTimeout(Zn);
  }
  if (Zj()) {
    Xn = Date.now();
    Eg.send("0");
  }
  Zn = setTimeout($n, 2500);
}
function Pn(b) {
  Gk.innerText = "automills:" + Jb;
}
let _n;
let ao;
let bo = performance.now();
window.requestAnimFrame = function () {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (b) {
    window.setTimeout(b, Infinity);
  };
}();
const co = (r, a, b, c, d, e, f, g, s = 100, i, j, k, l, m) => {
  g = Math.min(g, s);
  let n = f * 0.1;
  let o = f / 20;
  let p = l ? 0 - d / (s / g) : d / (s / g);
  r.save();
  r.globalAlpha = c;
  if (k) {
    r.beginPath();
    r.lineCap = "round";
    if (m) {
      r.filter = r.filter = "contrast(" + m + ")";
    }
    r.strokeStyle = j;
    r.lineWidth = n * k + 1;
    r.arc(e.x - a, e.y - b, o, Math.PI / 2, Math.PI / 2 + p, l);
    r.stroke();
    r.closePath();
  }
  r.beginPath();
  r.lineCap = "round";
  r.lineWidth = n;
  r.strokeStyle = i;
  r.arc(e.x - a, e.y - b, o, Math.PI / 2, Math.PI / 2 + p, l);
  r.stroke();
  r.closePath();
  r.restore();
};
const eo = (i, a, b, c, d, e, f, g) => {
  i.save();
  i[g ? "strokeStyle" : "fillStyle"] = d;
  i.globalAlpha = e;
  i.beginPath();
  if (g) {
    i.lineWidth = g * 2;
  }
  i.arc(c.x - a, c.y - b, f, 0, Math.PI * 2);
  i[g ? "stroke" : "fill"]();
  i.restore();
};
function fo(g, a, d, e) {
  if (!kk) {
    return;
  }
  b = e.length;
  for (let f = 0; f < b; f += 1) {
    const b = e[f];
    if (b.sid >= 1000000000) {} else if (b && b.isItem && b.active) {
      const c = oo(b.owner.sid) ? "green" : "#cc5151";
      const e = Pb(b.x, b.y, kk.x2, kk.y2);
      if (b.health > 0 && e - b.getScale() - 35 < 200) {
        co(g, a - b.xWiggle, d - b.yWiggle, 1, Math.PI * 2, b, b.getScale(), b.health, b.maxHealth, c, ue, 2.95);
      }
    }
  }
}
function go(c, d) {
  return c.find(b => b.id === d);
}
function ho() {
  ao = performance.now();
  _n = ao - bo;
  bo = ao;
  ek = Date.now();
  $e = ek - fk;
  fk = ek;
  Df();
  requestAnimFrame(ho);
}
Uf();
ho();
function io(b) {
  window.open(b, "_blank");
}
window.openLink = io;
window.aJoinReq = hl;
window.follmoo = ck;
window.kickFromClan = ti;
window.sendJoin = il;
window.leaveAlliance = kl;
window.createAlliance = jl;
window.storeBuy = sl;
window.storeEquip = ff;
window.showItemInfo = Kh;
window.selectSkinColor = pf;
window.changeStoreIndex = pl;
window.config = Cg;
function jo(b) {
  return document.getElementById(b);
}
try {
  let k = window.msgpack;
  let j;
  WebSocket.prototype.oldSend = WebSocket.prototype.send;
  WebSocket.prototype.send = function (c) {
    if (!j) {
      j = this;
      j.addEventListener("message", function (c) {
        b(c);
      });
    }
    j.oldSend(c);
  };
  let a = localStorage.getItem("moofoll") ? 100 : 0;
  function b(e) {
    let b = new Uint8Array(e.data);
    let d = k.decode(b);
    let f = {
      D: "addPlayer",
      N: "updatePlayerValue",
      S: "updateItemCounts"
    };
    let g = {
      name: f[d[0]],
      arg: function (b) {
        return d[1][b];
      }
    };
    let h = function (b) {
      return g.name === b;
    };
    if (h("addPlayer")) {
      let b = g.arg(1);
      if (b) {
        c();
      }
    }
    if (h("updatePlayerValue")) {
      let c = g.arg(0);
      let d = g.arg(1);
      if (c === "food") {
        a = d;
        for (let c = 0; c < 3; c++) {
          let e = 16 + c;
          let b = c === 0 ? 10 : c === 1 ? 15 : c === 2 ? 25 : 10;
          if (c !== 0) {
            jo("itemCount" + e).innerHTML = Math.floor(a / b);
          } else {
            jo("itemCount" + e).innerHTML = "";
          }
        }
      }
    }
    if (h("updateItemCounts")) {
      let d = g.arg(0);
      let a = g.arg(1);
      l[d] = a;
      c(d);
    }
  }
  let l = [];
  let e = [];
  let f = [0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 11, 5, 6, 7, 8, 9, 10, 12, 13];
  function c(g = undefined) {
    if (g === undefined) g = undefined;
    for (let a = 0; a < f.length; ++a) {
      let b = f[a];
      let c = 16 + a;
      if (!e[c]) {
        e[c] = document.createElement("div");
        e[c].id = "itemCount" + c;
        e[c].style.position = "absolute";
        e[c].style.paddingLeft = "5px";
        e[c].style.transition = "0.5s";
        e[c].style.fontSize = "22px fwafwa";
        e[c].style.color = "#ffffff";
        e[c].style.textAlign = "center";
        if (a !== 1) {
          e[c].innerHTML = l[b] > 0 ? l[b] : "";
        }
        jo("actionBarItem" + c).appendChild(e[c]);
      } else if (g == b) {
        if (a === 1) {
          jo("itemCount" + c).style.display = "none";
        } else if (typeof a !== "undefined") {
          e[c].innerHTML = lb == 0 ? l[g] : "";
        }
      }
    }
  }
  let d = document.getElementById("itemCount17");
  if (d) {
    d.style.display = "none";
  }
  c();
} catch (b) {
  throw new Error(b);
}